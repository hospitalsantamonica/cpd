PROMPT CREATE OR REPLACE PACKAGE dbamv.pack_ffcv_espelho
CREATE OR REPLACE PACKAGE dbamv.pack_ffcv_espelho IS
  PROCEDURE proc_valorizacao(
    ncdregfat       IN      NUMBER
  , cmsgerro        IN OUT  VARCHAR2
  , bincremental    IN      BOOLEAN := FALSE
  , pncdlancamento  IN      NUMBER DEFAULT NULL);
  FUNCTION fnc_retorna_perc_sd(pvprofat IN VARCHAR2, pnregra IN NUMBER, pddtmov IN DATE)
    RETURN NUMBER;
  PROCEDURE fnc_ffcv_calc_desconto_conta(nconta IN NUMBER, natendimento IN NUMBER);
  PROCEDURE prc_reg_fat_insere_acrescimo(
    pcd_reg_fat      IN  NUMBER
  , pcd_convenio     IN  NUMBER
  , pvl_total_conta  IN  NUMBER DEFAULT 0
  , pvauditoria      IN  VARCHAR2 DEFAULT NULL);
  PROCEDURE prc_regra_perc_sd(
    vlanc      IN      VARCHAR2
  , ctpconta   IN      CHAR
  , ncdregra   IN      NUMBER
  , ncdregfat  IN      NUMBER
  , ntotconta  IN OUT  NUMBER);
  PROCEDURE AJUSTA_VALOR ( pnCd_Conta in number
							  ,pbNaoDestacar in boolean default false
							  ,pnPercAcre in number default null
                              ,pnPercDesc in number default null
                              ,pnCdLancamento in number default null);
  function FNC_OBTEM_SEQUENCIA(pnCdConta in number,
                               pTpConta  in varchar2) return number;
  FUNCTION FNC_RETORNA_PERCENTUAL_PACOTE   (pCD_ATENDIMENTO   in number
                                         ,pCD_CONTA         in number
                                         ,pCD_LANCAMENTO    in number) return number;
  FUNCTION FNC_RETORNA_PACOTE (pCD_ATENDIMENTO     in number
                            ,pCD_CONTA           in number
                            ,pCD_LANCAMENTO      in number
                            ,pSN_FATURADO        out varchar2
                            ,pSN_GUIA            out varchar2
                            ,pCD_PRO_FAT_PACOTE  out varchar2
                            ,pSN_AUTOMATICO      out varchar2
                            ,pSN_PRINCIPAL       out varchar2
                            ,pQT_DIARIAS         out number
                            ,pVL_PERC_PAC_SECUND out number
                            ,pTP_COBRANCA_PAC_SECUND out varchar2
                            ,pVL_PERC_PAC_SECUND_2 out number
                            ,pVL_PERC_PAC_SECUND_3 out number
                            ,pVL_PERC_PAC_SECUND_4 out number
                            ,pSN_TELA_RET          in varchar2 default 'N'
                            ,pDS_RETORNO           out varchar2
                            ,psn_valida_autorizacao  out varchar2
                            ,pSN_DAY_CLINIC out varchar2
                            ,pVL_PERC_ACRES_GEMELARES out number
                            ,pVL_PERC_DESC_RN_UTI out number
                            ) return number;
FUNCTION  FNC_LE_PACOTE     (pCD_MULTI_EMPRESA   in number
                            ,pTP_ATENDIMENTO     in varchar2
                            ,pCD_CONVENIO        in number
                            ,pCD_CON_PLA         in number
                            ,pCD_TIP_ACOM        in number
                            ,pCD_PRO_FAT         in varchar2
                            ,pCD_SETOR           in number
                            ,pDT_LANCAMENTO      in date
                            ,pSN_GUIA            out varchar2
                            ,pCD_PRO_FAT_PACOTE  out varchar2
                            ,pSN_AUTOMATICO      out varchar2
                            ,pQT_DIARIAS         out number
                            ,pVL_PERC_PAC_SECUND out number
                            ,pCD_ATENDIMENTO     in number default null
                            ,pCD_TIPO_INTERNACAO in number default null
                            ,pTP_COBRANCA_PAC_SECUND out varchar2
                            ,pVL_PERC_PAC_SECUND_2 out number
                            ,pVL_PERC_PAC_SECUND_3 out number
                            ,pVL_PERC_PAC_SECUND_4 out number
                            ,pSN_TELA_LER          in varchar2 default 'N'
                            ,pDS_RETORNO           out varchar2
                            ,pCD_CONTA             in number default null
                            ,pSN_VALIDA_AUTORIZACAO  out varchar2
                            ,pSN_DAY_CLINIC out varchar2
                            ,pVL_PERC_ACRES_GEMELARES out number
                            ,pVL_PERC_DESC_RN_UTI out number
                            /* PDA 432166 - Thiago Miranda de Oliveira - 16/05/2011 - criando variável para passar o cid do atendimento para a rotina*/
                            ,pCD_CID            in varchar2  default null
                            /*PDA 432166 fim*/
                            ) return number;
  FUNCTION FNC_VERIFICA_ACOMODACAO_PACOTE  (pCD_ATENDIMENTO   in number
                                         ,pCD_CONTA         in number
                                         ,pCD_PACOTE        in number
                                         ,pCD_TIP_ACOM      in number := null) return boolean;
  FUNCTION FNC_VERIFICA_PACOTE_ITEM  (pCD_PACOTE        in number
                                   ,pCD_SETOR         in number
                                   ,pCD_PRO_FAT       in varchar2
                                   ,pCD_ATENDIMENTO   in number
                                   ,pCD_CONTA         in number
                                   ,pCD_LANCAMENTO    in number
                                   ,pCD_CONTA_PACOTE  in number
                                   ,pQT_LANCAMENTO    in number
                                   /* PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - criando variável de retorno das quantidades do procedimento*/
                                   ,pQT_EXCEDEU         out number
                                   /*PDA 432166 fim*/
                                   /* PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - criando variável de retorno sen vai ser inserido em uma conta particular*/
                                   ,pConta_part       out varchar2
                                   /*PDA 432166 fim*/
                                   ,pTP_CHECAGEM      in varchar2
                                   ,pDT_LANCAMENTO    in date DEFAULT NULL
                                   ,pHR_LANCAMENTO    in date DEFAULT NULL
                                   ,pCD_CONVENIO      in number DEFAULT NULL
                                   ,pCD_CON_PLA       in number DEFAULT NULL
                                   ,pTP_ATENDIMENTO   in varchar2 DEFAULT NULL
                                   ,pCD_TIP_ACOM      in number DEFAULT NULL) return boolean;
 FUNCTION FNC_APLICA_PERCENTUAL_PACOTE    (pCD_CONTA         in number
                                         ,pCD_LANCAMENTO    in number
                                         ,pTP_ATENDIMENTO   in varchar2
                                         ,pVL_VALOR         in number) return number;
  FUNCTION VAL_PROC_FFCV(
  cprocedimento    IN      VARCHAR2
, ddatarefer       IN      DATE
, dhorarefer       IN      DATE
, ncodconvenio     IN      NUMBER
, ncodplano        IN      NUMBER
, ctipoatend       IN      VARCHAR2
, ncodtipoaco      IN      NUMBER
, ctpatimed        IN      VARCHAR2
, nvlpercirmult    IN      NUMBER
, cretmsg          OUT     VARCHAR2
, nvloper          OUT     NUMBER
, nvlhonor         OUT     NUMBER
, nvlfilme         OUT     NUMBER
, nvlporte         OUT     NUMBER
, nvlchtotal       OUT     NUMBER
, nvlchhonor       OUT     NUMBER
, nvltaxa          OUT     NUMBER
, nvldesconto      OUT     NUMBER
, nvalproced       IN      NUMBER
, nqtde            IN      NUMBER DEFAULT 1
, nvlrtotal        OUT     NUMBER
, nregra           IN      NUMBER DEFAULT NULL
, npercfranquia    IN      NUMBER DEFAULT NULL
, ncdfranquia      IN      NUMBER DEFAULT NULL
, ncdindice        IN      NUMBER DEFAULT NULL
, ncdregraacop     IN      NUMBER DEFAULT NULL
, cprofatexced     IN      VARCHAR2 DEFAULT NULL
, ctpconvenio      IN      VARCHAR2 DEFAULT NULL
, ncdconvacop      IN      NUMBER DEFAULT NULL
, ncdplanacop      IN      NUMBER DEFAULT NULL
, bprocessarvalor  IN      BOOLEAN DEFAULT NULL
, pncdprestador    IN      NUMBER DEFAULT NULL
, pncdsetor        IN      NUMBER DEFAULT NULL
, ncdconta         IN      NUMBER DEFAULT NULL
, ncdlancamento    IN      NUMBER DEFAULT NULL
)
  RETURN NUMBER;
  PROCEDURE prc_reg_amb_insere_acrescimo(
    pcd_reg_amb      IN  NUMBER
  , pcd_convenio     IN  NUMBER
  , pvl_total_conta  IN  NUMBER DEFAULT 0
  , pvauditoria      IN  VARCHAR2 DEFAULT NULL);
  PROCEDURE valores_conta_ambula(
    ncdregamb       IN      NUMBER
  , cmsgerro        IN OUT  VARCHAR2
  , ncdatendimento  IN      NUMBER DEFAULT NULL
  , ncdlanc         IN      NUMBER DEFAULT NULL);
 FUNCTION val_proc_ffcv_resumido
 (CPROCEDIMENTO IN VARCHAR2
 ,DDATAREFER IN DATE
 ,DHORAREFER IN DATE
 ,NCODCONVENIO IN NUMBER
 ,NCODPLANO IN NUMBER
 ,CTIPOATEND IN VARCHAR2
 ,NCODTIPOACO IN NUMBER
 ,CRETMSG OUT VARCHAR2
 ,cTipoProduto IN VARCHAR2
 ,nProduto    IN Number) RETURN BOOLEAN;
 function FNC_VERIFICA_GUIA_OBRIGATORIA( pnAtend    number,
                                        pnConta    number,
                                        pvProFat   varchar,
                                        pnConvenio number default null,
                                        pnPlano    number default null,
                                        pvTpAtend  varchar default null,
                                        pdDtLanc   date,
                                        pnSetor    number default null ) return boolean;
FUNCTION FNC_EXCLUI_SUBSTITUI_PROC
        (p_TpAtendimento    in varchar2,
         p_CdConta          in number,
         p_CdLancamento     in number,
         pCdProFat          in varchar2,
         pDtLancamento      in date,
         pCdSetor           in number,
         pCdConvenio        in number,
         pCdConPla          in number)
         return varchar;
function FNC_RETORNA_GUIA_DISPONIVEL( pnAtend        in number,
                                      pnConta        in number,
                                      pnConvenio     in number  default null,
                                      pvProFat       in varchar,
                                      pnQuantLancada in number,
                                      pnTipAcom      in number  default null,
                                      pvTpGuia       in varchar default null,
                                      pnGuiaPendente out number ) return number;
function FNC_RETORNA_SALDO_GUIA( pnAtend  number,
                                 pnCdGuia number,
                                 pvProFat varchar) return number;
PROCEDURE PRC_REPLICA_ITENS_CONTA
        ( p_vTpConta        in varchar2,
          p_nCdConta         in number,
          p_nCdAtend         in number default null,
          p_nCdMultiEmpresa  in number,
          p_vTpAcao          in varchar2  );
FUNCTION FNC_APLICA_REGRA_LANCAMENTO
        (p_nCdConvenio      in number,
         p_nCdConPla        in number,
         p_nCdMultiEmpresa  in number,
         p_nCdConta         in number,
         p_nCdAtend         in number,
         p_dDataIni         in date ,
         p_dDataFim         in date)  return varchar;
  function fnc_traduz_proc( pvTipo          in varchar2, --  C / D / T  (código, descrição, tabela tiss)
                            -- 1a. opção de parâmetros
                            pnCdAtendimento in dbamv.atendime.cd_atendimento%type,
 	                        pnCdConta       in dbamv.itreg_fat_espelho.cd_reg_fat%type,
                            pnCdLancamento  in dbamv.itreg_fat_espelho.cd_lancamento%type,
 	                        -- 2a. opção de parâmetros
 	                        pnCdConvenio    in dbamv.convenio.cd_convenio%type,
 	                        pvTpAtend       in dbamv.atendime.tp_atendimento%type,
 	                        pvProFat        in dbamv.pro_fat.cd_pro_fat%type,
 	                        pnCdSetor		in dbamv.setor.cd_setor%type,
 	                        --
                     	    pvReserva       in varchar2) return varchar2;
  cursor cItem( pTpConta in varchar2, pcdAtendimento in number,
                pcdConta in number, pcdLancamento in dbamv.itreg_amb_espelho.CD_LANCAMENTO%TYPE,
                pcdItLan in varchar2, pReserva in varchar2) is
              select ita.cd_pro_fat
                   , nvl(ita.tp_pagamento,'P') tp_pagamento
                   , ita.cd_convenio
                   , null cd_conta_pai
                   , ita.cd_prestador
                   , ita.cd_ati_med              cd_ati_med
                   , null                         cd_itlan_med
                   , ita.cd_setor_produziu
                   , ita.vl_percentual_multipla
                   , ita.cd_mvto
                   , ita.cd_itmvto
                   , ita.tp_mvto
                   , r.cd_regra
                   , to_date(null) dt_lancamento
                   , ita.hr_lancamento
                   , ita.sn_horario_especial
                   , null dt_inicio
                   , ita.cd_lancamento
                   , ita.cd_setor
                   , to_char(ita.dt_sessao, 'yyyy-mm-dd') dt_sessao
                   , ita.cd_reg_amb cd_conta
                   , ita.cd_atendimento
                   , ita.cd_guia
                   , ita.vl_total_conta
                   , ita.qt_lancamento
                from dbamv.itreg_amb_espelho ita,
                     dbamv.reg_amb r
               where pTpConta           = 'A'
                 and ita.cd_lancamento  = pcdLancamento
                 and ita.cd_atendimento = pcdAtendimento
                 and ita.cd_reg_amb     = pcdConta
                 and ita.cd_reg_amb     = r.cd_reg_amb
               union all
              select itf.cd_pro_fat
                   , nvl(nvl(itl.tp_pagamento, itf.tp_pagamento),'P') tp_pagamento
                   , r.cd_convenio
                   , null cd_conta_pai
                   , nvl(itl.cd_prestador, itf.cd_prestador)        cd_prestador
                   , nvl(itl.cd_ati_med, itf.cd_ati_med)            cd_ati_med
                   , itl.cd_ati_med                                 cd_itlan_med
                   , itf.cd_setor_produziu
                   , itf.vl_percentual_multipla
                   , itf.cd_mvto
                   , itf.cd_itmvto
                   , itf.tp_mvto
                   , r.cd_regra
                   , itf.dt_lancamento
                   , itf.hr_lancamento
                   , itf.sn_horario_especial
                   , to_char(r.dt_inicio, 'yyyy-mm-dd') dt_inicio
                   , itf.cd_lancamento
                   , itf.cd_setor
                   , null dt_sessao
                   , r.cd_reg_fat  cd_conta
                   , r.cd_Atendimento
                   , itf.cd_guia
                   , nvl(itl.vl_liquido, itf.vl_total_conta)  vl_total_conta
                   , itf.qt_lancamento
                from dbamv.itreg_fat_espelho itf,
                     dbamv.reg_fat r,
                     (select itlan_med.cd_lancamento
                           , itlan_med.tp_pagamento
                           , itlan_med.cd_reg_fat
                           , itlan_med.cd_prestador
                           , itlan_med.cd_ati_med
                           , itlan_med.vl_liquido
                        from dbamv.itlan_med_espelho itlan_med
                       where itlan_med.cd_reg_fat      = pcdConta
                         and itlan_med.cd_lancamento   = pcdLancamento
                         and itlan_med.cd_ati_med      = pcdItLan) itl
                where pTpConta              = 'H'
                  and itf.cd_reg_fat        = pcdConta
                  and itf.cd_reg_fat        = r.cd_reg_fat
                  and itf.cd_lancamento     = pcdLancamento
                  and itl.cd_lancamento (+) = itf.cd_lancamento
                  and itl.cd_reg_fat(+)     = itf.cd_reg_fat;
  vcAtendimento            dbamv.pkg_ffcv_tiss_pii.cAtendimento%rowtype;
  vcConta                  dbamv.pkg_ffcv_tiss_pii.cConta%rowtype;
  vItem                    dbamv.pack_ffcv_espelho.cItem%rowtype;
  vcProFat                 dbamv.pkg_ffcv_tiss_pii.cProFat%rowtype;
  vcProFatAux              dbamv.pkg_ffcv_tiss_pii.cProFatAux%rowtype;
  vcEmpresaConv            dbamv.pkg_ffcv_tiss_pii.cEmpresaConv%rowtype;
  cEmpresaConv             dbamv.pkg_ffcv_tiss_pii.cEmpresaConPla%rowtype;
  vcTabFatRegra            dbamv.pkg_ffcv_tiss_pii.cTabFatRegra%rowtype;
  vcConfAprProc            dbamv.pkg_ffcv_tiss_pii.cConfAprProc%rowtype;
  vcProcAgrup              dbamv.pkg_ffcv_tiss_pii.cProcAgrup%rowtype;
  vcCodPro                 dbamv.pkg_ffcv_tiss_pii.cCodPro%rowtype;
  vcTUSS                   dbamv.pkg_ffcv_tiss_pii.cTUSS%rowtype;
  vcCBHPM                  dbamv.pkg_ffcv_tiss_pii.cCBHPM%rowtype;
  vcBRASINDICE             dbamv.pkg_ffcv_tiss_pii.cBRASINDICE%rowtype;
  vcSIMPRO                 dbamv.pkg_ffcv_tiss_pii.cSIMPRO%rowtype;
  vcEmpresaConPla          dbamv.pkg_ffcv_tiss_pii.cEmpresaConPla%rowtype;
END pack_ffcv_espelho;
/

PROMPT CREATE OR REPLACE PACKAGE BODY dbamv.pack_ffcv_espelho
CREATE OR REPLACE PACKAGE BODY dbamv.pack_ffcv_espelho IS
  PROCEDURE proc_valorizacao(
    ncdregfat       IN      NUMBER
  , cmsgerro        IN OUT  VARCHAR2
  , bincremental    IN      BOOLEAN := FALSE
  , pncdlancamento  IN      NUMBER DEFAULT NULL) IS
  BEGIN
    DECLARE
      CURSOR c_itregfat IS
        SELECT itreg_fat_espelho.cd_lancamento
             , itreg_fat_espelho.dt_lancamento
             , itreg_fat_espelho.hr_lancamento
             , itreg_fat_espelho.qt_lancamento
             , itreg_fat_espelho.vl_percentual_multipla
             , itreg_fat_espelho.cd_pro_fat
             , itreg_fat_espelho.cd_prestador
             , itreg_fat_espelho.vl_total_conta
             , itreg_fat_espelho.vl_acrescimo
             , itreg_fat_espelho.vl_desconto
             , itreg_fat_espelho.qt_ch_unitario
             , itreg_fat_espelho.sn_pertence_pacote
             , itreg_fat_espelho.sn_horario_especial
             , itreg_fat_espelho.tp_pagamento
             , reg_fat.cd_reg_fat
             , reg_fat.cd_atendimento
             , reg_fat.cd_con_pla
             , reg_fat.cd_convenio
             , gru_pro.tp_gru_pro
             , reg_fat.cd_tip_acom
             , atendime.tp_atendimento
             , atendime.dt_alta
             , atendime.hr_alta
             , reg_fat.dt_inicio
             , reg_fat.dt_final
             , reg_fat.cd_regra
             , itreg_fat_espelho.cd_franquia
             , itreg_fat_espelho.vl_percentual_paciente
             , itreg_fat_espelho.cd_reg_fat_pai
             , itreg_fat_espelho.cd_lancamento_pai
             , itreg_fat_espelho.cd_regra_acoplamento
             , itreg_fat_espelho.cd_regra_atendimento
             , itreg_fat_espelho.cd_regra_atendimento_pro_fat
             , itreg_fat_espelho.cd_reg_fat_rel
             , itreg_fat_espelho.cd_lancamento_rel
             , convenio.tp_convenio
             , empresa_con_pla.cd_indice
             , itreg_fat_espelho.vl_desconto_conta
             , itreg_fat_espelho.cd_setor
             , sn_calc_diferenca_acomodacao sn_diferenca
             , pro_fat.sn_calcula_valor sn_calcula_valor
        FROM   dbamv.itreg_fat_espelho
             , dbamv.reg_fat
             , dbamv.gru_pro
             , dbamv.pro_fat
             , dbamv.atendime
             , dbamv.convenio
             , dbamv.con_pla
             , dbamv.empresa_con_pla
             , dbamv.regra_atendimento_pro_fat
        WHERE  reg_fat.cd_reg_fat = itreg_fat_espelho.cd_reg_fat
               AND convenio.cd_convenio = reg_fat.cd_convenio AND reg_fat.cd_reg_fat = ncdregfat
               AND itreg_fat_espelho.cd_pro_fat = pro_fat.cd_pro_fat
               AND pro_fat.cd_gru_pro = gru_pro.cd_gru_pro
               AND atendime.cd_atendimento = reg_fat.cd_atendimento
               AND con_pla.cd_convenio = reg_fat.cd_convenio
               AND con_pla.cd_con_pla = reg_fat.cd_con_pla
               AND empresa_con_pla.cd_convenio = con_pla.cd_convenio
               AND empresa_con_pla.cd_convenio = reg_fat.cd_convenio
               AND empresa_con_pla.cd_con_pla = reg_fat.cd_con_pla
               AND empresa_con_pla.cd_multi_empresa = reg_fat.cd_multi_empresa
               AND atendime.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
               AND DECODE(pncdlancamento, NULL, itreg_fat_espelho.cd_lancamento, pncdlancamento) = itreg_fat_espelho.cd_lancamento
               AND regra_atendimento_pro_fat.cd_atendimento(+) = atendime.cd_atendimento;
      CURSOR c_itlanmed(nlcto IN NUMBER) IS
        SELECT itlan_med_espelho.cd_ati_med
             , itlan_med_espelho.cd_prestador
             , itlan_med_espelho.tp_pagamento
             , ati_med.tp_funcao
             , ati_med.vl_percentual_pago
          FROM dbamv.itlan_med_espelho
             , dbamv.ati_med
         WHERE itlan_med_espelho.cd_reg_fat = ncdregfat AND itlan_med_espelho.cd_lancamento = nlcto
               AND ati_med.cd_ati_med = itlan_med_espelho.cd_ati_med;
      CURSOR c_itcobpre(nlcto IN NUMBER) IS
        SELECT itcob_pre_espelho.vl_preco_unitario
          FROM dbamv.itcob_pre_espelho
         WHERE itcob_pre_espelho.cd_reg_fat = ncdregfat AND itcob_pre_espelho.cd_lancamento = nlcto;
      CURSOR c_existelfa(nconta IN NUMBER, cprofat IN VARCHAR2) IS
        SELECT lfa.cd_log_falha_importacao
          FROM dbamv.log_falha_importacao lfa
         WHERE lfa.cd_reg_fat = nconta AND lfa.cd_pro_fat = cprofat AND lfa.tp_erro = '03'
               AND lfa.tp_importacao = 'Calculo' AND lfa.nm_usuario_baixou IS NULL;
      CURSOR c_convenio(ncodconv IN NUMBER) IS
        SELECT convenio.sn_fatura_data_alta
          FROM dbamv.convenio
             , dbamv.empresa_convenio
         WHERE convenio.cd_convenio = ncodconv
               AND convenio.cd_convenio = empresa_convenio.cd_convenio
               AND empresa_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_regrafranquia(nconta IN NUMBER) IS
        SELECT reg_fat.cd_regra, empresa_con_pla.cd_indice, reg_fat.cd_convenio, reg_fat.cd_con_pla
          FROM dbamv.reg_fat
             , dbamv.con_pla
             , dbamv.empresa_con_pla
         WHERE reg_fat.cd_reg_fat = nconta AND con_pla.cd_convenio = reg_fat.cd_convenio
               AND con_pla.cd_con_pla = reg_fat.cd_con_pla
               AND empresa_con_pla.cd_convenio = con_pla.cd_convenio
               AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
               AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_regraatend(ncdatend IN NUMBER) IS
        SELECT regra_atendimento.cd_regra_atendimento
          FROM dbamv.regra_atendimento
         WHERE regra_atendimento.cd_atendimento = ncdatend;
      CURSOR c_regraatendprofat(ncdatend IN NUMBER) IS
        SELECT regra_atendimento_pro_fat.cd_regra_atendimento_pro_fat
          FROM dbamv.regra_atendimento_pro_fat
         WHERE regra_atendimento_pro_fat.cd_atendimento = ncdatend;
      CURSOR c_valrelacseq(
        nregra         IN  NUMBER
      , dreferencia    IN  DATE
      , hreferencia    IN  DATE
      , cprofat        IN  VARCHAR2
      , p_pro_fat_pai  IN  VARCHAR2) IS
        SELECT   val_exced.vl_percentual_sub vl_percentual
               , val_exced.cd_pro_fat cd_pro_fat
               , val_exced.vl_subsequente vl_valor
            FROM dbamv.val_exced
           WHERE val_exced.cd_regra = nregra AND val_exced.cd_pro_fat_seq = cprofat
                 AND val_exced.cd_pro_fat = p_pro_fat_pai
                 AND val_exced.cd_pro_fat IN(
                      SELECT DISTINCT cd_pro_fat
                                 FROM dbamv.itreg_fat_espelho
                                WHERE cd_reg_fat = ncdregfat
                                      AND TO_CHAR(hr_lancamento, 'HH24MI') =
                                                                      TO_CHAR(hreferencia, 'HH24MI')
                                      AND TRUNC(dt_lancamento) = TRUNC(dreferencia)
                      UNION
                      SELECT DISTINCT cd_pro_fat
                                 FROM dbamv.itreg_fat_espelho
                                WHERE cd_reg_fat = (SELECT cd_conta_pai
                                                      FROM dbamv.reg_fat
                                                     WHERE cd_reg_fat = ncdregfat)
                                      AND TO_CHAR(hr_lancamento, 'HH24MI') =
                                                                      TO_CHAR(hreferencia, 'HH24MI')
                                      AND TRUNC(dt_lancamento) = TRUNC(dreferencia))
                 AND TRUNC(val_exced.dt_vigencia) <= TRUNC(dreferencia)
        ORDER BY val_exced.dt_vigencia DESC;
      CURSOR c_valrelacionado_ant(nregra IN NUMBER, cprofat IN VARCHAR2) IS
        SELECT 'x'
          FROM dbamv.val_pro_relacionado
         WHERE val_pro_relacionado.cd_regra = nregra AND val_pro_relacionado.cd_pro_fat = cprofat;
      cursor c_val_exced (cprofat  IN  VARCHAR2) is
              select val_exced.vl_percentual_sub vl_percentual
               , val_exced.vl_subsequente vl_valor
               ,val_exced.qt_inicial
                from dbamv.val_exced,
                     dbamv.reg_fat
               where reg_fat.cd_reg_fat = ncdregfat
                     and reg_fat.cd_regra = val_exced.cd_regra
                     and val_exced.cd_pro_fat = cprofat
                     and val_exced.dt_vigencia =
                          (select max(val.dt_vigencia)
                             from dbamv.val_exced val
                            where val.cd_pro_fat = val_exced.cd_pro_fat
                                  and val.cd_regra = val_exced.cd_regra)
                     and val_exced.cd_pro_fat_seq is not null;
      nqtinicial number;
      CURSOR c_valrelacionado(
        nregra         IN  NUMBER
      , dreferencia    IN  DATE
      , hreferencia    IN  DATE
      , cprofat        IN  VARCHAR2
      , p_pro_fat_pai  IN  VARCHAR2) IS
        SELECT   val_pro_relacionado.vl_percentual
               , val_pro_relacionado.cd_pro_fat_pai
               , val_pro_relacionado.sn_incidencia_exame
            FROM dbamv.val_pro_relacionado
           WHERE val_pro_relacionado.cd_regra = nregra AND val_pro_relacionado.cd_pro_fat = cprofat
                 AND val_pro_relacionado.tp_valor = 'P'
                 AND val_pro_relacionado.cd_pro_fat_pai =
                                              NVL(p_pro_fat_pai, val_pro_relacionado.cd_pro_fat_pai)
                 AND val_pro_relacionado.cd_pro_fat_pai IN(
                      SELECT DISTINCT cd_pro_fat
                                 FROM dbamv.itreg_fat_espelho
                                WHERE cd_reg_fat = ncdregfat
                                      AND TO_CHAR(hr_lancamento, 'hh24:mi') =
                                                                     TO_CHAR(hreferencia, 'hh24:mi')
                                      AND TRUNC(dt_lancamento) = TRUNC(dreferencia)
                      UNION
                      SELECT DISTINCT cd_pro_fat
                                 FROM dbamv.itreg_fat_espelho
                                WHERE cd_reg_fat = (SELECT cd_conta_pai
                                                      FROM dbamv.reg_fat
                                                     WHERE cd_reg_fat = ncdregfat)
                                      AND TO_CHAR(hr_lancamento, 'HH24MI') =
                                                                      TO_CHAR(hreferencia, 'HH24MI')
                                      AND TRUNC(dt_lancamento) = TRUNC(dreferencia))
                 AND TRUNC(val_pro_relacionado.dt_vigencia) <= TRUNC(dreferencia)
        ORDER BY val_pro_relacionado.dt_vigencia DESC;
      CURSOR c_config_ffcv IS
        SELECT sn_valores_relacionados, sn_calculo_data_atual, tp_controle_lote
          FROM dbamv.config_ffcv
         WHERE config_ffcv.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_itreg_fat_pai(p_cd_reg_fat_rel IN NUMBER, p_cd_lancamento_rel IN NUMBER) IS
        SELECT cd_pro_fat
          FROM dbamv.itreg_fat_espelho
         WHERE cd_reg_fat = p_cd_reg_fat_rel AND cd_lancamento = p_cd_lancamento_rel;
      CURSOR c_percrelac(cprofat IN VARCHAR2) IS
        SELECT vl_percentual_multipla
          FROM dbamv.itreg_fat_espelho
         WHERE cd_reg_fat = ncdregfat AND cd_pro_fat = cprofat;
      CURSOR chospital IS
        SELECT cd_hospital
          FROM dbamv.hospital
         WHERE hospital.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR ctaxa(pconta IN NUMBER, planc IN NUMBER) IS
        SELECT vl_total_conta
          FROM dbamv.itreg_fat_espelho
         WHERE cd_reg_fat = pconta AND cd_lancamento = planc;
      CURSOR c_grupro(cprofat IN VARCHAR2) IS
        SELECT gru_pro.cd_gru_pro
          FROM dbamv.pro_fat
             , dbamv.gru_pro
         WHERE pro_fat.cd_gru_pro = gru_pro.cd_gru_pro AND pro_fat.cd_pro_fat = cprofat;
      CURSOR c_regra(nconvenio IN NUMBER, nplano IN NUMBER) IS
        SELECT regra.cd_regra
          FROM dbamv.con_pla
             , dbamv.regra
             , dbamv.empresa_con_pla
         WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
               AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
               AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
               AND empresa_con_pla.cd_convenio = nconvenio AND empresa_con_pla.cd_con_pla = nplano
               AND empresa_con_pla.cd_regra = regra.cd_regra(+);
      CURSOR c_acresdesc(nregra IN NUMBER, ngrupro IN NUMBER, ctpatdt IN VARCHAR2 ,dDtVigencia IN Date ) IS
        SELECT NVL(acresc_descontos.vl_perc_acrescimo, 0) vl_perc_acrescimo
             , NVL(acresc_descontos.vl_perc_desconto, 0) vl_perc_desconto
             , NVL(acresc_descontos.sn_vl_filme, 'S') sn_vl_filme
             , NVL(acresc_descontos.sn_vl_honorario, 'S') sn_vl_honorario
             , NVL(acresc_descontos.sn_vl_operacional, 'S') sn_vl_operacional
             , DECODE(
                 ctpatdt
               , 'E', acresc_descontos.tp_atend_externo
               , 'U', acresc_descontos.tp_atend_urgeme
               , 'I', acresc_descontos.tp_atend_internacao
               , 'A', acresc_descontos.tp_atend_ambulatorial
               , 'H', acresc_descontos.tp_atend_homecare) sn_acres_desc
             , NVL(acresc_descontos.sn_destacar_na_fatura, 'S') sn_destacar_na_fatura
             , 0 vl_perc_acrescimo_exame
        FROM   dbamv.acresc_descontos
         WHERE acresc_descontos.cd_regra = nregra AND acresc_descontos.cd_gru_pro = ngrupro
		 AND (  ( dDtVigencia BETWEEN dt_inicio_vigencia AND Nvl(dt_final_vigencia,SYSDATE) AND dbamv.pkg_mv2000.le_cliente = 420 )
                OR dbamv.pkg_mv2000.le_cliente <> 420 ); -- PDA 557275 - só valida a data de vigencia se for cliente Mãe de Deus
      CURSOR c_acresdesc_proc(nregra IN NUMBER, cprofat IN VARCHAR2, ctpatdt IN VARCHAR2 ,dDtVigencia IN Date  ) IS
        SELECT NVL(acresc_descontos_proc.vl_perc_acrescimo, 0) vl_perc_acrescimo
             , NVL(acresc_descontos_proc.vl_perc_desconto, 0) vl_perc_desconto
             , NVL(acresc_descontos_proc.sn_vl_filme, 'S') sn_vl_filme
             , NVL(acresc_descontos_proc.sn_vl_honorario, 'S') sn_vl_honorario
             , NVL(acresc_descontos_proc.sn_vl_operacional, 'S') sn_vl_operacional
             , DECODE(
                 ctpatdt
               , 'E', acresc_descontos_proc.tp_atend_externo
               , 'U', acresc_descontos_proc.tp_atend_urgeme
               , 'I', acresc_descontos_proc.tp_atend_internacao
               , 'A', acresc_descontos_proc.tp_atend_ambulatorial
               , 'H', acresc_descontos_proc.tp_atend_homecare) sn_acres_desc
             , NVL(acresc_descontos_proc.sn_destacar_na_fatura, 'S') sn_destacar_na_fatura
        ,      NVL(acresc_descontos_proc.vl_perc_acrescimo_exame, 0) vl_perc_acrescimo_exame
        FROM   dbamv.acresc_descontos_proc
         WHERE acresc_descontos_proc.cd_regra = nregra
               AND acresc_descontos_proc.cd_pro_fat = cprofat
			   AND (  ( dDtVigencia BETWEEN dt_inicio_vigencia AND Nvl(dt_final_vigencia,SYSDATE) AND dbamv.pkg_mv2000.le_cliente = 420 )
                OR dbamv.pkg_mv2000.le_cliente <> 420 ); -- PDA 557275 - só valida a data de vigencia se for cliente Mãe de Deus
      CURSOR c_tabconvenio(
        nconvenio    IN  NUMBER
      , nplano       IN  NUMBER
      , cprofat      IN  VARCHAR2
      , dreferencia  IN  DATE
      , pnprest      IN  NUMBER
      , pnset        IN  NUMBER
      , pcdregra     in  number
      ) IS
        SELECT   NVL(tab_convenio.vl_tab_convenio, 0) vl_tab_convenio
               , tab_convenio.sn_usar_indice
               , tab_convenio.sn_horario_especial
               , tab_convenio.sn_filme
               , tab_convenio.cd_regra
            FROM dbamv.tab_convenio
           WHERE tab_convenio.sn_ativo = 'S' AND tab_convenio.cd_convenio = nconvenio
                 AND(tab_convenio.cd_con_pla = nplano OR tab_convenio.cd_con_pla IS NULL)
                 AND tab_convenio.cd_pro_fat = cprofat
                 AND tab_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                 AND(tab_convenio.cd_prestador = pnprest OR tab_convenio.cd_prestador IS NULL)
                 AND(tab_convenio.cd_setor = pnset OR tab_convenio.cd_setor IS NULL)
                 AND (tab_convenio.cd_regra = pcdregra or tab_convenio.cd_regra is null)
                 AND tab_convenio.dt_vigencia =
                      (SELECT MAX(tab_conv.dt_vigencia)
                         FROM dbamv.tab_convenio tab_conv
                        WHERE tab_conv.sn_ativo = 'S' AND tab_conv.cd_convenio = nconvenio
                              AND(tab_conv.cd_con_pla = nplano OR tab_conv.cd_con_pla IS NULL)
                              AND tab_conv.cd_pro_fat = cprofat
                              AND tab_conv.dt_vigencia <= dreferencia
                              AND tab_conv.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                              AND(tab_conv.cd_prestador = pnprest OR tab_conv.cd_prestador IS NULL)
                              AND (tab_conv.cd_regra = pcdregra or tab_conv.cd_regra is null)
                              AND(tab_conv.cd_setor = pnset OR tab_conv.cd_setor IS NULL))
        ORDER BY tab_convenio.cd_prestador
               , tab_convenio.cd_setor
               , tab_convenio.cd_regra DESC;
      CURSOR c_tabconvenio_429(
        nconvenio    IN  NUMBER
      , nplano       IN  NUMBER
      , cprofat      IN  VARCHAR2
      , dreferencia  IN  DATE
      , pnprest      IN  NUMBER
      , pnset        IN  NUMBER
      , pcdregra     IN  NUMBER) IS
        SELECT   NVL(tab_convenio.vl_tab_convenio, 0) vl_tab_convenio
               , tab_convenio.sn_usar_indice
               , tab_convenio.sn_horario_especial
               , tab_convenio.sn_filme
               , tab_convenio.cd_regra
            FROM dbamv.tab_convenio
           WHERE tab_convenio.sn_ativo = 'S' AND tab_convenio.cd_convenio = nconvenio
                 AND(tab_convenio.cd_con_pla = nplano OR tab_convenio.cd_con_pla IS NULL)
                 AND tab_convenio.cd_pro_fat = cprofat
                 AND tab_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                 AND(tab_convenio.cd_prestador = pnprest OR tab_convenio.cd_prestador IS NULL)
                 AND(tab_convenio.cd_setor = pnset OR tab_convenio.cd_setor IS NULL)
                 AND (tab_convenio.cd_regra = pcdregra or tab_convenio.cd_regra is null)
                 AND tab_convenio.dt_vigencia =
                      (SELECT MAX(tab_conv.dt_vigencia)
                         FROM dbamv.tab_convenio tab_conv
                        WHERE tab_conv.sn_ativo = 'S' AND tab_conv.cd_convenio = nconvenio
                              AND(tab_conv.cd_con_pla = nplano OR tab_conv.cd_con_pla IS NULL)
                              AND tab_conv.cd_pro_fat = cprofat
                              AND tab_conv.dt_vigencia <= dreferencia
                              AND tab_conv.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                              AND(tab_conv.cd_prestador = pnprest OR tab_conv.cd_prestador IS NULL)
                              AND(tab_conv.cd_setor = pnset OR tab_conv.cd_setor IS NULL)
                              AND (tab_conv.cd_regra = pcdregra or tab_conv.cd_regra is null))
        ORDER BY tab_convenio.cd_prestador
               , tab_convenio.cd_setor
               , tab_convenio.cd_regra DESC;
      CURSOR cregraatendimentoprofat(ncdregraatendimentoprofat IN NUMBER) IS
        SELECT regra_atendimento_pro_fat.cd_regra_atendimento_pro_fat
             , regra_atendimento_pro_fat.dt_inicial
             , regra_atendimento_pro_fat.dt_final
             , regra_atendimento_pro_fat.vl_perc
             , regra_atendimento_pro_fat.tp_convenio
             , NVL(regra_atendimento_pro_fat.vl_co_participacao, 0) vl_co_participacao
          FROM dbamv.regra_atendimento_pro_fat
         WHERE regra_atendimento_pro_fat.cd_regra_atendimento_pro_fat = ncdregraatendimentoprofat;
      CURSOR cregfat(pncdregfat IN NUMBER) IS
        SELECT reg_fat.cd_atendimento, reg_fat.cd_convenio
          FROM dbamv.reg_fat
         WHERE reg_fat.cd_reg_fat = pncdregfat
               AND reg_fat.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
  CURSOR c_filme(nregra IN NUMBER, dreferencia IN DATE, vprofat IN VARCHAR2) IS
    SELECT filme_tab.qt_m2_filme
      FROM dbamv.filme_tab,
           dbamv.itregra,
           dbamv.pro_fat
     WHERE filme_tab.cd_tab_fat = itregra.cd_tab_fat
       AND itregra.cd_gru_pro = pro_fat.cd_gru_pro
       AND pro_fat.cd_pro_fat = filme_tab.cd_pro_fat
       AND itregra.cd_regra = nregra
       AND filme_tab.cd_pro_fat = vprofat
       AND filme_tab.dt_vigencia =
                (SELECT MAX(filme.dt_vigencia)
                   FROM dbamv.filme_tab filme,
                        dbamv.itregra itreg,
                        dbamv.pro_fat pro
                  WHERE filme.cd_tab_fat = itreg.cd_tab_fat
                    AND itreg.cd_gru_pro = pro.cd_gru_pro
                    AND pro.cd_pro_fat = filme.cd_pro_fat
                    AND itreg.cd_regra = nregra
                    AND filme.cd_pro_fat = vprofat
                    AND filme.dt_vigencia <= dreferencia);
    nFilme  NUMBER := 0;
      ncdatendimentoregfat         NUMBER;
      ncdconvenioregfat            NUMBER;
      bexcessao                    BOOLEAN;
      v_tabconvenio                c_tabconvenio%ROWTYPE;
      v_grupro                     c_grupro%ROWTYPE;
      v_acresdesc                  c_acresdesc%ROWTYPE;
      nauxacres                    NUMBER;
      nauxdesc                     NUMBER;
      npercacres                   NUMBER                                               := 0;
      npercdesc                    NUMBER                                               := 0;
      nauxvlato                    NUMBER;
      nauxtotal                    NUMBER;
      nauxvlunitario               NUMBER;
      nauxvl_honorario_unitario    NUMBER;
      nauxvl_operacional_unitario  NUMBER;
      bnaodestacar                 BOOLEAN                                              := FALSE;
      btemparticular               BOOLEAN                                              := FALSE;
      cerrmsg                      VARCHAR2(2000);
      ncdlfa                       NUMBER;
      nvaloperacional              NUMBER;
      nvalhonorario                NUMBER;
      nvalfilme                    NUMBER;
      nvalporte                    NUMBER;
      nvalchtotal                  NUMBER;
      nvalchhonorario              NUMBER;
      nvalacrescimo                NUMBER;
      nvaldesconto                 NUMBER;
      nvalunitproced               NUMBER;
      nvaltotproced                NUMBER;
      nvalunitequipe               NUMBER;
      nvalfilmequipe               NUMBER;
      nvalacresequipe              NUMBER;
      nvaldescequipe               NUMBER;
      nvalhonorequipe              NUMBER;
      nvaloperaequipe              NUMBER;
      nvaltotequipe                NUMBER;
      nvalqtchequipe               NUMBER;
      nvaltotconta                 NUMBER                                               := 0;
      nvalacresconta               NUMBER                                               := 0;
      nvaldescconta                NUMBER                                               := 0;
      nvalqtchconta                NUMBER                                               := 0;
      nvalpercrelac                NUMBER;
      nvalpercregra                NUMBER;
      bequipe                      BOOLEAN;
      ddtreferencia                DATE;
      dhrreferencia                DATE;
      hhrreferencia                DATE;
      csnfaturaalta                VARCHAR2(1);
      nvalortotal                  NUMBER;
      ncdregra                     NUMBER;
      ncdindice                    NUMBER;
      ncdregatend                  NUMBER;
      ncdregatendprofat            NUMBER;
      ncdconvenio                  NUMBER;
      ncdplano                     NUMBER;
      npercrelacionado             NUMBER;
      cprofatpai                   VARCHAR2(8);
      cprocexced                   VARCHAR2(8);
      csn_valores_relacionados     VARCHAR2(1);
      cprofatpai_outros            VARCHAR2(8);
      ctemregra                    VARCHAR2(1);
      vsn_calculo_data_atual       VARCHAR2(1);
      nvl_bruto                    NUMBER(12, 2)                                        := 0;
      nvldescontoconta             NUMBER(12, 2)                                        := 0;
      vchospital                   chospital%ROWTYPE;
      ctp_controle_lote            dbamv.config_ffcv.tp_controle_lote%TYPE;
      ncd_convenio_a               dbamv.convenio.cd_convenio%TYPE;
      vsn_incidencia_exame         dbamv.val_pro_relacionado.sn_incidencia_exame%TYPE;
      vtipomov                     VARCHAR2(30);
      CURSOR ctipo IS
        SELECT tp_mvto
          FROM dbamv.itreg_fat_espelho
         WHERE cd_reg_fat = ncdregfat AND cd_lancamento = pncdlancamento;
      vlancamentos                 VARCHAR2(5000);
      nregra                       NUMBER;
      npctlanc                     NUMBER;
      nretorno_desconto            NUMBER(1);
      rregraatendimentoprofat      cregraatendimentoprofat%ROWTYPE;
      natendimento                 NUMBER(10);
      CURSOR c_totalconta(ncdregfat IN NUMBER) IS
        SELECT SUM(NVL(NVL(itlan_med_espelho.vl_liquido, itreg_fat_espelho.vl_total_conta), 0))
          FROM dbamv.itlan_med_espelho
             , dbamv.itreg_fat_espelho
         WHERE itreg_fat_espelho.cd_reg_fat = itlan_med_espelho.cd_reg_fat(+) AND itreg_fat_espelho.cd_lancamento = itlan_med_espelho.cd_lancamento(+)
               AND itreg_fat_espelho.cd_reg_fat = ncdregfat AND NVL(itreg_fat_espelho.sn_pertence_pacote, 'N') = 'N'
               AND NVL(NVL(itlan_med_espelho.tp_pagamento, itreg_fat_espelho.tp_pagamento), 'P') <> 'C';
      ntotalcontaaux               NUMBER                                               := 0;
  cursor cConfConvTrunca is
    select valor
      from dbamv.configuracao
     where cd_sistema = 'FFCV'
       and cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
       and chave = 'CD_CONV_NAO_ARREDONDA_VALOR';
  vConfConvTrunca       dbamv.configuracao.valor%type;
  vTruncaValor          varchar2(01) := 'N';
  bExec                 boolean;
  vtabconvenio          c_tabconvenio%rowtype;
  BEGIN
      OPEN c_config_ffcv;
      FETCH c_config_ffcv INTO csn_valores_relacionados, vsn_calculo_data_atual, ctp_controle_lote;
      CLOSE c_config_ffcv;
      OPEN chospital;
      FETCH chospital INTO vchospital;
      CLOSE chospital;
      OPEN cregfat(ncdregfat);
      FETCH cregfat INTO ncdatendimentoregfat, ncdconvenioregfat;
      CLOSE cregfat;
      OPEN c_convenio(ncdconvenioregfat);
      FETCH c_convenio INTO csnfaturaalta;
      CLOSE c_convenio;
      OPEN c_regraatend(ncdatendimentoregfat);
      FETCH c_regraatend INTO ncdregatend;
      CLOSE c_regraatend;
      OPEN c_regraatendprofat(ncdatendimentoregfat);
      FETCH c_regraatendprofat INTO ncdregatendprofat;
      CLOSE c_regraatendprofat;
      FOR v_itregfat IN c_itregfat LOOP
        natendimento := v_itregfat.cd_atendimento;
        IF NVL(v_itregfat.sn_calcula_valor, 'S') = 'S' THEN
          cerrmsg := '';
          nvalunitproced := 0;
          nvaltotproced := 0;
          nvaloperacional := 0;
          nvalhonorario := 0;
          nvalfilme := 0;
          nvalporte := 0;
          nvalchtotal := 0;
          nvalchhonorario := 0;
          nvalacrescimo := 0;
          nvaldesconto := 0;
          npercrelacionado := NULL;
          cprofatpai := NULL;
          ncdregra := NULL;
          ncdindice := NULL;
          cprocexced := NULL;
          ncdconvenio := NULL;
          ncdplano := NULL;
          nvalpercrelac := NULL;
          cprofatpai_outros := NULL;
          npercacres := 0;
          npercdesc := 0;
          ncd_convenio_a := v_itregfat.cd_convenio;
          IF NVL(csn_valores_relacionados, 'N') = 'S' THEN
            OPEN c_itreg_fat_pai(v_itregfat.cd_reg_fat_rel, v_itregfat.cd_lancamento_rel);
            FETCH c_itreg_fat_pai INTO cprofatpai_outros;
            CLOSE c_itreg_fat_pai;
          END IF;
          IF (
              v_itregfat.cd_franquia IS NOT NULL OR v_itregfat.vl_percentual_paciente IS NOT NULL
              OR v_itregfat.cd_regra_acoplamento IS NOT NULL OR ncdregatend IS NOT NULL
              OR ncdregatendprofat IS NOT NULL)
             AND v_itregfat.cd_reg_fat_pai <> ncdregfat AND v_itregfat.cd_reg_fat_pai IS NOT NULL THEN
            --
            OPEN c_regrafranquia(v_itregfat.cd_reg_fat_pai);
            FETCH c_regrafranquia INTO ncdregra, ncdindice, ncdconvenio, ncdplano;
            CLOSE c_regrafranquia;
          ELSE
            ncdregra := v_itregfat.cd_regra;
            ncdindice := v_itregfat.cd_indice;
          END IF;
          --
          vConfConvTrunca := null;
          open  cConfConvTrunca;
          fetch cConfConvTrunca into vConfConvTrunca;
          close cConfConvTrunca;
          if instr( nvl(vConfConvTrunca,'X'), 'TODOS' ) > 0 then
            vTruncaValor := 'S';
          elsif instr( nvl(vConfConvTrunca,'X'), lpad(nvl(ncdconvenio, v_itregfat.cd_convenio),4,'0') ) > 0 then
            vTruncaValor := 'S';
          else
            vTruncaValor := 'N';
          end if;
          IF NVL(vsn_calculo_data_atual, 'N') <> 'S' THEN
            IF v_itregfat.tp_gru_pro NOT IN('SP', 'SD', 'SH') THEN
              IF NVL(csnfaturaalta, 'N') = 'S' THEN
                ddtreferencia := NVL(NVL(v_itregfat.dt_alta, v_itregfat.dt_final), v_itregfat.dt_lancamento);
                dhrreferencia := NVL(v_itregfat.hr_alta, v_itregfat.hr_lancamento);
                if dbamv.pkg_mv2000.le_cliente = 420 then
                   dDtReferencia := Nvl( V_ItRegFat.dt_final , V_ItRegFat.dt_lancamento );
                   dHrReferencia := Nvl( V_ItRegFat.dt_final, V_ItRegFat.hr_lancamento );
                 end if;
              ELSE
                ddtreferencia := v_itregfat.dt_lancamento;
                dhrreferencia := v_itregfat.hr_lancamento;
              END IF;
            ELSE
              ddtreferencia := v_itregfat.dt_lancamento;
              dhrreferencia := v_itregfat.hr_lancamento;
            END IF;
          ELSE
            ddtreferencia := SYSDATE;
            dhrreferencia := SYSDATE;
          END IF;
          ddtreferencia := TRUNC(ddtreferencia);
          IF v_itregfat.tp_gru_pro IN('SP', 'SD') AND v_itregfat.cd_prestador IS NULL THEN
            bequipe := TRUE;
          ELSE
            bequipe := FALSE;
          END IF;
          hhrreferencia := dhrreferencia;
          IF v_itregfat.tp_gru_pro IN('SP', 'SD', 'SH') AND NVL(v_itregfat.sn_horario_especial, 'S') = 'N' THEN
            dhrreferencia := NULL;
          END IF;
          IF bincremental AND v_itregfat.vl_total_conta IS NOT NULL THEN
            IF NVL(v_itregfat.sn_pertence_pacote, 'N') = 'N' AND NVL(v_itregfat.tp_pagamento, 'P') <> 'C' THEN
              if vTruncaValor = 'S' then
                nvaltotconta   := TRUNC(ROUND(nvaltotconta, 4),2)   + TRUNC(ROUND(v_itregfat.vl_total_conta,4),2);
                nvalacresconta := TRUNC(ROUND(nvalacresconta, 4),2) + TRUNC(ROUND(NVL(v_itregfat.vl_acrescimo, 0),4),2);
                nvaldescconta  := TRUNC(ROUND(nvaldescconta, 4),2)  + TRUNC(ROUND(NVL(v_itregfat.vl_desconto, 0),4),2);
                nvalqtchconta  := TRUNC(ROUND(nvalqtchconta, 4),2)  + TRUNC(ROUND(NVL(v_itregfat.qt_ch_unitario, 0),4),2);
              else
                nvaltotconta :=   ROUND(nvaltotconta, 2) + ROUND(v_itregfat.vl_total_conta, 2);
                nvalacresconta := ROUND(nvalacresconta, 2) + ROUND(NVL(v_itregfat.vl_acrescimo, 0), 2);
                nvaldescconta :=  ROUND(nvaldescconta, 2) + ROUND(NVL(v_itregfat.vl_desconto, 0), 2);
                nvalqtchconta :=  ROUND(nvalqtchconta, 2) + ROUND(NVL(v_itregfat.qt_ch_unitario, 0), 2);
              end if;
            END IF;
          ELSE
            IF NOT bequipe THEN
              OPEN c_tabconvenio(NVL(ncdconvenio, v_itregfat.cd_convenio)
                                   , NVL(ncdplano, v_itregfat.cd_con_pla), NVL(cprofatpai, v_itregfat.cd_pro_fat)
                                   , ddtreferencia, v_itregfat.cd_prestador, v_itregfat.cd_setor, nvl(nregra, ncdregra));
              FETCH c_tabconvenio INTO vtabconvenio;
              IF c_tabconvenio%FOUND THEN
                  bExec := TRUE;
              ELSE
                  bExec:=FALSE;
              END IF;
              CLOSE c_tabconvenio;
              IF ((v_itregfat.tp_gru_pro = 'OP' OR dbamv.fnc_ffcv_sn_opme(v_itregfat.cd_pro_fat) ='S')
                 AND ((Nvl(dbamv.pkg_mv2000.le_configuracao('FFCV','SN_EXCECAO_VALOR_OPME'),'N') = 'N')
                      OR (Nvl(dbamv.pkg_mv2000.le_configuracao('FFCV','SN_EXCECAO_VALOR_OPME'),'N') = 'S' AND not bexec ) ) ) THEN
                OPEN c_itcobpre(v_itregfat.cd_lancamento);
                FETCH c_itcobpre INTO nvalunitproced;
                CLOSE c_itcobpre;
              END IF;
             if dbamv.pkg_mv2000.le_cliente <> '755' then
              OPEN c_valrelacseq(NVL(ncdregra, v_itregfat.cd_regra), ddtreferencia, hhrreferencia
                  , v_itregfat.cd_pro_fat, cprofatpai_outros);
              FETCH c_valrelacseq INTO npercrelacionado, cprofatpai, nvalunitproced;
              CLOSE c_valrelacseq;
             else
              OPEN c_val_exced(v_itregfat.cd_pro_fat);
              FETCH c_val_exced INTO npercrelacionado, nvalunitproced, nqtinicial;
              CLOSE c_val_exced;
             end if;
              IF cprofatpai IS NULL THEN
                ctemregra := NULL;
                OPEN c_valrelacionado_ant(NVL(ncdregra, v_itregfat.cd_regra), v_itregfat.cd_pro_fat);
                FETCH c_valrelacionado_ant INTO ctemregra;
                IF c_valrelacionado_ant%FOUND THEN
                  OPEN c_valrelacionado(NVL(ncdregra, v_itregfat.cd_regra), ddtreferencia
                      , hhrreferencia, v_itregfat.cd_pro_fat, cprofatpai_outros);
                  FETCH c_valrelacionado INTO npercrelacionado, cprofatpai, vsn_incidencia_exame;
                  CLOSE c_valrelacionado;
                END IF;
                CLOSE c_valrelacionado_ant;
              END IF;
              IF cprofatpai IS NOT NULL AND cprofatpai_outros IS NULL THEN
                cprocexced := v_itregfat.cd_pro_fat;
                OPEN c_percrelac(cprofatpai);
                FETCH c_percrelac INTO nvalpercrelac;
                IF c_percrelac%NOTFOUND THEN
                  nvalpercrelac := NULL;
                END IF;
                CLOSE c_percrelac;
              END IF;
              npctlanc := NULL;
              IF dbamv.pack_ffcv_espelho.fnc_retorna_perc_sd(v_itregfat.cd_pro_fat, NVL(ncdregra, v_itregfat.cd_regra)
                 , v_itregfat.dt_lancamento) IS NOT NULL THEN
                vlancamentos := vlancamentos || TO_CHAR(v_itregfat.cd_lancamento) || ',';
                npctlanc := 100;
              END IF;
              nvalunitproced :=
                dbamv.pack_ffcv_espelho.val_proc_ffcv(NVL(cprofatpai, v_itregfat.cd_pro_fat), ddtreferencia
                , dhrreferencia, NVL(ncdconvenio, v_itregfat.cd_convenio)
                , NVL(ncdplano, v_itregfat.cd_con_pla), v_itregfat.tp_atendimento
                , v_itregfat.cd_tip_acom, NULL
                , NVL(npctlanc, v_itregfat.vl_percentual_multipla)
                , cerrmsg, nvaloperacional, nvalhonorario, nvalfilme, nvalporte, nvalchtotal
                , nvalchhonorario, nvalacrescimo, nvaldesconto, nvalunitproced
                , v_itregfat.qt_lancamento, nvalortotal, NVL(ncdregra, v_itregfat.cd_regra)
                , v_itregfat.vl_percentual_paciente, v_itregfat.cd_franquia, ncdindice
                , v_itregfat.cd_regra_acoplamento, cprocexced, v_itregfat.tp_convenio
                , v_itregfat.cd_convenio, v_itregfat.cd_con_pla, NULL, v_itregfat.cd_prestador
                , v_itregfat.cd_setor, ncdregfat, v_itregfat.cd_lancamento);
              nauxvlunitario := nvalunitproced;
              nauxvl_honorario_unitario := nvalhonorario;
              nauxvl_operacional_unitario := nvaloperacional;
              IF v_itregfat.sn_diferenca = 'S' THEN
                DECLARE
                  CURSOR cconvenio(nempresa IN NUMBER, natend IN NUMBER) IS
                    SELECT atendime.cd_convenio
                         , atendime.cd_con_pla
                         , acomod_pro_fat.cd_pro_fat
                         , atendime.tp_atendimento
                         , acomod_pro_fat.cd_tip_acom
                         , convenio.tp_convenio
                         , empresa_con_pla.cd_regra
                      FROM dbamv.atendime
                         , dbamv.acomod_pro_fat
                         , dbamv.convenio
                         , dbamv.empresa_con_pla
                     WHERE atendime.cd_convenio = acomod_pro_fat.cd_convenio
                           AND atendime.cd_con_pla = acomod_pro_fat.cd_con_pla
                           AND atendime.cd_tip_acom_cobertura = acomod_pro_fat.cd_tip_acom
                           AND convenio.cd_convenio = atendime.cd_convenio
                           AND atendime.cd_multi_empresa = empresa_con_pla.cd_multi_empresa
                           AND atendime.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                           AND atendime.cd_con_pla = empresa_con_pla.cd_con_pla
                           AND atendime.cd_convenio = empresa_con_pla.cd_convenio
                           AND atendime.cd_multi_empresa = nempresa
                           AND atendime.cd_atendimento = natend;
                  CURSOR cconvenioAcomp(nempresa IN NUMBER, natend IN NUMBER) IS
                    SELECT atendime.cd_convenio
                         , atendime.cd_con_pla
                         , acomod_pro_fat.cd_pro_fat
                         , atendime.tp_atendimento
                         , acomod_pro_fat.cd_tip_acom
                         , convenio.tp_convenio
                         , empresa_con_pla.cd_regra
                      FROM dbamv.atendime
                         , dbamv.acomod_pro_fat
                         , dbamv.convenio
                         , dbamv.empresa_con_pla
                     WHERE atendime.cd_convenio = acomod_pro_fat.cd_convenio
                           AND atendime.cd_con_pla = acomod_pro_fat.cd_con_pla
                           AND atendime.cd_tip_acom_cobertura = acomod_pro_fat.cd_tip_acom
                           AND convenio.cd_convenio = atendime.cd_convenio
                           AND atendime.cd_multi_empresa = empresa_con_pla.cd_multi_empresa
                           AND atendime.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                           AND atendime.cd_con_pla = empresa_con_pla.cd_con_pla
                           AND atendime.cd_convenio = empresa_con_pla.cd_convenio
                           AND atendime.cd_multi_empresa = nempresa
                           AND atendime.cd_atendimento = natend
                           and acomod_pro_fat.sn_acompanhante = 'S';
                  CURSOR cProFatAcomp(nempresa IN NUMBER, natend IN NUMBER, nregfat IN NUMBER, nprofat varchar2) IS
                    SELECT 'S'
                      FROM dbamv.reg_fat
                         , dbamv.acomod_pro_fat
                         , dbamv.convenio
                         , dbamv.empresa_con_pla
                     WHERE reg_fat.cd_convenio = acomod_pro_fat.cd_convenio
                       AND reg_fat.cd_con_pla = acomod_pro_fat.cd_con_pla
                       AND convenio.cd_convenio = reg_fat.cd_convenio
                       AND reg_fat.cd_multi_empresa = empresa_con_pla.cd_multi_empresa
                       AND reg_fat.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                       AND reg_fat.cd_con_pla = empresa_con_pla.cd_con_pla
                       AND reg_fat.cd_convenio = empresa_con_pla.cd_convenio
                       AND reg_fat.cd_multi_empresa = nempresa
                       AND reg_fat.cd_atendimento = natend
                       AND reg_fat.cd_reg_fat = nregfat
                       and acomod_pro_fat.cd_pro_fat = nprofat
                       and acomod_pro_fat.sn_acompanhante = 'S';
                  nProFatAcomp     VARCHAR2(1) := 'N';
                  vconvenio        cconvenio%ROWTYPE;
                  nvloper_dif      NUMBER;
                  nvlhonor_dif     NUMBER;
                  nvlfilme_dif     NUMBER;
                  nvlporte_dif     NUMBER;
                  nvlchtotal_dif   NUMBER;
                  nvlchhonor_dif   NUMBER;
                  nvltaxa_dif      NUMBER;
                  nvldesconto_dif  NUMBER;
                  nvalunit_dif     NUMBER;
                  nvaltot_dif      NUMBER;
                BEGIN
                  open cProFatAcomp(dbamv.pkg_mv2000.le_empresa, v_itregfat.cd_atendimento,
                                     v_itregfat.cd_reg_fat, v_itregfat.cd_pro_fat );
                  fetch cProFatAcomp into nProFatAcomp;
                  close cProFatAcomp;
                  if nProFatAcomp = 'S' then
                    OPEN cconvenioAcomp(dbamv.pkg_mv2000.le_empresa, v_itregfat.cd_atendimento);
                    FETCH cconvenioAcomp INTO vconvenio;
                    CLOSE cconvenioAcomp;
                  else
                  OPEN cconvenio(dbamv.pkg_mv2000.le_empresa, v_itregfat.cd_atendimento);
                  FETCH cconvenio INTO vconvenio;
                  CLOSE cconvenio;
                  end if;
                  nvalunit_dif :=
                    dbamv.pack_ffcv_espelho.val_proc_ffcv(NVL(cprofatpai, vconvenio.cd_pro_fat), ddtreferencia
                    , dhrreferencia, NVL(ncdconvenio, vconvenio.cd_convenio)
                    , NVL(ncdplano, vconvenio.cd_con_pla), vconvenio.tp_atendimento
                    , vconvenio.cd_tip_acom, NULL, v_itregfat.vl_percentual_multipla, cerrmsg
                    , nvloper_dif, nvlhonor_dif, nvlfilme_dif, nvlporte_dif, nvlchtotal_dif
                    , nvlchhonor_dif, nvltaxa_dif, nvldesconto_dif, nvalunit_dif
                    , v_itregfat.qt_lancamento, nvaltot_dif
                    , vconvenio.cd_regra, v_itregfat.vl_percentual_paciente
                    , v_itregfat.cd_franquia, ncdindice, v_itregfat.cd_regra_acoplamento
                    , cprocexced, vconvenio.tp_convenio, vconvenio.cd_convenio
                    , vconvenio.cd_con_pla, NULL, v_itregfat.cd_prestador, v_itregfat.cd_setor
                    , ncdregfat, v_itregfat.cd_lancamento);
                 if nvalunit_dif > 0.01 then
                  nvalunitproced := ABS(nvalunit_dif - nvalunitproced);
                  nvaloperacional := ABS(nvloper_dif - nvaloperacional);
                  nvalhonorario := ABS(nvlhonor_dif - nvalhonorario);
                  nvalfilme := ABS(nvlfilme_dif - nvalfilme);
                  nvalporte := ABS(nvlporte_dif - nvalporte);
                  nvalchtotal := ABS(nvlchtotal_dif - nvalchtotal);
                  nvalchhonorario := ABS(nvlchhonor_dif - nvalchhonorario);
                  nvalacrescimo := ABS(nvltaxa_dif - nvalacrescimo);
                  nvaldesconto := ABS(nvldesconto_dif - nvaldesconto);
                  nvalortotal := ABS(nvaltot_dif - nvalortotal);
                end if;
                  IF (
                      v_itregfat.cd_franquia IS NOT NULL AND v_itregfat.cd_reg_fat_pai <> ncdregfat
                      AND v_itregfat.cd_reg_fat_pai IS NOT NULL) THEN
                    nvaldesconto := NULL;
                  END IF;
                END;
              END IF;
             if dbamv.pkg_mv2000.le_cliente <> '755' or (dbamv.pkg_mv2000.le_cliente = '755'
                and nvl(nqtinicial,0) = 0) then
              IF cprofatpai IS NOT NULL AND npercrelacionado IS NOT NULL THEN
                IF v_itregfat.cd_pro_fat = '05000999'
                   AND NVL(ncdconvenio, v_itregfat.cd_convenio) = 21
                   AND vchospital.cd_hospital = 719 THEN
                  OPEN ctaxa(v_itregfat.cd_reg_fat_rel, v_itregfat.cd_lancamento_rel);
                  FETCH ctaxa INTO nvalunitproced;
                  CLOSE ctaxa;
                  nvalhonorario := 0;
                  nvalchtotal := 0;
                  nvalchhonorario := 0;
                  nvalporte := 0;
                  nvalortotal := nvalunitproced;
                END IF;
                nvalunitproced :=((nvalunitproced * npercrelacionado) / 100);
                nvaloperacional :=((nvaloperacional * npercrelacionado) / 100);
                nvalhonorario :=((nvalhonorario * npercrelacionado) / 100);
                nvalfilme :=((nvalfilme * npercrelacionado) / 100);
                nvalporte :=((nvalporte * npercrelacionado) / 100);
                nvalchtotal :=((nvalchtotal * npercrelacionado) / 100);
                nvalchhonorario :=((nvalchhonorario * npercrelacionado) / 100);
                nvalacrescimo :=((nvalacrescimo * npercrelacionado) / 100);
                nvaldesconto :=((nvaldesconto * npercrelacionado) / 100);
                nvalortotal :=((nvalortotal * npercrelacionado) / 100);
                open c_filme(NVL(ncdregra, v_itregfat.cd_regra),ddtreferencia,v_itregfat.cd_pro_fat);
                fetch c_filme into nfilme;
                close c_filme;
                if nvl(nfilme,0) = 0 and nvl(nvalfilme,0) > 0 then
                   nvalfilme := 0;
                end if;
              END IF;
             end if;
             if dbamv.pkg_mv2000.le_cliente = '755' then
              if v_itregfat.qt_lancamento > nvl(nqtinicial,0) and nvl(nqtinicial,0) > 0 then
                 if npercrelacionado > 0 then
                 nvalortotal := ((nvalunitproced + nvalfilme + nvalacrescimo - nvaldesconto) * nqtinicial) +
                                ((nvalunitproced + nvalfilme + nvalacrescimo - nvaldesconto) *
                                 (v_itregfat.qt_lancamento - nvl(nqtinicial,0)) * npercrelacionado / 100 );
                 end if;
                 if nvalunitproced > 0 then
                 nvalortotal := ((nvalunitproced + nvalfilme + nvalacrescimo - nvaldesconto) * nqtinicial) +
                                ((nvalunitproced) * (v_itregfat.qt_lancamento - nvl(nqtinicial,0)) );
                 end if;
              end if;
             end if;
              IF nvalpercrelac IS NOT NULL THEN
                nvalunitproced :=((nvalunitproced * nvalpercrelac) / 100);
                nvaloperacional :=((nvaloperacional * nvalpercrelac) / 100);
                nvalhonorario :=((nvalhonorario * nvalpercrelac) / 100);
                nvalfilme :=((nvalfilme * nvalpercrelac) / 100);
                nvalporte :=((nvalporte * nvalpercrelac) / 100);
                nvalchtotal :=((nvalchtotal * nvalpercrelac) / 100);
                nvalchhonorario :=((nvalchhonorario * nvalpercrelac) / 100);
                nvalacrescimo :=((nvalacrescimo * nvalpercrelac) / 100);
                nvaldesconto :=((nvaldesconto * nvalpercrelac) / 100);
                nvalortotal :=((nvalortotal * nvalpercrelac) / 100);
              END IF;
              IF cerrmsg IS NOT NULL THEN
                OPEN c_existelfa(ncdregfat, v_itregfat.cd_pro_fat);
                FETCH c_existelfa INTO ncdlfa;
                CLOSE c_existelfa;
                IF ncdlfa IS NULL AND v_itregfat.tp_convenio IN('C', 'P') THEN
                  INSERT INTO dbamv.log_falha_importacao
                              (
                               cd_reg_fat, cd_pro_fat, dt_importacao, tp_importacao, tp_erro
                             , nm_usuario_gerou, cd_log_falha_importacao, ds_msg_erro
                             , cd_atendimento, cd_item_falha)
                  VALUES      (
                               ncdregfat, v_itregfat.cd_pro_fat, SYSDATE, 'Calculo', '03'
                             , USER, dbamv.seq_log_falha_importacao.NEXTVAL, cerrmsg
                             , v_itregfat.cd_atendimento, v_itregfat.cd_lancamento);
                END IF;
                cmsgerro := cerrmsg;
              END IF;
              if vTruncaValor = 'S' then
                nvalunitproced  := ROUND(nvalunitproced, 4);
                nvaloperacional := TRUNC(ROUND(nvaloperacional,4), 2);
                nvalhonorario   := TRUNC(ROUND(nvalhonorario,4), 2);
                nvalporte       := TRUNC(ROUND(nvalporte,4), 4);
                nvalacrescimo   := TRUNC(ROUND(nvalacrescimo,4), 4);
                nvaldesconto    := TRUNC(ROUND(nvaldesconto,4), 4);
              else
                nvalunitproced := ROUND(nvalunitproced, 4);
                nvaloperacional := ROUND(nvaloperacional, 2);
                nvalhonorario := ROUND(nvalhonorario, 2);
                nvalporte := ROUND(nvalporte, 2);
                nvalacrescimo := ROUND(nvalacrescimo, 2);
                IF (nvaldesconto IS NOT NULL) AND (nvaldesconto <> .0) AND (nvaldesconto < 0.01) AND (dbamv.pkg_mv2000.le_cliente = 429) THEN
                  nvaldesconto := 0.01;
                ELSE
                  nvaldesconto := ROUND(nvaldesconto, 2);
                END IF;
              end if;
              IF (
                  v_itregfat.cd_franquia IS NOT NULL AND v_itregfat.cd_reg_fat_pai <> ncdregfat
                  AND v_itregfat.cd_reg_fat_pai IS NOT NULL) THEN
                nvaldesconto := NULL;
              END IF;
              if vTruncaValor = 'S' then
                nvaltotproced :=
                  TRUNC(ROUND(NVL(nvalortotal, 0) + NVL(nvalacrescimo, 0) - NVL(nvaldesconto, 0)
                    +
                    ( NVL(nvalporte, 0) * v_itregfat.qt_lancamento)
                    +(NVL(nvalfilme, 0) * v_itregfat.qt_lancamento)
                  ,4), 2);
              else
                nvaltotproced :=
                  ROUND(NVL(nvalortotal, 0) + NVL(nvalacrescimo, 0) - NVL(nvaldesconto, 0)
                    +
                    ( NVL(nvalporte, 0) * v_itregfat.qt_lancamento)
                    +(NVL(nvalfilme, 0) * v_itregfat.qt_lancamento)
                  , 2);
              end if;
                ncdregra := NVL(ncdregra, v_itregfat.cd_regra);
                IF ncdregra IS NULL THEN
                  OPEN c_regra(NVL(ncdconvenio, v_itregfat.cd_convenio)
                      , NVL(ncdplano, v_itregfat.cd_con_pla));
                  FETCH c_regra INTO ncdregra;
                  CLOSE c_regra;
                END IF;
              if (dbamv.pkg_mv2000.le_cliente = 429) then
                  OPEN c_tabconvenio_429(NVL(ncdconvenio, v_itregfat.cd_convenio)
                                   , NVL(ncdplano, v_itregfat.cd_con_pla), NVL(cprofatpai, v_itregfat.cd_pro_fat)
                                   , ddtreferencia, v_itregfat.cd_prestador, v_itregfat.cd_setor,nvl(nregra, ncdregra));
                  FETCH c_tabconvenio_429 INTO v_tabconvenio;
                  IF c_tabconvenio_429%FOUND THEN
                      bexcessao := TRUE;
                  ELSE
                      bexcessao := FALSE;
                  END IF;
                  CLOSE c_tabconvenio_429;
              else
                  OPEN c_tabconvenio(NVL(ncdconvenio, v_itregfat.cd_convenio)
                                   , NVL(ncdplano, v_itregfat.cd_con_pla), NVL(cprofatpai, v_itregfat.cd_pro_fat)
                                   , ddtreferencia, v_itregfat.cd_prestador, v_itregfat.cd_setor, nvl(nregra, ncdregra));
                  FETCH c_tabconvenio INTO v_tabconvenio;
                  IF c_tabconvenio%FOUND THEN
                      bexcessao := TRUE;
                  ELSE
                      bexcessao := FALSE;
                  END IF;
                  CLOSE c_tabconvenio;
              end if;
              IF NOT bexcessao THEN
                v_acresdesc.sn_acres_desc := NULL;
                v_acresdesc.sn_destacar_na_fatura := NULL;
                v_acresdesc.vl_perc_acrescimo := 0;
                v_acresdesc.vl_perc_desconto := 0;
				--
				-- PDA 557275 -  Inicio
				--
                if nvl(vsn_calculo_data_atual, 'N') <> 'S' then
                  IF V_ItRegFat.tp_gru_pro not IN ('SP','SD','SH') then
                    if Nvl( cSnFaturaAlta, 'N' ) = 'S' THEN
                       --PDA 298834 - 21/07/2009 - Marinita Kommers (Início)
                       --Validação apenas pela data final da conta ou data do lançamento por solicitação do cliente 420.
                       dDtReferencia := Nvl(V_ItRegFat.dt_final, V_ItRegFat.dt_lancamento);
                       dHrReferencia := V_ItRegFat.hr_lancamento;
                     --dDtReferencia := Nvl( Nvl( V_ItRegFat.dt_alta, V_ItRegFat.dt_final ), V_ItRegFat.dt_lancamento );
                     --dHrReferencia := Nvl( V_ItRegFat.hr_alta, V_ItRegFat.hr_lancamento );
                     --PDA 298834 - 21/07/2009 - Marinita Kommers (Fim)
                    else
                     dDtReferencia := V_ItRegFat.dt_lancamento;
                     dHrReferencia := V_ItRegFat.hr_lancamento;
                    end if ;
                  else
                    dDtReferencia := V_ItRegFat.dt_lancamento;
                    dHrReferencia := V_ItRegFat.hr_lancamento;
                  end if ;
                else
                  dDtReferencia := sysdate;
                  dHrReferencia := sysdate;
				end if;
				dDtReferencia := trunc(dDtReferencia);
				--PDA 557275  - Fim
				--
                OPEN c_acresdesc_proc(ncdregra, NVL(cprofatpai, v_itregfat.cd_pro_fat)
                    , v_itregfat.tp_atendimento ,dDtReferencia ); --PDA 557275   - Incluido o dDtReferencia
                FETCH c_acresdesc_proc INTO v_acresdesc;
                IF c_acresdesc_proc%NOTFOUND OR v_acresdesc.sn_acres_desc = 'N' THEN
                  OPEN c_grupro(NVL(cprofatpai, v_itregfat.cd_pro_fat));
                  FETCH c_grupro INTO v_grupro;
                  CLOSE c_grupro;
                  v_acresdesc.sn_acres_desc := NULL;
                  v_acresdesc.sn_destacar_na_fatura := NULL;
                  v_acresdesc.vl_perc_acrescimo := 0;
                  v_acresdesc.vl_perc_desconto := 0;
				  --PDA 557275 - Inicio
                 if nvl(vsn_calculo_data_atual, 'N') <> 'S' then
                   IF V_ItRegFat.tp_gru_pro not IN ('SP','SD','SH') then
                    if Nvl( cSnFaturaAlta, 'N' ) = 'S' THEN
                      --PDA 298834 - 21/07/2009 - Marinita Kommers (Início)
                      --Validação apenas pela data final da conta ou data do lançamento por solicitação do cliente 420.
                      dDtReferencia := Nvl( V_ItRegFat.dt_final, V_ItRegFat.dt_lancamento );
                      dHrReferencia := V_ItRegFat.hr_lancamento;
                      --dDtReferencia := Nvl( Nvl( V_ItRegFat.dt_alta, V_ItRegFat.dt_final ), V_ItRegFat.dt_lancamento );
                      --dHrReferencia := Nvl( V_ItRegFat.hr_alta, V_ItRegFat.hr_lancamento );
                      --PDA 298834 - 21/07/2009 - Marinita Kommers (Fim)
                    else
                      dDtReferencia := V_ItRegFat.dt_lancamento;
                      dHrReferencia := V_ItRegFat.hr_lancamento;
                    end if ;
                   else
                     dDtReferencia := V_ItRegFat.dt_lancamento;
                     dHrReferencia := V_ItRegFat.hr_lancamento;
                   end if ;
                 else
                  dDtReferencia := sysdate;
                  dHrReferencia := sysdate;
				 end if;
                 dDtReferencia := trunc(dDtReferencia);
                 --PDA 557275 - Fim
                  OPEN c_acresdesc(ncdregra, v_grupro.cd_gru_pro, v_itregfat.tp_atendimento ,dDtReferencia ); --PDA 557275  Incluido o  dDtReferencia
                  FETCH c_acresdesc INTO v_acresdesc;
                  CLOSE c_acresdesc;
                END IF;
                CLOSE c_acresdesc_proc;
                IF NVL(v_acresdesc.sn_acres_desc, 'N') = 'S' AND NVL(v_acresdesc.sn_destacar_na_fatura, 'S') = 'N' THEN
                  -- OP 3221 - 17/01/2013 - Acertados os IFs para utilizar corretamente o acréscimo de exame.
				  --IF NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) = 0 THEN
                  IF ( NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) = 0 )
                     OR ( Nvl(v_acresdesc.vl_perc_acrescimo,0) = 0 AND NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) > 0
					  ) THEN
                    IF Nvl(v_acresdesc.vl_perc_acrescimo,0) = 0 AND NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) > 0 then
                      v_acresdesc.vl_perc_acrescimo := v_acresdesc.vl_perc_acrescimo_exame;
                    END IF;
                  -- OP 3221 - fim
                    IF NVL(v_acresdesc.vl_perc_acrescimo, 0) > 0 THEN
                      if vTruncaValor = 'S' then
                        IF NVL(nauxvlunitario, 0) > 0 THEN
                          nvalunitproced := nauxvlunitario + TRUNC(ROUND(((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100), 4),2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S' AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                          nvalhonorario := nauxvl_honorario_unitario + TRUNC(ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_acrescimo)/ 100), 4),2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S' AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                          nvaloperacional := nauxvl_operacional_unitario + TRUNC(ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_acrescimo)/ 100), 4),2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilme, 0) > 0 THEN
                          nvalfilme := nvalfilme + TRUNC(ROUND(((nvalfilme * v_acresdesc.vl_perc_acrescimo) / 100),4), 2);
                        END IF;
                      else
                        IF NVL(nauxvlunitario, 0) > 0 THEN
                          -- PDA 557275 - Inicio
                          IF dbamv.pkg_mv2000.le_cliente = 420 THEN
                            nvalunitproced := nauxvlunitario + ((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100);
                          else
                            nvalunitproced := nauxvlunitario + ROUND(((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100), 4);
                          END IF ;
                          -- PDA 557275 - Fim
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S' AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                          nvalhonorario := nauxvl_honorario_unitario + ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_acrescimo)/ 100), 2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S' AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                          nvaloperacional := nauxvl_operacional_unitario + ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_acrescimo)/ 100), 2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilme, 0) > 0 THEN
                          nvalfilme := nvalfilme + ROUND(((nvalfilme * v_acresdesc.vl_perc_acrescimo) / 100), 2);
                        END IF;
                      end if;
                    END IF;
                    IF NVL(v_acresdesc.vl_perc_desconto, 0) > 0 THEN
                      if vTruncaValor = 'S' then
                        IF NVL(nauxvlunitario, 0) > 0 THEN
                          nvalunitproced := nauxvlunitario - TRUNC(ROUND(((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100), 4),2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S' AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                          nvalhonorario := nauxvl_honorario_unitario - TRUNC(ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_desconto) / 100), 4),2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S' AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                          nvaloperacional := nauxvl_operacional_unitario - TRUNC(ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_desconto) / 100), 4),2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilme, 0) > 0 THEN
                          nvalfilme := nvalfilme - TRUNC(ROUND(((nvalfilme * v_acresdesc.vl_perc_desconto) / 100), 4),2);
                        END IF;
                      else
                        IF NVL(nauxvlunitario, 0) > 0 THEN
                           -- PDA 557275 - Incluido o o cliente 420 no if abaixo
                          if (dbamv.pkg_mv2000.le_cliente in (420,429)) then
                            nvalunitproced := nauxvlunitario - ((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100);
                          ELSE
                            nvalunitproced := nauxvlunitario - ROUND(((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100), 4);
                          END IF;
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S' AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                          nvalhonorario := nauxvl_honorario_unitario - ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_desconto) / 100), 2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S' AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                          nvaloperacional := nauxvl_operacional_unitario - ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_desconto) / 100), 2);
                        END IF;
                        IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilme, 0) > 0 THEN
                          nvalfilme := nvalfilme - ROUND(((nvalfilme * v_acresdesc.vl_perc_desconto) / 100), 2);
                        END IF;
                      end if;
                    END IF;
                    if vTruncaValor = 'S' then
                      nvaltotproced := TRUNC(ROUND(nvalunitproced * NVL(v_itregfat.qt_lancamento, 0)
                                      + NVL(nvalfilme, 0) * NVL(v_itregfat.qt_lancamento, 0)
                                      + NVL(nvalporte, 0) * NVL(v_itregfat.qt_lancamento, 0), 4),2);
                    else
                      nvaltotproced := ROUND(nvalunitproced * NVL(v_itregfat.qt_lancamento, 0)
                                      + NVL(nvalfilme, 0) * NVL(v_itregfat.qt_lancamento, 0)
                                      + NVL(nvalporte, 0) * NVL(v_itregfat.qt_lancamento, 0), 2);
                    end if;
                  END IF;
                  nvaldesconto := 0;
                  nvalacrescimo := 0;
                END IF;
              ELSE
                ncdregra := NVL(ncdregra, v_itregfat.cd_regra);
                IF ncdregra IS NULL THEN
                  OPEN c_regra(NVL(ncdconvenio, v_itregfat.cd_convenio)
                      , NVL(ncdplano, v_itregfat.cd_con_pla));
                  FETCH c_regra INTO ncdregra;
                  CLOSE c_regra;
                END IF;
                v_acresdesc.sn_destacar_na_fatura := NULL;
				--
				--PDA 557275  (Início)
               if nvl(vsn_calculo_data_atual, 'N') <> 'S' then
                 IF V_ItRegFat.tp_gru_pro not IN ('SP','SD','SH') then
                  if Nvl( cSnFaturaAlta, 'N' ) = 'S' THEN
                    --PDA 298834 - 21/07/2009 - Marinita Kommers (Início)
                    --Validação apenas pela data final da conta ou data do lançamento por solicitação do cliente 420.
                    dDtReferencia := Nvl(V_ItRegFat.dt_final,V_ItRegFat.dt_lancamento);
                    dHrReferencia := V_ItRegFat.hr_lancamento;
                    --dDtReferencia := Nvl( Nvl( V_ItRegFat.dt_alta, V_ItRegFat.dt_final ), V_ItRegFat.dt_lancamento );
                    --dHrReferencia := Nvl( V_ItRegFat.hr_alta, V_ItRegFat.hr_lancamento );
                    --PDA 298834 - 21/07/2009 - Marinita Kommers (Fim)
                  else
                    dDtReferencia := V_ItRegFat.dt_lancamento;
                    dHrReferencia := V_ItRegFat.hr_lancamento;
                  end if ;
                 else
                   dDtReferencia := V_ItRegFat.dt_lancamento;
                   dHrReferencia := V_ItRegFat.hr_lancamento;
                 end if ;
				else
					dDtReferencia := sysdate;
					dHrReferencia := sysdate;
				end if;
				dDtReferencia := trunc(dDtReferencia);
				-- PDA 557275 - (Fim)
				--
                OPEN c_acresdesc_proc(ncdregra, NVL(cprofatpai, v_itregfat.cd_pro_fat)
                    , v_itregfat.tp_atendimento,dDtReferencia); --PDA 557275 incluido  dDtReferencia
                FETCH c_acresdesc_proc INTO v_acresdesc;
                IF c_acresdesc_proc%NOTFOUND THEN
                  OPEN c_grupro(NVL(cprofatpai, v_itregfat.cd_pro_fat));
                  FETCH c_grupro INTO v_grupro;
                  CLOSE c_grupro;
                  v_acresdesc.sn_destacar_na_fatura := NULL;
                  OPEN c_acresdesc(ncdregra, v_grupro.cd_gru_pro, v_itregfat.tp_atendimento, dDtReferencia);  --PDA 557275 incluido  dDtReferencia
                  FETCH c_acresdesc INTO v_acresdesc;
                  CLOSE c_acresdesc;
                END IF;
                CLOSE c_acresdesc_proc;
                IF NVL(v_acresdesc.sn_destacar_na_fatura, 'S') = 'N' THEN
                  nvaldesconto := 0;
                  nvalacrescimo := 0;
                END IF;
              END IF;
              IF v_itregfat.cd_regra_atendimento_pro_fat IS NOT NULL THEN
                OPEN cregraatendimentoprofat(v_itregfat.cd_regra_atendimento_pro_fat);
                FETCH cregraatendimentoprofat INTO rregraatendimentoprofat;
                CLOSE cregraatendimentoprofat;
                IF (NVL(rregraatendimentoprofat.vl_perc, 0) = 0)
                   AND(NVL(rregraatendimentoprofat.vl_co_participacao, 0) > 0) THEN
                  IF v_itregfat.tp_convenio = 'P' THEN
                    nvaltotproced := rregraatendimentoprofat.vl_co_participacao;
                    if vTruncaValor = 'S' then
                      nvalunitproced := TRUNC(ROUND(nvaltotproced / v_itregfat.qt_lancamento, 4),2);
                    else
                      nvalunitproced := ROUND(nvaltotproced / v_itregfat.qt_lancamento, 2);
                    end if;
                    --
                    nvaldesconto := 0;
                    nvalacrescimo := 0;
                    nvaloperacional := 0;
                    nvalfilme := 0;
                  ELSE
                    IF rregraatendimentoprofat.vl_co_participacao > nvaltotproced THEN
                      nvaldesconto := nvaltotproced;
                      nvaltotproced := 0;
                    ELSE
                      if vTruncaValor = 'S' then
                        nvaltotproced := TRUNC(ROUND(nvaltotproced - rregraatendimentoprofat.vl_co_participacao, 4),2);
                      else
                        nvaltotproced := ROUND(nvaltotproced - rregraatendimentoprofat.vl_co_participacao, 2);
                      end if;
                      --
                      nvaldesconto := nvaldesconto + rregraatendimentoprofat.vl_co_participacao;
                    END IF;
                  END IF;
                END IF;
              END IF;
              UPDATE dbamv.itreg_fat_espelho
                 SET vl_unitario = nvalunitproced
                   , vl_filme_unitario = nvalfilme
                   , vl_acrescimo = nvalacrescimo
                   , vl_desconto = nvaldesconto
                   , vl_honorario_unitario = nvalhonorario
                   , vl_operacional_unitario = nvaloperacional
                   , vl_total_conta = nvaltotproced
                   , qt_ch_unitario = nvalchtotal
               WHERE itreg_fat_espelho.cd_reg_fat = ncdregfat
                     AND itreg_fat_espelho.cd_lancamento = v_itregfat.cd_lancamento;
              IF NVL(v_itregfat.sn_pertence_pacote, 'N') = 'N' AND NVL(v_itregfat.tp_pagamento, 'P') <> 'C' THEN
                if vTruncaValor = 'S' then
                  nvaltotconta   := TRUNC(ROUND(nvaltotconta, 2)   + ROUND(nvaltotproced, 4),2);
                  nvalacresconta := TRUNC(ROUND(nvalacresconta, 2) + ROUND(NVL(nvalacrescimo, 0), 4),2);
                  nvaldescconta  := TRUNC(ROUND(nvaldescconta, 2)  + ROUND(NVL(nvaldesconto, 0), 4),2);
                  nvalqtchconta  := TRUNC(ROUND(nvalqtchconta, 2)  + ROUND(NVL(nvalchtotal, 0), 4),2);
                else
                  nvaltotconta := ROUND(nvaltotconta, 2) + ROUND(nvaltotproced, 2);
                  nvalacresconta := ROUND(nvalacresconta, 2) + ROUND(NVL(nvalacrescimo, 0), 2);
                  nvaldescconta := ROUND(nvaldescconta, 2) + ROUND(NVL(nvaldesconto, 0), 2);
                  nvalqtchconta := ROUND(nvalqtchconta, 2) + ROUND(NVL(nvalchtotal, 0), 2);
                end if;
              END IF;
            ELSE
              nvalunitequipe := 0;
              nvalfilmequipe := 0;
              nvalacresequipe := 0;
              nvaldescequipe := 0;
              nvalhonorequipe := 0;
              nvaloperaequipe := 0;
              nvaltotequipe := 0;
              nvalqtchequipe := 0;
              npercacres := 0;
              npercdesc := 0;
              npctlanc := NULL;
              IF dbamv.pack_ffcv_espelho.fnc_retorna_perc_sd(v_itregfat.cd_pro_fat, NVL(ncdregra, v_itregfat.cd_regra)
                 , v_itregfat.dt_lancamento) IS NOT NULL THEN
                vlancamentos := vlancamentos || TO_CHAR(v_itregfat.cd_lancamento) || ',';
                npctlanc := 100;
              END IF;
              nvalunitproced :=
                dbamv.pack_ffcv_espelho.val_proc_ffcv(v_itregfat.cd_pro_fat, ddtreferencia, dhrreferencia
                , NVL(ncdconvenio, v_itregfat.cd_convenio), NVL(ncdplano, v_itregfat.cd_con_pla)
                , v_itregfat.tp_atendimento, v_itregfat.cd_tip_acom, NULL
                , NVL(npctlanc, v_itregfat.vl_percentual_multipla)
                , cerrmsg, nvaloperacional, nvalhonorario, nvalfilme, nvalporte, nvalchtotal
                , nvalchhonorario, nvalacrescimo, nvaldesconto, NULL, v_itregfat.qt_lancamento
                , nvalortotal, NVL(ncdregra, v_itregfat.cd_regra)
                , v_itregfat.vl_percentual_paciente, v_itregfat.cd_franquia, ncdindice
                , v_itregfat.cd_regra_acoplamento, NULL, v_itregfat.tp_convenio
                , v_itregfat.cd_convenio, v_itregfat.cd_con_pla, NULL
                , v_itregfat.cd_prestador
                , ncdregfat, v_itregfat.cd_lancamento
                );
              nvalqtchequipe := nvalchtotal;
              --
              nauxvlunitario := nvalunitproced;
              nauxvl_honorario_unitario := nvalhonorario;
              nauxvl_operacional_unitario := nvaloperacional;
              FOR v_itlanmed IN c_itlanmed(v_itregfat.cd_lancamento) LOOP
                nvalunitproced :=
                  dbamv.pack_ffcv_espelho.val_proc_ffcv(v_itregfat.cd_pro_fat, ddtreferencia, dhrreferencia
                  , NVL(ncdconvenio, v_itregfat.cd_convenio), NVL(ncdplano, v_itregfat.cd_con_pla)
                  , v_itregfat.tp_atendimento, v_itregfat.cd_tip_acom, v_itlanmed.cd_ati_med
                  , v_itregfat.vl_percentual_multipla, cerrmsg, nvaloperacional, nvalhonorario
                  , nvalfilme, nvalporte, nvalchtotal, nvalchhonorario, nvalacrescimo
                  , nvaldesconto, NULL, v_itregfat.qt_lancamento, nvalortotal
                  , NVL(ncdregra, v_itregfat.cd_regra), v_itregfat.vl_percentual_paciente
                  , v_itregfat.cd_franquia, ncdindice, v_itregfat.cd_regra_acoplamento, NULL
                  , v_itregfat.tp_convenio, v_itregfat.cd_convenio, v_itregfat.cd_con_pla, NULL
                  , v_itlanmed.cd_prestador, v_itregfat.cd_setor
                  , ncdregfat, v_itregfat.cd_lancamento
                  );
                if vTruncaValor = 'S' then
                  nvalunitproced := ROUND(nvalunitproced, 4);
                  nvaloperacional := TRUNC(ROUND(nvaloperacional, 4),2);
                  nvalporte := TRUNC(ROUND(nvalporte, 4),2);
                  if nvl(V_ItLanMed.vl_percentual_pago,100) <> 100 then
                    nValHonorario := Trunc(Round(( nAuxVl_Honorario_Unitario * (V_ItLanMed.vl_percentual_pago/100)),4),2);
                  end if;
                else
                  nvalunitproced := ROUND(nvalunitproced, 4);
                  nvaloperacional := ROUND(nvaloperacional, 2);
                  nvalhonorario := ROUND(nvalhonorario, 2);
                  nvalporte := ROUND(nvalporte, 2);
                end if;
                --
                IF cerrmsg IS NOT NULL THEN
                  --
                  ncdlfa := NULL;
                  OPEN c_existelfa(ncdregfat, v_itregfat.cd_pro_fat);
                  FETCH c_existelfa INTO ncdlfa;
                  CLOSE c_existelfa;
                  --
                  IF ncdlfa IS NULL AND v_itregfat.tp_convenio IN('C', 'P') THEN
                    INSERT INTO dbamv.log_falha_importacao
                                (
                                 cd_reg_fat, cd_pro_fat, dt_importacao, tp_importacao, tp_erro
                               , nm_usuario_gerou, cd_log_falha_importacao, ds_msg_erro
                               , cd_atendimento, cd_item_falha)
                    VALUES      (
                                 ncdregfat, v_itregfat.cd_pro_fat, SYSDATE, 'Calculo', '03'
                               , USER, dbamv.seq_log_falha_importacao.NEXTVAL, cerrmsg
                               , v_itregfat.cd_atendimento, v_itregfat.cd_lancamento);
                  END IF;
                  cmsgerro := cerrmsg;
                END IF;
                --
                IF NVL(v_itlanmed.tp_pagamento, 'P') <> 'C' THEN
                  btemparticular := TRUE;
                  nvalfilmequipe := nvalfilmequipe + nvalfilme;
                  if vTruncaValor = 'S' then
                    nvalacresequipe := TRUNC(ROUND(nvalacresequipe + nvalacrescimo, 4),2);
                    nvaldescequipe  := TRUNC(ROUND(nvaldescequipe + nvaldesconto, 4),2);
                  else
                    nvalacresequipe := ROUND(nvalacresequipe + nvalacrescimo, 2);
                    nvaldescequipe := ROUND(nvaldescequipe + nvaldesconto, 2);
                  end if;
                  --
                  nvaloperaequipe := nvaloperaequipe + nvaloperacional;
                  IF (
                      v_itregfat.cd_franquia IS NOT NULL AND v_itregfat.cd_reg_fat_pai <> ncdregfat
                      AND v_itregfat.cd_reg_fat_pai IS NOT NULL) THEN
                    nvaldescequipe := NULL;
                  END IF;
                  IF v_itlanmed.tp_funcao = 'N' THEN
                    nvalunitequipe := nvalunitequipe + nvalporte;
                    if vTruncaValor = 'S' then
                      nvaltotequipe := nvaltotequipe + TRUNC(ROUND(nvalporte * v_itregfat.qt_lancamento, 4),2);
                    else
                      nvaltotequipe := nvaltotequipe + ROUND(nvalporte * v_itregfat.qt_lancamento, 2);
                    end if;
                    nvalhonorequipe := nvalhonorequipe + nvalporte;
                  ELSE
                    nvalunitequipe := nvalunitequipe +(nvalhonorario + nvaloperacional);
                    if vTruncaValor = 'S' then
                      nvaltotequipe := nvaltotequipe + TRUNC(ROUND((nvalhonorario + nvaloperacional) * v_itregfat.qt_lancamento, 4),2);
                    else
                      nvaltotequipe := nvaltotequipe + ROUND((nvalhonorario + nvaloperacional) * v_itregfat.qt_lancamento, 2);
                    end if;
                    nvalhonorequipe := nvalhonorequipe + nvalhonorario;
                  END IF;
                END IF;
                if vTruncaValor = 'S' then
		              nvl_bruto := trunc(round(nvalhonorario + nvaloperacional,4),2);
                else
		              nvl_bruto := round(nvalhonorario + nvaloperacional,2);
                end if;
                --
                BEGIN
                  UPDATE dbamv.itlan_med_espelho
                     SET vl_ato =
                           DECODE(
                             v_itlanmed.tp_funcao
                           , 'N', nvalporte
                           , nvl_bruto
			   )
                   WHERE itlan_med_espelho.cd_reg_fat = ncdregfat
                         AND itlan_med_espelho.cd_lancamento = v_itregfat.cd_lancamento
                         AND itlan_med_espelho.cd_prestador = v_itlanmed.cd_prestador
                         AND itlan_med_espelho.cd_ati_med = v_itlanmed.cd_ati_med;
                END;
              END LOOP;
             --
              nauxvlunitario := nvalunitequipe;
              nauxvl_honorario_unitario := nvalhonorequipe;
              nauxvl_operacional_unitario := nvaloperaequipe;
              nauxacres := nvalacresequipe;
              nauxdesc := nvaldescequipe;
              nauxtotal := nvaltotequipe + NVL(nvalacresequipe, 0) - NVL(nvaldescequipe, 0);
              bnaodestacar := FALSE;
              ncdregra := NVL(ncdregra, v_itregfat.cd_regra);
              IF ncdregra IS NULL THEN
                OPEN c_regra(NVL(ncdconvenio, v_itregfat.cd_convenio)
                    , NVL(ncdplano, v_itregfat.cd_con_pla));
                FETCH c_regra INTO ncdregra;
                CLOSE c_regra;
              END IF;
              v_acresdesc.sn_acres_desc := NULL;
              v_acresdesc.sn_destacar_na_fatura := NULL;
              v_acresdesc.vl_perc_acrescimo := 0;
              v_acresdesc.vl_perc_desconto := 0;
			  --
			  --PDA 557275 (Início)
               if nvl(vsn_calculo_data_atual, 'N') <> 'S' then
                 IF V_ItRegFat.tp_gru_pro not IN ('SP','SD','SH') then
                  if Nvl( cSnFaturaAlta, 'N' ) = 'S' THEN
                    --PDA 298834 - 21/07/2009 - Marinita Kommers (Início)
                    --Validação apenas pela data final da conta ou data do lançamento por solicitação do cliente 420.
                    dDtReferencia := Nvl(V_ItRegFat.dt_final, V_ItRegFat.dt_lancamento );
                    dHrReferencia := V_ItRegFat.hr_lancamento;
                    --dDtReferencia := Nvl( Nvl( V_ItRegFat.dt_alta, V_ItRegFat.dt_final ), V_ItRegFat.dt_lancamento );
                    --dHrReferencia := Nvl( V_ItRegFat.hr_alta, V_ItRegFat.hr_lancamento );
                    --PDA 298834 - 21/07/2009 - Marinita Kommers (Fim)
                  else
                    dDtReferencia := V_ItRegFat.dt_lancamento;
                    dHrReferencia := V_ItRegFat.hr_lancamento;
                  end if ;
                 else
                   dDtReferencia := V_ItRegFat.dt_lancamento;
                   dHrReferencia := V_ItRegFat.hr_lancamento;
                 end if ;
				else
					dDtReferencia := sysdate;
					dHrReferencia := sysdate;
				end if;
				dDtReferencia := trunc(dDtReferencia);
				--PDA 557275  (Fim)
			  --
              OPEN c_acresdesc_proc(ncdregra, NVL(cprofatpai, v_itregfat.cd_pro_fat)
                  , v_itregfat.tp_atendimento , dDtReferencia ); --PDA 557275 incluido  dDtReferencia
              FETCH c_acresdesc_proc INTO v_acresdesc;
              IF c_acresdesc_proc%NOTFOUND OR v_acresdesc.sn_acres_desc = 'N' THEN
                OPEN c_grupro(NVL(cprofatpai, v_itregfat.cd_pro_fat));
                FETCH c_grupro INTO v_grupro;
                CLOSE c_grupro;
                v_acresdesc.sn_acres_desc := NULL;
                v_acresdesc.sn_destacar_na_fatura := NULL;
                v_acresdesc.vl_perc_acrescimo := 0;
                v_acresdesc.vl_perc_desconto := 0;
                OPEN c_acresdesc(ncdregra, v_grupro.cd_gru_pro, v_itregfat.tp_atendimento, dDtReferencia ); --PDA 557275 incluido  dDtReferencia
                FETCH c_acresdesc INTO v_acresdesc;
                CLOSE c_acresdesc;
              END IF;
              CLOSE c_acresdesc_proc;
              IF NVL(v_acresdesc.sn_destacar_na_fatura, 'S') = 'N' THEN
                bnaodestacar := TRUE;
              END IF;
              IF NVL(v_acresdesc.sn_acres_desc, 'N') = 'S' THEN
                IF NVL(v_acresdesc.vl_perc_acrescimo, 0) > 0 THEN
                  npercacres := NVL(v_acresdesc.vl_perc_acrescimo, 0);
                END IF;
                IF NVL(v_acresdesc.vl_perc_desconto, 0) > 0 THEN
                  npercdesc := NVL(v_acresdesc.vl_perc_desconto, 0);
                END IF;
              END IF;
              IF NVL(v_acresdesc.sn_acres_desc, 'N') = 'S' AND btemparticular THEN
                if vTruncaValor = 'S' then
                  IF NVL(v_acresdesc.vl_perc_acrescimo, 0) > 0 THEN
                    IF NVL(nauxvlunitario, 0) > 0 THEN
                      nvalunitequipe := nauxvlunitario + TRUNC(ROUND(((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100), 4),2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S'
                       AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                      nvalhonorequipe := nauxvl_honorario_unitario + TRUNC(ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_acrescimo) / 100)
                         , 4),2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S'
                       AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                      nvaloperaequipe := nauxvl_operacional_unitario + TRUNC(ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_acrescimo) / 100)
                         , 4),2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilmequipe, 0) > 0 THEN
                      nvalfilmequipe := nvalfilmequipe + TRUNC(ROUND(((nvalfilmequipe * v_acresdesc.vl_perc_acrescimo) / 100), 4),2);
                    END IF;
                    nauxtotal := nvalunitequipe * v_itregfat.qt_lancamento;
                  END IF;
                  IF NVL(v_acresdesc.vl_perc_desconto, 0) > 0 THEN
                    IF NVL(nauxvlunitario, 0) > 0 THEN
                      nvalunitequipe := nauxvlunitario - TRUNC(ROUND(((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100), 4),2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S'
                       AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                      nvalhonorequipe := nauxvl_honorario_unitario - TRUNC(ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_desconto) / 100), 4),2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S'
                       AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                      nvaloperaequipe := nauxvl_operacional_unitario - TRUNC(ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_desconto) / 100) , 4),2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilmequipe, 0) > 0 THEN
                      nvalfilmequipe :=
                        nvalfilmequipe
                        - TRUNC(ROUND(((nvalfilmequipe * v_acresdesc.vl_perc_desconto) / 100), 4),2);
                    END IF;
                    nauxtotal := nvalunitequipe * v_itregfat.qt_lancamento;
                  END IF;
                else
                  IF NVL(v_acresdesc.vl_perc_acrescimo, 0) > 0 THEN
                    IF NVL(nauxvlunitario, 0) > 0 THEN
                      nvalunitequipe := nauxvlunitario + ROUND(((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100), 2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S'
                       AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                      nvalhonorequipe := nauxvl_honorario_unitario + ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_acrescimo) / 100)
                         , 2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S'
                       AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                      nvaloperaequipe := nauxvl_operacional_unitario + ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_acrescimo) / 100)
                         , 2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilmequipe, 0) > 0 THEN
                      nvalfilmequipe := nvalfilmequipe + ROUND(((nvalfilmequipe * v_acresdesc.vl_perc_acrescimo) / 100), 2);
                    END IF;
                    nauxtotal := nvalunitequipe * v_itregfat.qt_lancamento;
                  END IF;
                  IF NVL(v_acresdesc.vl_perc_desconto, 0) > 0 THEN
                    IF NVL(nauxvlunitario, 0) > 0 THEN
                      nvalunitequipe := nauxvlunitario - ROUND(((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100), 2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S'
                       AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                      nvalhonorequipe := nauxvl_honorario_unitario - ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_desconto) / 100), 2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S'
                       AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                      nvaloperaequipe := nauxvl_operacional_unitario - ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_desconto) / 100) , 2);
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilmequipe, 0) > 0 THEN
                      nvalfilmequipe :=
                        nvalfilmequipe
                        - ROUND(((nvalfilmequipe * v_acresdesc.vl_perc_desconto) / 100), 2);
                    END IF;
                    nauxtotal := nvalunitequipe * v_itregfat.qt_lancamento;
                  END IF;
                end if;
				if bnaodestacar then
					nauxacres := 0;
					nauxdesc := 0;
				end if;
              END IF;
              IF v_itregfat.cd_regra_atendimento_pro_fat IS NOT NULL THEN
                OPEN cregraatendimentoprofat(v_itregfat.cd_regra_atendimento_pro_fat);
                FETCH cregraatendimentoprofat INTO rregraatendimentoprofat;
                CLOSE cregraatendimentoprofat;
                IF (NVL(rregraatendimentoprofat.vl_perc, 0) = 0)
                   AND(NVL(rregraatendimentoprofat.vl_co_participacao, 0) > 0) THEN
                  IF v_itregfat.tp_convenio = 'P' THEN
                    nauxtotal := rregraatendimentoprofat.vl_co_participacao;
                    if vTruncaValor = 'S' then
                      nvalunitequipe := TRUNC(ROUND(nauxtotal / v_itregfat.qt_lancamento, 4),2);
                    else
                      nvalunitequipe := ROUND(nauxtotal / v_itregfat.qt_lancamento, 2);
                    end if;
                    nauxdesc := 0;
                    nauxacres := 0;
                    nvaloperacional := 0;
                    nvalfilme := 0;
                  ELSE
                    IF rregraatendimentoprofat.vl_co_participacao > nauxtotal THEN
                      nauxdesc := nauxtotal;
                      nvaltotproced := 0;
                    ELSE
                      if vTruncaValor = 'S' then
                        nauxtotal := TRUNC(ROUND(nauxtotal - rregraatendimentoprofat.vl_co_participacao, 4),2);
                      else
                        nauxtotal := ROUND(nauxtotal - rregraatendimentoprofat.vl_co_participacao, 2);
                      end if;
                      nauxdesc := nauxdesc + rregraatendimentoprofat.vl_co_participacao;
                    END IF;
                  END IF;
                END IF;
              END IF;
              UPDATE dbamv.itreg_fat_espelho
                 SET vl_unitario = nvalunitequipe
                   , vl_filme_unitario = nvalfilmequipe
                   , vl_acrescimo = nauxacres
                   , vl_desconto = nauxdesc
                   , vl_honorario_unitario = nvalhonorequipe
                   , vl_operacional_unitario = nvaloperaequipe
                   , vl_total_conta = nauxtotal +(nvalfilmequipe * v_itregfat.qt_lancamento)
                   , qt_ch_unitario = nvalqtchequipe
               WHERE itreg_fat_espelho.cd_reg_fat = ncdregfat
                     AND itreg_fat_espelho.cd_lancamento = v_itregfat.cd_lancamento;
              dbamv.pack_ffcv_espelho.ajusta_valor(ncdregfat, bnaodestacar, npercacres, npercdesc, v_itregfat.cd_lancamento      );
              if vTruncaValor = 'S' then
                IF NVL(v_itregfat.sn_pertence_pacote, 'N') = 'N' THEN
                  nvaltotconta := TRUNC(ROUND(nvaltotconta, 4),2)
                                + TRUNC(ROUND(NVL(nvaltotequipe, 0), 4),2)
                                + TRUNC(ROUND(NVL(nvalacresequipe, 0), 4),2)
                                - TRUNC(ROUND(NVL(nvaldescequipe, 0), 4),2);
                  nvalacresconta := TRUNC(ROUND(nvalacresconta, 4),2) + TRUNC(ROUND(NVL(nauxacres, 0), 4),2);
                  nvaldescconta := TRUNC(ROUND(nvaldescconta, 4),2) + TRUNC(ROUND(NVL(nauxdesc, 0), 4),2);
                  nvalqtchconta := nvalqtchconta + NVL(nvalqtchequipe, 0);
                END IF;
                --
              else
                IF NVL(v_itregfat.sn_pertence_pacote, 'N') = 'N' THEN
                  nvaltotconta := ROUND(nvaltotconta, 2)
                                + ROUND(NVL(nvaltotequipe, 0), 2)
                                + ROUND(NVL(nvalacresequipe, 0), 2)
                                - ROUND(NVL(nvaldescequipe, 0), 2);
                  nvalacresconta := ROUND(nvalacresconta, 2) + ROUND(NVL(nauxacres, 0), 2);
                  nvaldescconta := ROUND(nvaldescconta, 2) + ROUND(NVL(nauxdesc, 0), 2);
                  nvalqtchconta := nvalqtchconta + NVL(nvalqtchequipe, 0);
                END IF;
              end if;
            END IF;
          END IF;
        ELSE
          if vTruncaValor = 'S' then
            nvaltotconta := TRUNC(ROUND(nvaltotconta, 4),2) + NVL(v_itregfat.vl_total_conta, 0);
          else
            nvaltotconta := ROUND(nvaltotconta, 2) + NVL(v_itregfat.vl_total_conta, 0);
          end if;
        END IF;
      END LOOP;
      dbamv.pack_ffcv_espelho.prc_regra_perc_sd(vlancamentos, 'I', ncdregra, ncdregfat, nvaltotconta);
      OPEN c_totalconta(ncdregfat);
      FETCH c_totalconta INTO ntotalcontaaux;
      CLOSE c_totalconta;
      -- PDA 560191 - Inicio - Não estava incluida a atualização da conta e chamada a da função de desconto por faixa (configurada no cadastro de convênios)
       UPDATE dbamv.reg_fat
      SET vl_total_conta = ntotalcontaaux
          ,sn_conta_calculada = 'S'
       WHERE reg_fat.cd_reg_fat = ncdregfat;
      dbamv.pack_ffcv_espelho.fnc_ffcv_calc_desconto_conta(ncdregfat, natendimento);
      -- PDA 560191 - Fim
      IF ctp_controle_lote = 'U' THEN
        IF pncdlancamento IS NOT NULL THEN
          vtipomov := NULL;
          OPEN ctipo;
          FETCH ctipo INTO vtipomov;
          CLOSE ctipo;
          IF NVL(vtipomov, 'X') <> 'Auditoria' THEN
            dbamv.pack_ffcv_espelho.prc_reg_fat_insere_acrescimo(ncdregfat, ncd_convenio_a, nvaltotconta);
          END IF;
        ELSE
          dbamv.pack_ffcv_espelho.prc_reg_fat_insere_acrescimo(ncdregfat, ncd_convenio_a, nvaltotconta);
        END IF;
      END IF;
    END;
  END proc_valorizacao;
  FUNCTION fnc_retorna_perc_sd(
    pvprofat  IN  VARCHAR2
  , pnregra   IN  NUMBER
  , pddtmov   IN  DATE )
    RETURN NUMBER IS
    CURSOR cverificapercsd(vprofat IN VARCHAR2, nregra IN NUMBER, ddtmov IN DATE) IS
      SELECT regra_percentual_sd.cd_regra_percentual_sd
        FROM dbamv.pro_fat
           , dbamv.gru_pro
           , dbamv.regra_percentual_sd
       WHERE pro_fat.cd_pro_fat = vprofat AND regra_percentual_sd.cd_regra = nregra
             AND TRUNC(regra_percentual_sd.dt_vigencia) <= TRUNC(ddtmov)
             AND pro_fat.cd_gru_pro = gru_pro.cd_gru_pro
             AND regra_percentual_sd.cd_grupo = gru_pro.cd_gru_pro
             AND NOT EXISTS(
                  SELECT regra_percentual_sd.cd_regra_percentual_sd
                    FROM dbamv.regra_percentual_sd
                   WHERE regra_percentual_sd.cd_grupo = SUBSTR(vprofat, 1, 4)
                         AND regra_percentual_sd.cd_regra = nregra
                         AND TRUNC(regra_percentual_sd.dt_vigencia) <= TRUNC(ddtmov))
      UNION ALL
      SELECT regra_percentual_sd.cd_regra_percentual_sd
        FROM dbamv.regra_percentual_sd
       WHERE regra_percentual_sd.cd_grupo = SUBSTR(vprofat, 1, 4)
             AND regra_percentual_sd.cd_regra = nregra
             AND TRUNC(regra_percentual_sd.dt_vigencia) <= TRUNC(ddtmov);
    nregra  NUMBER;
  BEGIN
    OPEN cverificapercsd(pvprofat, pnregra, pddtmov);
    FETCH cverificapercsd
     INTO nregra;
    CLOSE cverificapercsd;
    RETURN(nregra);
  END;
  PROCEDURE fnc_ffcv_calc_desconto_conta(nconta IN NUMBER, natendimento IN NUMBER) IS
    CURSOR citens(nconta NUMBER, natendimento NUMBER) IS
      SELECT DISTINCT 'H' tipo_lancamento
                    , itreg_fat_espelho.cd_lancamento
                    , itreg_fat_espelho.cd_gru_fat
                    , pro_fat.cd_gru_pro
                    , itreg_fat_espelho.cd_pro_fat
                    , itreg_fat_espelho.cd_setor
                    , itreg_fat_espelho.vl_total_conta
                    , faixa_desconto.cd_faixa_desconto
                 FROM dbamv.reg_fat
                    , dbamv.itreg_fat_espelho
                    , dbamv.pro_fat
                    , dbamv.reg_desc_emp_con_pla reg_faixa
                    , dbamv.faixa_desconto
                WHERE reg_fat.cd_reg_fat = nconta
                      AND reg_fat.cd_atendimento = natendimento
                      AND reg_faixa.cd_multi_empresa = reg_fat.cd_multi_empresa
                      AND reg_faixa.cd_convenio = reg_fat.cd_convenio
                      AND reg_faixa.cd_con_pla = reg_fat.cd_con_pla
                      AND reg_fat.cd_reg_fat = itreg_fat_espelho.cd_reg_fat
                      AND itreg_fat_espelho.cd_pro_fat = pro_fat.cd_pro_fat
                      AND reg_fat.vl_total_conta BETWEEN faixa_desconto.vl_inicial
                                                     AND faixa_desconto.vl_final
                      AND reg_faixa.cd_faixa_desconto = faixa_desconto.cd_faixa_desconto
                      AND TRUNC(faixa_desconto.dt_vigencia) IN(
                           SELECT TRUNC(MAX(dt_vigencia)) dt_vigencia
                             FROM dbamv.faixa_desconto,
                                  dbamv.reg_desc_emp_con_pla
                            WHERE TRUNC(dt_vigencia) <= TRUNC(itreg_fat_espelho.dt_lancamento)
                              AND reg_faixa.cd_multi_empresa = reg_fat.cd_multi_empresa
                              AND faixa_desconto.cd_faixa_desconto = reg_desc_emp_con_pla.cd_faixa_desconto
                              AND reg_desc_emp_con_pla.cd_convenio = reg_fat.cd_convenio
                              AND reg_desc_emp_con_pla.cd_con_pla = reg_fat.cd_con_pla
                              AND reg_fat.vl_total_conta BETWEEN faixa_desconto.vl_inicial
                                                             AND faixa_desconto.vl_final)
      UNION ALL
      SELECT DISTINCT 'A' tipo_lancamento
                    , itreg_amb_espelho.cd_lancamento
                    , itreg_amb_espelho.cd_gru_fat
                    , pro_fat.cd_gru_pro
                    , itreg_amb_espelho.cd_pro_fat
                    , itreg_amb_espelho.cd_setor
                    , itreg_amb_espelho.vl_total_conta
                    , faixa_desconto.cd_faixa_desconto
                 FROM dbamv.atendime
                    , dbamv.reg_amb
                    , dbamv.itreg_amb_espelho
                    , dbamv.pro_fat
                    , dbamv.reg_desc_emp_con_pla reg_faixa
                    , dbamv.faixa_desconto
                WHERE reg_amb.cd_reg_amb = nconta
                      AND itreg_amb_espelho.cd_atendimento = natendimento
                      AND reg_amb.cd_reg_amb = itreg_amb_espelho.cd_reg_amb
                      AND atendime.cd_atendimento = itreg_amb_espelho.cd_atendimento
                      AND reg_faixa.cd_multi_empresa = atendime.cd_multi_empresa
                      AND atendime.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                      AND reg_faixa.cd_convenio = itreg_amb_espelho.cd_convenio
                      AND reg_faixa.cd_con_pla = itreg_amb_espelho.cd_con_pla
                      AND itreg_amb_espelho.cd_pro_fat = pro_fat.cd_pro_fat
                      AND reg_amb.vl_total_conta BETWEEN faixa_desconto.vl_inicial
                                                     AND faixa_desconto.vl_final
                      AND reg_faixa.cd_faixa_desconto = faixa_desconto.cd_faixa_desconto
                      AND TRUNC(faixa_desconto.dt_vigencia) IN(
                           SELECT TRUNC(MAX(dt_vigencia)) dt_vigencia
                             FROM dbamv.faixa_desconto,
                                  dbamv.reg_desc_emp_con_pla
                            WHERE TRUNC(dt_vigencia) <= TRUNC(reg_amb.dt_lancamento)
                              AND reg_faixa.cd_multi_empresa = reg_amb.cd_multi_empresa
                              AND faixa_desconto.cd_faixa_desconto = reg_desc_emp_con_pla.cd_faixa_desconto
                              AND reg_desc_emp_con_pla.cd_convenio = reg_amb.cd_convenio
                              AND reg_desc_emp_con_pla.cd_con_pla = itreg_amb_espelho.cd_con_pla
                              AND reg_amb.vl_total_conta BETWEEN faixa_desconto.vl_inicial
                                                             AND faixa_desconto.vl_final);
    CURSOR cprofatsetor(nfaixa NUMBER, vprofat VARCHAR2, nsetor NUMBER) IS
      SELECT tp_desconto, vl_desconto
        FROM dbamv.itfaixa_desconto
       WHERE cd_faixa_desconto = nfaixa AND cd_pro_fat = vprofat AND cd_setor = nsetor;
    CURSOR cprofat(nfaixa NUMBER, vprofat VARCHAR2) IS
      SELECT tp_desconto, vl_desconto
        FROM dbamv.itfaixa_desconto
       WHERE cd_faixa_desconto = nfaixa AND cd_pro_fat = vprofat AND cd_setor IS NULL;
    CURSOR cgruprosetor(nfaixa NUMBER, ngrupro NUMBER, nsetor NUMBER) IS
      SELECT tp_desconto, vl_desconto
        FROM dbamv.itfaixa_desconto
       WHERE cd_faixa_desconto = nfaixa AND cd_gru_pro = ngrupro AND cd_setor = nsetor;
    CURSOR cgrupro(nfaixa NUMBER, ngrupro NUMBER) IS
      SELECT tp_desconto, vl_desconto
        FROM dbamv.itfaixa_desconto
       WHERE cd_faixa_desconto = nfaixa AND cd_gru_pro = ngrupro AND cd_setor IS NULL;
    CURSOR cgrufatsetor(nfaixa NUMBER, ngrufat NUMBER, nsetor NUMBER) IS
      SELECT tp_desconto, vl_desconto
        FROM dbamv.itfaixa_desconto
       WHERE cd_faixa_desconto = nfaixa AND cd_gru_fat = ngrufat AND cd_setor = nsetor;
    CURSOR cgrufat(nfaixa NUMBER, ngrufat NUMBER) IS
      SELECT tp_desconto, vl_desconto
        FROM dbamv.itfaixa_desconto
       WHERE cd_faixa_desconto = nfaixa AND cd_gru_fat = ngrufat AND cd_setor IS NULL;
    CURSOR csetor(nfaixa NUMBER, nsetor NUMBER) IS
      SELECT tp_desconto, vl_desconto
        FROM dbamv.itfaixa_desconto
       WHERE cd_faixa_desconto = nfaixa
         AND cd_setor = nsetor
         AND cd_gru_fat IS NULL
         AND cd_gru_pro IS NULL;
    CURSOR catend(natend IN NUMBER) IS
      SELECT tp_atendimento
        FROM dbamv.atendime
       WHERE cd_atendimento = natend AND atendime.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
    vtpatend     VARCHAR2(1);
    ctpconta     CHAR(1);
    nvldesconto  NUMBER;
    nvltotcont   NUMBER;
    nvltotdesc   NUMBER;
    ndesconto    NUMBER;
    ctipodesc    CHAR(1);
  BEGIN
    OPEN catend(natendimento);
    FETCH catend
     INTO vtpatend;
    CLOSE catend;
    IF vtpatend = 'I' THEN
      UPDATE dbamv.itreg_fat_espelho
         SET vl_desconto_conta = 0
       WHERE cd_reg_fat = nconta;
    ELSE
      UPDATE dbamv.itreg_amb_espelho
         SET vl_desconto_conta = 0
       WHERE cd_reg_amb = nconta AND cd_atendimento = natendimento;
    END IF;
    FOR ritens IN citens(nconta, natendimento) LOOP
      ndesconto := 0;
      ctipodesc := 'X';
      OPEN cprofatsetor(ritens.cd_faixa_desconto, ritens.cd_pro_fat, ritens.cd_setor);
      FETCH cprofatsetor
       INTO ctipodesc, ndesconto;
      CLOSE cprofatsetor;
      IF NVL(ctipodesc, 'X') = 'X' AND NVL(ndesconto, 0) = 0 THEN
        OPEN cprofat(ritens.cd_faixa_desconto, ritens.cd_pro_fat);
        FETCH cprofat
         INTO ctipodesc, ndesconto;
        CLOSE cprofat;
        IF NVL(ctipodesc, 'X') = 'X' AND NVL(ndesconto, 0) = 0 THEN
          OPEN cgruprosetor(ritens.cd_faixa_desconto, ritens.cd_gru_pro, ritens.cd_setor);
          FETCH cgruprosetor
           INTO ctipodesc, ndesconto;
          CLOSE cgruprosetor;
          IF NVL(ctipodesc, 'X') = 'X' AND NVL(ndesconto, 0) = 0 THEN
            OPEN cgrupro(ritens.cd_faixa_desconto, ritens.cd_gru_pro);
            FETCH cgrupro
             INTO ctipodesc, ndesconto;
            CLOSE cgrupro;
            IF NVL(ctipodesc, 'X') = 'X' AND NVL(ndesconto, 0) = 0 THEN
              OPEN cgrufatsetor(ritens.cd_faixa_desconto, ritens.cd_gru_fat, ritens.cd_setor);
              FETCH cgrufatsetor
               INTO ctipodesc, ndesconto;
              CLOSE cgrufatsetor;
              IF NVL(ctipodesc, 'X') = 'X' AND NVL(ndesconto, 0) = 0 THEN
                OPEN cgrufat(ritens.cd_faixa_desconto, ritens.cd_gru_fat);
                FETCH cgrufat
                 INTO ctipodesc, ndesconto;
                CLOSE cgrufat;
                IF NVL(ctipodesc, 'X') = 'X' AND NVL(ndesconto, 0) = 0 THEN
                  OPEN csetor(ritens.cd_faixa_desconto, ritens.cd_setor);
                  FETCH csetor
                   INTO ctipodesc, ndesconto;
                  CLOSE csetor;
                END IF;
              END IF;
            END IF;
          END IF;
        END IF;
      END IF;
      IF NVL(ctipodesc, 'X') <> 'X' AND NVL(ndesconto, 0) <> 0 THEN
        IF ctipodesc = 'V' THEN
          nvldesconto := ndesconto;
        ELSE
          nvldesconto := ritens.vl_total_conta *(ndesconto / 100);
        END IF;
        IF ritens.tipo_lancamento = 'A' THEN
          UPDATE dbamv.itreg_amb_espelho
             SET vl_desconto_conta = nvldesconto
               , vl_total_conta =(ritens.vl_total_conta - nvldesconto)
               , tp_desconto = 'L'
           WHERE cd_reg_amb = nconta AND cd_lancamento = ritens.cd_lancamento;
        ELSIF ritens.tipo_lancamento = 'H' THEN
          UPDATE dbamv.itreg_fat_espelho
             SET vl_desconto_conta = nvldesconto
               , vl_total_conta =(ritens.vl_total_conta - nvldesconto)
           WHERE cd_reg_fat = nconta AND cd_lancamento = ritens.cd_lancamento;
          UPDATE dbamv.itlan_med_espelho
             SET vl_desconto_conta = nvldesconto
               , vl_liquido =(vl_liquido - nvldesconto)
           WHERE cd_reg_fat = nconta AND cd_lancamento = ritens.cd_lancamento;
        END IF;
        ctpconta := ritens.tipo_lancamento;
      END IF;
    END LOOP ritens;
    IF ctpconta = 'A' THEN
      SELECT SUM(NVL(vl_desconto_conta, 0)), SUM(NVL(vl_total_conta, 0))
        INTO nvltotdesc, nvltotcont
        FROM dbamv.itreg_amb_espelho
       WHERE cd_reg_amb = nconta
         AND NVL(sn_pertence_pacote, 'N') = 'N' AND NVL(sn_paciente_paga, 'N') = 'N'
         AND NVL(tp_pagamento, 'P') <> 'C';
    ELSIF ctpconta = 'H' THEN
      SELECT SUM(NVL(vl_desconto_conta, 0)), SUM(NVL(vl_total_conta, 0))
        INTO nvltotdesc, nvltotcont
        FROM dbamv.itreg_fat_espelho
       WHERE cd_reg_fat = nconta
         AND NVL(sn_pertence_pacote, 'N') = 'N' AND NVL(sn_paciente_paga, 'N') = 'N'
         AND NVL(tp_pagamento, 'P') <> 'C';
    END IF;
  END fnc_ffcv_calc_desconto_conta;
  PROCEDURE prc_reg_fat_insere_acrescimo(
    pcd_reg_fat      IN  NUMBER
  , pcd_convenio     IN  NUMBER
  , pvl_total_conta  IN  NUMBER DEFAULT 0
  , pvauditoria      IN  VARCHAR2 DEFAULT NULL)
  IS
  BEGIN
    DECLARE
      CURSOR c_percente(p_cd_convenio IN NUMBER) IS
        SELECT convenio.cd_pro_fat, convenio.vl_percentual
          FROM dbamv.convenio
             , dbamv.empresa_convenio
         WHERE convenio.cd_convenio = p_cd_convenio
               AND convenio.cd_convenio = empresa_convenio.cd_convenio
               AND empresa_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_pro_fat(pcd_pro_fat IN VARCHAR, p_cd_reg_fat IN NUMBER) IS
        SELECT itreg_fat_espelho.cd_pro_fat
             , itreg_fat_espelho.vl_total_conta
             , itreg_fat_espelho.dt_lancamento
             , itreg_fat_espelho.cd_lancamento
             , itreg_fat_espelho.hr_lancamento
             , itreg_fat_espelho.cd_setor
             , itreg_fat_espelho.cd_gru_fat
             , itreg_fat_espelho.sn_pertence_pacote
             , itreg_fat_espelho.vl_percentual_multipla
             , itreg_fat_espelho.qt_lancamento
             , itreg_fat_espelho.vl_unitario
             , itreg_fat_espelho.vl_acrescimo
             , itreg_fat_espelho.vl_desconto
             , itreg_fat_espelho.tp_pagamento
             , itreg_fat_espelho.cd_prestador
             , itreg_fat_espelho.tp_mvto
             , reg_fat.cd_convenio
             , reg_fat.cd_con_pla
             , reg_fat.sn_fechada
             , reg_fat.sn_conta_calculada
             , reg_fat.sn_fatura_impressa
             , reg_fat.cd_atendimento
        FROM   dbamv.itreg_fat_espelho
             , dbamv.reg_fat
         WHERE itreg_fat_espelho.cd_pro_fat = pcd_pro_fat
               AND reg_fat.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
               AND itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
               AND itreg_fat_espelho.cd_reg_fat = p_cd_reg_fat;
     CURSOR c_grufat(pcd_pro_fat IN VARCHAR) IS
        SELECT gru_pro.cd_gru_fat cd_gru_fat, setor_gru_fat.cd_setor cd_setor
          FROM dbamv.gru_pro
             , dbamv.pro_fat
             , dbamv.setor_gru_fat
         WHERE pro_fat.cd_pro_fat = pcd_pro_fat AND pro_fat.cd_gru_pro = gru_pro.cd_gru_pro
               AND gru_pro.cd_gru_fat = setor_gru_fat.cd_gru_fat;
      ccd_pro_fat       dbamv.convenio.cd_pro_fat%TYPE;
      nvl_percentual    dbamv.convenio.vl_percentual%TYPE;
      ccd_pro_fat2      dbamv.itreg_fat_espelho.cd_pro_fat%TYPE;
      nvl_total_conta2  dbamv.itreg_fat_espelho.vl_total_conta%TYPE;
      ncd_lancamento    NUMBER;
      ncd_gru_fat       NUMBER;
      ncd_setor         NUMBER;
      nvl_conta         NUMBER;
      nvl_total_conta   NUMBER;
      CURSOR cmotivo IS
        SELECT cd_motivo_auditoria
          FROM dbamv.convenio
             , dbamv.empresa_convenio
         WHERE convenio.cd_convenio = pcd_convenio
               AND convenio.cd_convenio = empresa_convenio.cd_convenio
               AND empresa_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR cvalotesatuais(vcdprofat IN VARCHAR2) IS
        SELECT vl_unitario, vl_total_conta, vl_desconto, vl_acrescimo
          FROM dbamv.itreg_fat_espelho
         WHERE cd_reg_fat = pcd_reg_fat AND cd_pro_fat = vcdprofat;
      CURSOR cseqaud IS
        SELECT dbamv.seq_auditoria_conta.NEXTVAL
          FROM SYS.DUAL;
      CURSOR cdadosconta IS
        SELECT cd_atendimento
             , dt_final
             , sn_conta_calculada
             , sn_fatura_impressa
             , sn_fechada
             , cd_convenio
             , cd_con_pla
          FROM dbamv.reg_fat
         WHERE cd_reg_fat = pcd_reg_fat AND reg_fat.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      ccdadosconta      cdadosconta%ROWTYPE;
      ncdmotivo         NUMBER(3);
      cc_pro_fat        c_pro_fat%ROWTYPE;
      nvlunit           NUMBER;
      nvltot            NUMBER;
      nvldesc           NUMBER;
      nvlacres          NUMBER;
      ncdaud            NUMBER;
    BEGIN
      OPEN c_percente(pcd_convenio);
      FETCH c_percente
       INTO ccd_pro_fat, nvl_percentual;
      IF c_percente%NOTFOUND THEN
        RETURN;
      END IF;
      IF ccd_pro_fat IS NULL OR NVL(nvl_percentual, 0) = 0 THEN
        RETURN;
      END IF;
      nvl_total_conta := pvl_total_conta;
      OPEN c_pro_fat(ccd_pro_fat, pcd_reg_fat);
      FETCH c_pro_fat INTO cc_pro_fat;
      IF pvauditoria = 'A' THEN
        ncdmotivo := NULL;
        OPEN cmotivo;
        FETCH cmotivo
         INTO ncdmotivo;
        CLOSE cmotivo;
        IF ncdmotivo IS NULL THEN
          raise_application_error(-20088, 'Erro: Não há motivo de auditoria cadastrado para a taxa.');
        END IF;
      END IF;
      IF c_pro_fat%FOUND THEN
        nvl_total_conta :=(nvl_total_conta - NVL(cc_pro_fat.vl_total_conta, 0));
        UPDATE dbamv.itreg_fat_espelho
           SET vl_unitario = (NVL(nvl_total_conta, 0) * nvl_percentual) / 100
             , vl_total_conta = (NVL(nvl_total_conta, 0) * nvl_percentual) / 100
         WHERE itreg_fat_espelho.cd_reg_fat = pcd_reg_fat AND itreg_fat_espelho.cd_pro_fat = ccd_pro_fat;
        IF pvauditoria = 'A' THEN
          nvlunit := 0;
          nvltot := 0;
          nvldesc := 0;
          nvlacres := 0;
          OPEN cvalotesatuais(cc_pro_fat.cd_pro_fat);
          FETCH cvalotesatuais INTO nvlunit, nvltot, nvldesc, nvlacres;
          CLOSE cvalotesatuais;
          ncdaud := NULL;
          OPEN cseqaud;
          FETCH cseqaud
           INTO ncdaud;
          IF cseqaud%NOTFOUND THEN
            raise_application_error(-20009, 'Erro Interno: Nenhuma linha na tabela SYS.DUAL');
          END IF;
          CLOSE cseqaud;
          INSERT INTO dbamv.auditoria_conta
                      (
                       cd_auditoria_conta, dt_auditoria, cd_motivo_auditoria, cd_usuario_aud
                     , cd_reg_fat, cd_lancamento_fat, cd_atendimento
                     , cd_convenio, cd_con_pla, cd_gru_fat
                     , cd_pro_fat, dt_lancamento, hr_lancamento
                     , cd_setor, sn_fechada, sn_fatura_impressa
                     , sn_conta_calculada, vl_percentual_multipla
                     , vl_percentual_multipla_ant
                     , vl_total_conta
                     , vl_total_conta_ant, vl_unitario
                     , vl_unitario_ant, vl_acrescimo
                     , vl_acrescimo_ant, vl_desconto
                     , vl_desconto_ant, qt_lancamento_ant
                     , qt_lancamento, sn_acordo, sn_paciente_paga, tp_mvto
                     , tp_pagamento, sn_pertence_pacote)
               VALUES (
                       ncdaud, SYSDATE, ncdmotivo, USER
                     , pcd_reg_fat, cc_pro_fat.cd_lancamento, cc_pro_fat.cd_atendimento
                     , cc_pro_fat.cd_convenio, cc_pro_fat.cd_con_pla, cc_pro_fat.cd_gru_fat
                     , cc_pro_fat.cd_pro_fat, cc_pro_fat.dt_lancamento, cc_pro_fat.hr_lancamento
                     , cc_pro_fat.cd_setor, cc_pro_fat.sn_fechada, cc_pro_fat.sn_fatura_impressa
                     , cc_pro_fat.sn_conta_calculada, cc_pro_fat.vl_percentual_multipla
                     , cc_pro_fat.vl_percentual_multipla
                     , nvltot
                     , cc_pro_fat.vl_total_conta
                     , nvlunit
                     , cc_pro_fat.vl_unitario
                     , nvlacres
                     , cc_pro_fat.vl_acrescimo
                     , nvldesc
                     , cc_pro_fat.vl_desconto
                     , cc_pro_fat.qt_lancamento
                     , cc_pro_fat.qt_lancamento
                     , 'S', 'N', 'Taxa'
                     , cc_pro_fat.tp_pagamento, cc_pro_fat.sn_pertence_pacote);
        END IF;
      ELSE
        SELECT dbamv.pack_ffcv_espelho.fnc_obtem_sequencia(pcd_reg_fat, 'H')
          INTO ncd_lancamento
          FROM DUAL;
        OPEN c_grufat(ccd_pro_fat);
        FETCH c_grufat
         INTO ncd_gru_fat, ncd_setor;
        CLOSE c_grufat;
        IF NVL(ncd_gru_fat, 0) = 0 OR NVL(ncd_setor, 0) = 0 THEN
          RETURN;
        END IF;
        OPEN cdadosconta;
        FETCH cdadosconta
         INTO ccdadosconta;
        CLOSE cdadosconta;
        BEGIN
          INSERT INTO dbamv.itreg_fat_espelho
                      (
                       cd_reg_fat, cd_pro_fat, cd_lancamento
                     , dt_lancamento, hr_lancamento, qt_lancamento, vl_percentual_multipla
                     , sn_pertence_pacote, cd_gru_fat, cd_setor, vl_unitario
                     , vl_total_conta, tp_pagamento
                     , tp_mvto)
               VALUES (
                       pcd_reg_fat, ccd_pro_fat, ncd_lancamento
                     , NVL(ccdadosconta.dt_final, SYSDATE)
                     , NVL(ccdadosconta.dt_final, SYSDATE)
                     , 1, 100
                     , 'N', ncd_gru_fat, ncd_setor, (nvl_total_conta * nvl_percentual) / 100
                     , (nvl_total_conta * nvl_percentual) / 100, 'P'
                     , DECODE(pvauditoria, 'A', 'Auditoria', 'Taxa')
                      );
          IF pvauditoria = 'A' THEN
            ncdaud := NULL;
            OPEN cseqaud;
            FETCH cseqaud
             INTO ncdaud;
            IF cseqaud%NOTFOUND THEN
              raise_application_error(-20009, 'Erro Interno: Nenhuma linha na tabela SYS.DUAL');
            END IF;
            CLOSE cseqaud;
            INSERT INTO dbamv.auditoria_conta
                        (
                         cd_auditoria_conta, dt_auditoria, cd_motivo_auditoria, cd_usuario_aud
                       , cd_reg_fat, cd_lancamento_fat, cd_atendimento
                       , cd_convenio, cd_con_pla, cd_gru_fat
                       , cd_pro_fat, dt_lancamento, hr_lancamento, cd_setor
                       , sn_fechada, sn_fatura_impressa
                       , sn_conta_calculada, vl_percentual_multipla
                       , vl_percentual_multipla_ant
                       , vl_total_conta
                       , vl_total_conta_ant
                       , vl_unitario
                       , vl_unitario_ant, qt_lancamento_ant, qt_lancamento, sn_acordo
                       , sn_paciente_paga, tp_mvto, tp_pagamento, sn_pertence_pacote)
                 VALUES (
                         ncdaud, SYSDATE, ncdmotivo, USER
                       , pcd_reg_fat, ncd_lancamento, ccdadosconta.cd_atendimento
                       , ccdadosconta.cd_convenio, ccdadosconta.cd_con_pla, ncd_gru_fat
                       , ccd_pro_fat, NVL(ccdadosconta.dt_final, SYSDATE), SYSDATE, ncd_setor
                       , ccdadosconta.sn_fechada, ccdadosconta.sn_fatura_impressa
                       , ccdadosconta.sn_conta_calculada, 100
                       , 100
                       , (nvl_total_conta * nvl_percentual) / 100
                       , 0
                       , (nvl_total_conta * nvl_percentual) / 100
                       , 0
                          , 0
                             , 1
                                , 'S'
                       , 'N', 'Taxa', 'P', 'N');
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            RAISE;
        END;
      END IF;
    END;
  END;
  PROCEDURE prc_regra_perc_sd(
    vlanc      IN      VARCHAR2
  , ctpconta   IN      CHAR
  , ncdregra   IN      NUMBER
  , ncdregfat  IN      NUMBER
  , ntotconta  IN OUT  NUMBER) IS
   cursor cValoresCalculadosRegFat(pnCdRegFat in number, pnCdLancamento in number)  is
    select  vl_honorario_unitario
          , vl_operacional_unitario
          , vl_total_conta
          , vl_unitario
          , vl_filme_unitario
          , qt_lancamento
      from dbamv.itreg_fat_espelho
     where itreg_fat_espelho.cd_reg_fat = pnCdRegFat
       and itreg_fat_espelho.cd_lancamento = pnCdLancamento;
   cursor cValoresCalculadosRegAmb(pnCdRegAmb in number, pnCdLancamento in number)  is
      select vl_honorario_unitario
            , vl_operacional_unitario
            , vl_total_conta
            , vl_unitario
            , vl_filme_unitario
            , qt_lancamento
        from dbamv.itreg_amb_espelho
       where itreg_amb_espelho.cd_reg_amb = pnCdRegAmb
         and itreg_amb_espelho.cd_lancamento = pnCdLancamento;
   cursor cRegraSD (pnCdRegraPercentualSD in number) is
    select regra_percentual_sd.perc_2_lanc
           ,regra_percentual_sd.perc_outros_lanc
           ,regra_percentual_sd.tp_valor_base
      from dbamv.regra_percentual_sd
     where regra_percentual_sd.cd_regra_percentual_sd = pnCdRegraPercentualSD;
  BEGIN
    IF vlanc IS NOT NULL THEN
      DECLARE
        TYPE rregistro IS RECORD(
          cd_lancamento   NUMBER
        , vl_total_conta  NUMBER
        , cd_regra_sd     NUMBER
        , dt_atendimento  DATE
        );
        TYPE ttabela IS TABLE OF rregistro
          INDEX BY BINARY_INTEGER;
        nindex        BINARY_INTEGER;
        tlancamentos  ttabela;
        nauxdata      DATE;
        nauxregr      NUMBER;
        nranking      NUMBER;
        npct2lanc     NUMBER;
        npctnlanc     NUMBER;
        vtpvlbase     VARCHAR2(1);
        vsql          VARCHAR2(2000);
        vcodigos      VARCHAR(10000) := vlanc;
        nnewpct       NUMBER;
        nhonorario    NUMBER;
        noperacional  NUMBER;
        ntotal        NUMBER;
        nunitario     NUMBER;
        nvlfilme      NUMBER;
        nqtd          NUMBER;
        nnewhono      NUMBER;
        nnewoper      NUMBER;
        nnewunit      NUMBER;
        TYPE newcursor IS REF CURSOR;
        citensregra   newcursor;
      BEGIN
        nindex := 0;
        vcodigos := SUBSTR(vcodigos, 1,(LENGTH(vcodigos) - 1));
        IF ctpconta = 'I' THEN
          vsql :=
            'SELECT itreg_fat_espelho.CD_LANCAMENTO
                                 , itreg_fat_espelho.VL_UNITARIO
                                 , trunc(itreg_fat_espelho.DT_LANCAMENTO)
                                 , dbamv.pack_ffcv_espelho.FNC_RETORNA_PERC_SD( itreg_fat_espelho.CD_PRO_FAT
                                                                      , nvl(:A, REG_FAT.CD_REGRA)
                                                                      , itreg_fat_espelho.DT_LANCAMENTO ) CD_REGRA_SD
                              FROM DBAMV.itreg_fat_espelho
                                 , DBAMV.REG_FAT
                             WHERE REG_FAT.CD_REG_FAT      = itreg_fat_espelho.CD_REG_FAT
                               AND itreg_fat_espelho.CD_REG_FAT    = :B
                               AND itreg_fat_espelho.CD_LANCAMENTO in('
            || vcodigos || ')
                             ORDER BY 3, 4, 2 desc';
        ELSE
          vsql :=
            'SELECT itreg_amb_espelho.CD_LANCAMENTO
                                 , itreg_amb_espelho.VL_UNITARIO
                                 , ATENDIME.DT_ATENDIMENTO
                                 , dbamv.pack_ffcv_espelho.FNC_RETORNA_PERC_SD( itreg_amb_espelho.CD_PRO_FAT
                                                                      , :A
                                                                      , ATENDIME.DT_ATENDIMENTO ) CD_REGRA_SD
                              FROM DBAMV.itreg_amb_espelho
                                 , DBAMV.ATENDIME
                             WHERE ATENDIME.CD_ATENDIMENTO = itreg_amb_espelho.CD_ATENDIMENTO
                               AND Atendime.cd_multi_empresa = Dbamv.pkg_mv2000.le_empresa
                               AND itreg_amb_espelho.CD_REG_AMB    = :B
                               AND itreg_amb_espelho.CD_LANCAMENTO in('
            || vcodigos || ')
                             ORDER BY 3, 4, 2 desc';
        END IF;
        tlancamentos.DELETE;
        OPEN citensregra FOR vsql USING ncdregra, ncdregfat;
        LOOP
          nindex := nindex + 1;
          FETCH citensregra
           INTO tlancamentos(nindex).cd_lancamento
              , tlancamentos(nindex).vl_total_conta
              , tlancamentos(nindex).dt_atendimento
              , tlancamentos(nindex).cd_regra_sd;
          EXIT WHEN citensregra%NOTFOUND;
        END LOOP;
        CLOSE citensregra;
        nindex := 1;
        nranking := 1;
        WHILE(nindex <= tlancamentos.COUNT) LOOP
          nauxdata := tlancamentos(nindex).dt_atendimento;
          nauxregr := tlancamentos(nindex).cd_regra_sd;
          WHILE (nindex <= tlancamentos.COUNT) AND(nauxdata = tlancamentos(nindex).dt_atendimento)
                AND(NVL(nauxregr, 0) = NVL(tlancamentos(nindex).cd_regra_sd, 0)) LOOP
            IF ctpconta = 'I' THEN
              open  cValoresCalculadosRegFat(ncdregfat, tlancamentos(nindex).cd_lancamento);
              fetch cValoresCalculadosRegFat into nhonorario, noperacional, ntotal, nunitario, nvlfilme, nqtd;
              close cValoresCalculadosRegFat;
            ELSE
               open  cValoresCalculadosRegAmb(ncdregfat, tlancamentos(nindex).cd_lancamento);
               fetch cValoresCalculadosRegAmb into nhonorario, noperacional, ntotal, nunitario, nvlfilme, nqtd;
               close cValoresCalculadosRegAmb;
            END IF;
            open  cRegraSD(tlancamentos(nindex).cd_regra_sd);
            fetch cRegraSD into npct2lanc, npctnlanc, vtpvlbase;
            close cRegraSD;
            IF nranking = 1 THEN
              nnewpct := 100;
            ELSIF nranking = 2 THEN
              nnewpct := npct2lanc;
            ELSIF nranking > 2 THEN
              nnewpct := npctnlanc;
            END IF;
            nnewhono := nhonorario;
            IF vtpvlbase = 'H' OR vtpvlbase = 'T' THEN
              nnewhono :=((nhonorario * nnewpct) / 100);
            END IF;
            nnewoper := noperacional;
            IF vtpvlbase = 'O' OR vtpvlbase = 'T' THEN
              nnewoper :=((noperacional * nnewpct) / 100);
            END IF;
            nnewunit :=((nunitario * nnewpct) / 100);
            IF ctpconta = 'I' THEN
              UPDATE dbamv.itreg_fat_espelho
                 SET vl_percentual_multipla = nnewpct
                   , vl_honorario_unitario = nnewhono
                   , vl_operacional_unitario = nnewoper
                   , vl_unitario = nnewunit
                   , vl_total_conta = (nnewhono + nnewoper + nvlfilme) * nqtd - (vl_desconto * nnewpct) / 100  + (vl_acrescimo * nnewpct) / 100
                   , vl_desconto = (vl_desconto * nnewpct) / 100
                   , vl_acrescimo = (vl_acrescimo * nnewpct) / 100
              WHERE  itreg_fat_espelho.cd_reg_fat = ncdregfat
                     AND itreg_fat_espelho.cd_lancamento = tlancamentos(nindex).cd_lancamento;
            ELSE
              UPDATE dbamv.itreg_amb_espelho
                 SET vl_percentual_multipla = nnewpct
                   , vl_honorario_unitario = nnewhono
                   , vl_operacional_unitario = nnewoper
                   , vl_unitario = nnewunit
                   , vl_total_conta = (nnewhono + nnewoper + nvlfilme) * nqtd - (vl_desconto * nnewpct) / 100 + (vl_acrescimo * nnewpct) / 100
                   , vl_desconto = (vl_desconto * nnewpct) / 100
                   , vl_acrescimo = (vl_acrescimo * nnewpct) / 100
              WHERE  itreg_amb_espelho.cd_reg_amb = ncdregfat
                     AND itreg_amb_espelho.cd_lancamento = tlancamentos(nindex).cd_lancamento;
            END IF;
            nranking := nranking + 1;
            nindex := nindex + 1;
          END LOOP;
          nranking := 1;
        END LOOP;
      END;
      IF ctpconta = 'I' THEN
        SELECT SUM(itreg_fat_espelho.vl_total_conta)
          INTO ntotconta
          FROM dbamv.itreg_fat_espelho
         WHERE itreg_fat_espelho.cd_reg_fat = ncdregfat AND NVL(itreg_fat_espelho.sn_pertence_pacote, 'N') = 'N';
      ELSE
        SELECT SUM(itreg_amb_espelho.vl_total_conta)
          INTO ntotconta
          FROM dbamv.itreg_amb_espelho
         WHERE itreg_amb_espelho.cd_reg_amb = ncdregfat AND NVL(itreg_amb_espelho.sn_pertence_pacote, 'N') = 'N';
      END IF;
    END IF;
  END;
PROCEDURE AJUSTA_VALOR ( pnCd_Conta in number
							  ,pbNaoDestacar in boolean default false
							  ,pnPercAcre in number default null
                              ,pnPercDesc in number default null
                              ,pnCdLancamento in number default null) is
  --
  Cursor c_lancamentos is
   Select itreg_fat_espelho.cd_lancamento,
          nvl(vl_desconto,0)    vl_desconto,
          nvl(vl_acrescimo,0)   vl_acrescimo,
          nvl(vl_desconto_conta,0) vl_desconto_conta,
          qt_lancamento,
          vl_unitario,
          vl_total_conta
    from dbamv.itreg_fat_espelho
    where cd_reg_fat = pnCd_Conta
      and cd_lancamento in ( select cd_lancamento from dbamv.itlan_med_espelho
                              where cd_reg_fat = pnCd_Conta
                                and cd_lancamento = nvl(pnCdLancamento, cd_lancamento) );
  --
  Cursor C_lan_med (planc in number)is
   Select vl_ato, vl_desconto_conta , vl_desconto, vl_acrescimo ,cd_ati_med
         ,tp_pagamento
     from dbamv.itlan_med_espelho
    where cd_reg_fat  = pnCd_Conta
      and cd_lancamento = planc
      and nvl(vl_ato,0) > 0;
  --
  cursor cConfConvTrunca is
    select valor
      from dbamv.configuracao
     where cd_sistema = 'FFCV'
       and cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
       and chave = 'CD_CONV_NAO_ARREDONDA_VALOR';
  --
  cursor cConvConta is
    select reg_fat.cd_convenio
      from dbamv.reg_fat
     where reg_fat.cd_reg_fat = pnCd_Conta;
  --
  VvlBruto                      Number := 0;
  Vvl_desconto                  Number := 0;
  Vvl_acrescimo                 Number := 0;
  Vvl_desconto_conta            Number := 0;
  nVl_Ato 		                number := 0;
  nVl_Liquido 	                number := 0;
  nVlDescAcumulado              number := 0;
  vConfConvTrunca               dbamv.configuracao.valor%type;
  vTruncaValor                  varchar2(01) := 'N';
  nCdConvenio                   dbamv.reg_fat.cd_convenio%type;
  --
Begin
  vConfConvTrunca := null;
  open  cConvConta;
  fetch cConvConta into nCdConvenio;
  close cConvConta;
  --
  open  cConfConvTrunca;
  fetch cConfConvTrunca into vConfConvTrunca;
  close cConfConvTrunca;
  if instr(nvl(vConfConvTrunca,'X'),'TODOS') > 0 then
    vTruncaValor := 'S';
  elsif instr(nvl(vConfConvTrunca,'X'),lpad(nvl(nCdConvenio,9999),4,'0')) > 0 then
    vTruncaValor := 'S';
  else
    vTruncaValor := 'N';
  end if;
  --
  For record_lanc in c_lancamentos loop
     select sum(nvl(itlan_med_espelho.vl_ato,0)*record_lanc.qt_lancamento)
       into VvlBruto
       from dbamv.itlan_med_espelho
      where itlan_med_espelho.cd_reg_fat= pnCd_Conta
        and nvl(tp_pagamento,'P') <> 'C'
        and itlan_med_espelho.cd_lancamento = record_lanc.cd_lancamento;
        For record_med in c_lan_med(record_lanc.cd_lancamento) loop
          if nvl(pnPercDesc,0) = 0  and nvl(record_med.tp_pagamento,'P') <> 'C'
  		  then
             Vvl_acrescimo:= (((record_med.vl_ato*record_lanc.qt_lancamento)/VvlBruto)*record_lanc.vl_acrescimo);
             if vTruncaValor = 'S' then
               Vvl_desconto:= trunc(round((((record_med.vl_ato*record_lanc.qt_lancamento)/VvlBruto)*record_lanc.vl_desconto),4),2);
               Vvl_desconto_conta:= trunc(round((((record_med.vl_ato*record_lanc.qt_lancamento)/VvlBruto)*record_lanc.vl_desconto_conta),4),2);
             else
               Vvl_desconto:= round((((record_med.vl_ato*record_lanc.qt_lancamento)/VvlBruto)*record_lanc.vl_desconto),2);
               Vvl_desconto_conta:= round((((record_med.vl_ato*record_lanc.qt_lancamento)/VvlBruto)*record_lanc.vl_desconto_conta),2);
             end if;
          end if;
          nVl_Ato:= record_med.vl_ato;
          if nvl(record_med.tp_pagamento,'P') <> 'C' then
            if vTruncaValor = 'S' then
              nVl_Liquido := trunc(round(((nVl_Ato*record_lanc.qt_lancamento) - Vvl_desconto + Vvl_acrescimo),4),2);
            else
              nVl_Liquido := round(((nVl_Ato*record_lanc.qt_lancamento) - Vvl_desconto + Vvl_acrescimo),2);
            end if;
       	    if nvl(pnPercAcre,0) > 0 then
              if vTruncaValor = 'S' then
                if pbNaoDestacar then
                  nVl_Ato      := nVl_Ato + trunc(round((nVl_Ato*pnPercAcre)/100,4),2);
                  nVl_Liquido  := nVl_Ato * record_lanc.qt_lancamento;
		          Vvl_acrescimo:= 0;
                else
                  Vvl_acrescimo:= trunc(round(((nVl_Ato*record_lanc.qt_lancamento*pnPercAcre)/100),4),2);
                  nVl_Liquido  := trunc(round(((nVl_Ato*record_lanc.qt_lancamento) - Vvl_desconto + Vvl_acrescimo),4),2);
                end if;
              else
                if pbNaoDestacar then
                  nVl_Ato      := nVl_Ato + round((nVl_Ato*pnPercAcre)/100,2);
                  nVl_Liquido  := nVl_Ato * record_lanc.qt_lancamento;
  		          Vvl_acrescimo:= 0;
                else
                  Vvl_acrescimo:= round(((nVl_Ato*record_lanc.qt_lancamento*pnPercAcre)/100),2);
                  nVl_Liquido  := round(((nVl_Ato*record_lanc.qt_lancamento) - Vvl_desconto + Vvl_acrescimo),2);
                end if;
              end if;
            else
               Vvl_acrescimo:= 0;
            end if;
            if nvl(pnPercDesc,0) > 0 then
              if vTruncaValor = 'S' then
                if pbNaoDestacar then
                  nVl_Ato           := nVl_Ato - trunc(round((nVl_Ato*pnPercDesc)/100,4),2);
                  nVl_Liquido       := nVl_Ato * record_lanc.qt_lancamento;
                  Vvl_desconto      := 0;
                else
                  Vvl_desconto:= trunc(round(((nVl_Ato*record_lanc.qt_lancamento*pnPercDesc)/100),4),2);
                  nVl_Liquido := trunc(round(((nVl_Ato*record_lanc.qt_lancamento) - Vvl_desconto + Vvl_acrescimo),4),2);
                end if;
              else
                if pbNaoDestacar then
                  nVl_Ato           := nVl_Ato - round((nVl_Ato*pnPercDesc)/100,2);
                  nVl_Liquido       := nVl_Ato * record_lanc.qt_lancamento;
                  Vvl_desconto      := 0;
                else
                  Vvl_desconto:= round(((nVl_Ato*record_lanc.qt_lancamento*pnPercDesc)/100),2);
                  nVl_Liquido := round(((nVl_Ato*record_lanc.qt_lancamento) - Vvl_desconto + Vvl_acrescimo),2);
                end if;
              end if;
            else
                Vvl_desconto      := 0;
            end if;
         else
           if vTruncaValor = 'S' then
             nVl_Liquido	 := trunc(round((nVl_Ato*record_lanc.qt_lancamento),4),2);
           else
             nVl_Liquido	 := round((nVl_Ato*record_lanc.qt_lancamento),2);
           end if;
           Vvl_acrescimo:= 0;
           Vvl_desconto := 0;
         end if;
         Begin
            nVlDescAcumulado := nVlDescAcumulado + Vvl_desconto;
            update dbamv.itlan_med_espelho
               set vl_desconto = Vvl_desconto,
                   vl_acrescimo = Vvl_acrescimo,
                   vl_liquido = nVl_Liquido
             where cd_reg_fat = pnCd_Conta
               and nvl(vl_ato,0) > 0
               and cd_lancamento = record_lanc.cd_lancamento
               and cd_ati_med = record_med.cd_ati_med;
            update dbamv.itlan_med_espelho
               set vl_desconto_conta = Vvl_desconto_conta
             where cd_reg_fat = pnCd_Conta
               and nvl(vl_ato,0) > 0
               and cd_lancamento = record_lanc.cd_lancamento
               and cd_ati_med = record_med.cd_ati_med
               and nvl(tp_pagamento,'P') <> 'C';
            update dbamv.itlan_med_espelho
               set vl_ato = nVl_Ato
             where cd_reg_fat   = pnCd_Conta
               and cd_lancamento= record_lanc.cd_lancamento
               and cd_ati_med   = record_med.cd_ati_med;
         Exception
           when others then
            raise_application_error(-20007,'Erro ao atualizar item de equipe médica. '||sqlerrm);
         End;
        End Loop;
  End loop;
  Begin
       update dbamv.itlan_med_espelho
         set  vl_liquido = 0
        where cd_reg_fat = pnCd_Conta
          and vl_ato=0
          and nvl(tp_pagamento,'P') = 'P';
  Exception
       when others then
         raise_application_error(-20007,'Erro ao atualizar item de equipe médica. '||sqlerrm);
  End;
End;
  PROCEDURE prc_reg_amb_insere_acrescimo(
    pcd_reg_amb      IN  NUMBER
  , pcd_convenio     IN  NUMBER
  , pvl_total_conta  IN  NUMBER DEFAULT 0
  , pvauditoria      IN  VARCHAR2 DEFAULT NULL) IS
  BEGIN
    DECLARE
      CURSOR c_percente(p_cd_convenio IN NUMBER) IS
        SELECT convenio.cd_pro_fat, convenio.vl_percentual
          FROM dbamv.convenio
             , dbamv.empresa_convenio
         WHERE convenio.cd_convenio = p_cd_convenio
               AND convenio.cd_convenio = empresa_convenio.cd_convenio
               AND empresa_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_pro_fat(pcd_pro_fat IN VARCHAR, p_cd_reg_amb IN NUMBER) IS
        SELECT itreg_amb_espelho.cd_pro_fat
             , itreg_amb_espelho.vl_total_conta
             , itreg_amb_espelho.cd_atendimento
             , itreg_amb_espelho.cd_lancamento
             , itreg_amb_espelho.cd_convenio
             , itreg_amb_espelho.cd_con_pla
             , itreg_amb_espelho.hr_lancamento
             , itreg_amb_espelho.qt_lancamento
             , itreg_amb_espelho.vl_percentual_multipla
             , itreg_amb_espelho.sn_pertence_pacote
             , itreg_amb_espelho.sn_fechada
             , itreg_amb_espelho.sn_fatura_impressa
             , itreg_amb_espelho.sn_conta_calculada
             , itreg_amb_espelho.cd_gru_fat
             , itreg_amb_espelho.cd_setor
             , itreg_amb_espelho.vl_unitario
             , itreg_amb_espelho.vl_acrescimo
             , itreg_amb_espelho.vl_desconto
             , itreg_amb_espelho.cd_setor_produziu
             , itreg_amb_espelho.tp_pagamento
             , itreg_amb_espelho.cd_prestador
             , itreg_amb_espelho.cd_mvto
             , itreg_amb_espelho.tp_mvto
             , atendime.dt_atendimento
        FROM   dbamv.itreg_amb_espelho
             , dbamv.atendime
         WHERE itreg_amb_espelho.cd_pro_fat = pcd_pro_fat AND itreg_amb_espelho.cd_reg_amb = p_cd_reg_amb
               AND atendime.cd_atendimento = itreg_amb_espelho.cd_atendimento
               AND atendime.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_grufat(pcd_pro_fat IN VARCHAR) IS
        SELECT gru_pro.cd_gru_fat cd_gru_fat, setor_gru_fat.cd_setor cd_setor
          FROM dbamv.gru_pro
             , dbamv.pro_fat
             , dbamv.setor_gru_fat
         WHERE pro_fat.cd_pro_fat = pcd_pro_fat AND pro_fat.cd_gru_pro = gru_pro.cd_gru_pro
               AND gru_pro.cd_gru_fat = setor_gru_fat.cd_gru_fat;
      CURSOR c_itreg_amb(p_cd_reg_amb IN NUMBER) IS
        SELECT   cd_atendimento, cd_convenio, cd_con_pla, sn_fatura_impressa,sn_fechada
        FROM     dbamv.itreg_amb_espelho
       WHERE itreg_amb_espelho.cd_reg_amb = p_cd_reg_amb
        ORDER BY itreg_amb_espelho.sn_fechada DESC;
      CURSOR cseqaud IS
        SELECT dbamv.seq_auditoria_conta.NEXTVAL
          FROM SYS.DUAL;
      CURSOR cvalotesatuais(vcdprofat IN VARCHAR2, ncdatend IN NUMBER) IS
        SELECT vl_unitario, vl_total_conta, vl_desconto, vl_acrescimo
          FROM dbamv.itreg_amb_espelho
         WHERE cd_reg_amb = pcd_reg_amb AND cd_pro_fat = vcdprofat;
      CURSOR cmotivo IS
        SELECT cd_motivo_auditoria
          FROM dbamv.convenio
             , dbamv.empresa_convenio
         WHERE convenio.cd_convenio = pcd_convenio
               AND convenio.cd_convenio = empresa_convenio.cd_convenio
               AND empresa_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      ncdaud               dbamv.auditoria_conta.cd_auditoria_conta%TYPE;
      cc_pro_fat           c_pro_fat%ROWTYPE;
      nvlunit              NUMBER;
      nvltot               NUMBER;
      nvldesc              NUMBER;
      nvlacres             NUMBER;
      ncdmotivo            NUMBER(3);
      ccd_pro_fat          dbamv.convenio.cd_pro_fat%TYPE;
      nvl_percentual       dbamv.convenio.vl_percentual%TYPE;
      ccd_pro_fat2         dbamv.itreg_amb_espelho.cd_pro_fat%TYPE;
      nvl_total_conta2     dbamv.itreg_amb_espelho.vl_total_conta%TYPE;
      ncd_convenio2        dbamv.itreg_amb_espelho.cd_convenio%TYPE;
      ncd_atendimento      dbamv.itreg_amb_espelho.cd_atendimento%TYPE;
      ncd_convenio         dbamv.itreg_amb_espelho.cd_convenio%TYPE;
      ncd_con_pla          dbamv.itreg_amb_espelho.cd_con_pla%TYPE;
      csn_fatura_impressa  dbamv.itreg_amb_espelho.sn_fatura_impressa%TYPE;
      vsn_fechada          dbamv.itreg_amb_espelho.sn_fechada%TYPE;
      ncd_lancamento       NUMBER;
      ncd_gru_fat          NUMBER;
      ncd_setor            NUMBER;
      nvl_conta            NUMBER;
      nvl_total_conta      NUMBER;
    BEGIN
      OPEN c_percente(pcd_convenio);
      FETCH c_percente
       INTO ccd_pro_fat, nvl_percentual;
      IF c_percente%NOTFOUND THEN
        RETURN;
      END IF;
      IF ccd_pro_fat IS NULL OR NVL(nvl_percentual, 0) = 0 THEN
        RETURN;
      END IF;
      nvl_total_conta := pvl_total_conta;
      OPEN c_pro_fat(ccd_pro_fat, pcd_reg_amb);
      FETCH c_pro_fat
       INTO cc_pro_fat;
      IF pvauditoria = 'A' THEN
        ncdmotivo := NULL;
        OPEN cmotivo;
        FETCH cmotivo
         INTO ncdmotivo;
        CLOSE cmotivo;
        IF ncdmotivo IS NULL THEN
          raise_application_error(-20088
          , 'Erro: Não há motivo de auditoria cadastrado para a taxa.');
        END IF;
      END IF;
      IF c_pro_fat%FOUND THEN
        nvl_total_conta :=(nvl_total_conta - NVL(cc_pro_fat.vl_total_conta, 0));
        IF cc_pro_fat.sn_fechada = 'S' THEN
          UPDATE dbamv.itreg_amb_espelho
             SET sn_fechada = 'N'
               , vl_unitario = (NVL(nvl_total_conta, 0) * nvl_percentual) / 100
               , vl_total_conta = (NVL(nvl_total_conta, 0) * nvl_percentual) / 100
           WHERE itreg_amb_espelho.cd_reg_amb = pcd_reg_amb AND itreg_amb_espelho.cd_pro_fat = ccd_pro_fat;
          UPDATE dbamv.itreg_amb_espelho
             SET sn_fechada = 'S'
           WHERE itreg_amb_espelho.cd_reg_amb = pcd_reg_amb AND itreg_amb_espelho.cd_pro_fat = ccd_pro_fat;
        ELSE
          UPDATE dbamv.itreg_amb_espelho
             SET vl_unitario = (NVL(nvl_total_conta, 0) * nvl_percentual) / 100
               , vl_total_conta = (NVL(nvl_total_conta, 0) * nvl_percentual) / 100
           WHERE itreg_amb_espelho.cd_reg_amb = pcd_reg_amb AND itreg_amb_espelho.cd_pro_fat = ccd_pro_fat;
        END IF;
        IF pvauditoria = 'A' THEN
          nvlunit := 0;
          nvltot := 0;
          nvldesc := 0;
          nvlacres := 0;
          OPEN cvalotesatuais(cc_pro_fat.cd_pro_fat, cc_pro_fat.cd_atendimento);
          FETCH cvalotesatuais INTO nvlunit, nvltot, nvldesc, nvlacres;
          CLOSE cvalotesatuais;
          ncdaud := NULL;
          OPEN cseqaud;
          FETCH cseqaud
           INTO ncdaud;
          IF cseqaud%NOTFOUND THEN
            raise_application_error(-20009, 'Erro Interno: Nenhuma linha na tabela SYS.DUAL');
          END IF;
          CLOSE cseqaud;
          INSERT INTO dbamv.auditoria_conta
                      (
                       cd_auditoria_conta, dt_auditoria, cd_motivo_auditoria, cd_usuario_aud
                     , cd_reg_amb, cd_lancamento_amb, cd_atendimento
                     , cd_convenio, cd_con_pla, cd_gru_fat
                     , cd_pro_fat, dt_lancamento, hr_lancamento
                     , cd_setor, cd_prestador, sn_fechada
                     , sn_fatura_impressa, sn_conta_calculada
                     , vl_percentual_multipla, vl_percentual_multipla_ant
                     , vl_total_conta
                     , vl_total_conta_ant, vl_unitario
                     , vl_unitario_ant, vl_acrescimo
                     , vl_acrescimo_ant, vl_desconto
                     , vl_desconto_ant, qt_lancamento_ant
                     , qt_lancamento, sn_acordo, sn_paciente_paga, tp_mvto
                     , tp_pagamento, sn_pertence_pacote)
               VALUES (
                       ncdaud, SYSDATE, ncdmotivo, USER
                     , pcd_reg_amb, cc_pro_fat.cd_lancamento, cc_pro_fat.cd_atendimento
                     , cc_pro_fat.cd_convenio, cc_pro_fat.cd_con_pla, cc_pro_fat.cd_gru_fat
                     , cc_pro_fat.cd_pro_fat, cc_pro_fat.dt_atendimento, cc_pro_fat.hr_lancamento
                     , cc_pro_fat.cd_setor, cc_pro_fat.cd_prestador, cc_pro_fat.sn_fechada
                     , cc_pro_fat.sn_fatura_impressa, cc_pro_fat.sn_conta_calculada
                     , cc_pro_fat.vl_percentual_multipla, cc_pro_fat.vl_percentual_multipla
                     , nvltot
                     , cc_pro_fat.vl_total_conta
                     , nvlunit
                     , cc_pro_fat.vl_unitario
                     , nvlacres
                     , cc_pro_fat.vl_acrescimo
                     , nvldesc
                     , cc_pro_fat.vl_desconto
                     , cc_pro_fat.qt_lancamento
                     , cc_pro_fat.qt_lancamento
                     , 'S', 'N', 'Taxa'
                     , cc_pro_fat.tp_pagamento, cc_pro_fat.sn_pertence_pacote);
        END IF;
      ELSE
        SELECT MAX(NVL(cd_lancamento, 0)) + 1
          INTO ncd_lancamento
          FROM dbamv.itreg_amb_espelho
         WHERE cd_reg_amb = pcd_reg_amb;
        OPEN c_itreg_amb(pcd_reg_amb);
        FETCH c_itreg_amb
         INTO ncd_atendimento, ncd_convenio, ncd_con_pla, csn_fatura_impressa, vsn_fechada;
        CLOSE c_itreg_amb;
        OPEN c_grufat(ccd_pro_fat);
        FETCH c_grufat
         INTO ncd_gru_fat, ncd_setor;
        CLOSE c_grufat;
        IF NVL(ncd_gru_fat, 0) = 0 OR NVL(ncd_setor, 0) = 0 THEN
          RETURN;
        END IF;
        BEGIN
          INSERT INTO dbamv.itreg_amb_espelho
                      (
                       cd_reg_amb, cd_pro_fat, cd_lancamento, cd_atendimento, cd_convenio
                     , cd_con_pla, hr_lancamento, qt_lancamento, vl_percentual_multipla
                     , sn_pertence_pacote, sn_fechada, sn_fatura_impressa, sn_conta_calculada
                     , cd_gru_fat, cd_setor, vl_unitario
                     , vl_total_conta
                     , tp_mvto)
               VALUES (
                       pcd_reg_amb, ccd_pro_fat, ncd_lancamento, ncd_atendimento, ncd_convenio
                     , ncd_con_pla, SYSDATE, 1, 100
                     , 'N'
                     , vsn_fechada
                     , csn_fatura_impressa, 'S'
                     , ncd_gru_fat, ncd_setor, (nvl_total_conta * nvl_percentual) / 100
                     , (nvl_total_conta * nvl_percentual) / 100
                     , DECODE(pvauditoria, 'A', 'Auditoria', 'Taxa')
                );
          IF pvauditoria = 'A' THEN
            ncdaud := NULL;
            OPEN cseqaud;
            FETCH cseqaud
             INTO ncdaud;
            IF cseqaud%NOTFOUND THEN
              raise_application_error(-20009, 'Erro Interno: Nenhuma linha na tabela SYS.DUAL');
            END IF;
            CLOSE cseqaud;
            INSERT INTO dbamv.auditoria_conta
                        (
                         cd_auditoria_conta, dt_auditoria, cd_motivo_auditoria, cd_usuario_aud
                       , cd_reg_amb, cd_lancamento_amb, cd_atendimento, cd_convenio, cd_con_pla
                       , cd_gru_fat, cd_pro_fat, hr_lancamento, cd_setor, sn_fechada
                       , sn_fatura_impressa, sn_conta_calculada, vl_percentual_multipla
                       , vl_percentual_multipla_ant
                       , vl_total_conta
                       , vl_total_conta_ant
                       , vl_unitario
                       , vl_unitario_ant, qt_lancamento_ant, qt_lancamento, sn_acordo
                       , sn_paciente_paga, tp_mvto, tp_pagamento, sn_pertence_pacote)
                 VALUES (
                         ncdaud, SYSDATE, ncdmotivo, USER
                       , pcd_reg_amb, ncd_lancamento, ncd_atendimento, ncd_convenio, ncd_con_pla
                       , ncd_gru_fat, ccd_pro_fat, SYSDATE, ncd_setor, 'N'
                       , csn_fatura_impressa, 'S', 100
                       , 100
                       , (nvl_total_conta * nvl_percentual) / 100
                       , 0
                       , (nvl_total_conta * nvl_percentual) / 100
                       , 0
                       , 0
                       , 1, 'S'
                       , 'N', 'Taxa', 'P', 'N');
          END IF;
        EXCEPTION
          WHEN OTHERS THEN
            RAISE;
        END;
      END IF;
    END;
  END;
  PROCEDURE valores_conta_ambula(
    ncdregamb       IN      NUMBER
  , cmsgerro        IN OUT  VARCHAR2
  , ncdatendimento  IN      NUMBER DEFAULT NULL
  , ncdlanc         IN      NUMBER DEFAULT NULL) IS
  BEGIN
    DECLARE
      CURSOR c_itregamb IS
        SELECT itreg_amb_espelho.cd_lancamento
             , itreg_amb_espelho.hr_lancamento
             , itreg_amb_espelho.qt_lancamento
             , itreg_amb_espelho.cd_pro_fat
             , itreg_amb_espelho.cd_convenio
             , itreg_amb_espelho.cd_con_pla
             , itreg_amb_espelho.cd_ati_med
             , itreg_amb_espelho.vl_percentual_multipla
             , itreg_amb_espelho.sn_pertence_pacote
             , itreg_amb_espelho.sn_fechada
             , itreg_amb_espelho.vl_total_conta
             , itreg_amb_espelho.vl_acrescimo
             , itreg_amb_espelho.vl_desconto
             , itreg_amb_espelho.vl_filme_unitario
             , itreg_amb_espelho.cd_atendimento
             , itreg_amb_espelho.sn_horario_especial
             , itreg_amb_espelho.tp_pagamento
             , atendime.dt_atendimento
             , atendime.tp_atendimento
             , ati_med.tp_funcao
             , gru_pro.tp_gru_pro
             , itreg_amb_espelho.cd_franquia
             , itreg_amb_espelho.vl_percentual_paciente
             , itreg_amb_espelho.cd_reg_amb_pai
             , itreg_amb_espelho.cd_reg_amb_rel
             , itreg_amb_espelho.cd_lancamento_rel
             , itreg_amb_espelho.cd_regra_acoplamento
             , convenio.tp_convenio
             , itreg_amb_espelho.cd_regra_atendimento_pro_fat
             , reg_amb.cd_regra
             , itreg_amb_espelho.cd_prestador cd_prestador
             , itreg_amb_espelho.cd_setor cd_setor
             , reg_amb.cd_multi_empresa cd_multi_empresa
             , pro_fat.sn_calcula_valor sn_calcula_valor
        FROM   dbamv.itreg_amb_espelho
             , dbamv.reg_amb
             , dbamv.atendime
             , dbamv.ati_med
             , dbamv.pro_fat
             , dbamv.gru_pro
             , dbamv.convenio
             , dbamv.regra_atendimento_pro_fat
        WHERE  itreg_amb_espelho.cd_atendimento = NVL(ncdatendimento, itreg_amb_espelho.cd_atendimento)
               AND atendime.cd_atendimento = itreg_amb_espelho.cd_atendimento
               AND reg_amb.cd_multi_empresa = pkg_mv2000.le_empresa
               AND atendime.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
               AND itreg_amb_espelho.cd_reg_amb = ncdregamb AND reg_amb.cd_reg_amb = itreg_amb_espelho.cd_reg_amb
               AND itreg_amb_espelho.cd_convenio = convenio.cd_convenio AND ati_med.cd_ati_med(+) =  itreg_amb_espelho.cd_ati_med
               AND gru_pro.cd_gru_pro = pro_fat.cd_gru_pro
               AND pro_fat.cd_pro_fat = itreg_amb_espelho.cd_pro_fat
               AND DECODE(ncdlanc, NULL, itreg_amb_espelho.cd_lancamento, ncdlanc) = itreg_amb_espelho.cd_lancamento
               AND regra_atendimento_pro_fat.cd_atendimento(+) = atendime.cd_atendimento;
      --
      CURSOR c_existelfa(nconta IN NUMBER, cprofat IN VARCHAR2) IS
        SELECT lfa.cd_log_falha_importacao
          FROM dbamv.log_falha_importacao lfa
         WHERE lfa.cd_reg_amb = nconta AND lfa.cd_pro_fat = cprofat AND lfa.tp_erro = '03'
               AND lfa.tp_importacao = 'Calculo' AND lfa.nm_usuario_baixou IS NULL;
      CURSOR c_itcobpre(nlcto IN NUMBER) IS
        SELECT itcob_pre_ambu_espelho.vl_preco_unitario
          FROM dbamv.itcob_pre_ambu_espelho
         WHERE itcob_pre_ambu_espelho.cd_reg_amb = ncdregamb AND itcob_pre_ambu_espelho.cd_lancamento = nlcto;
      CURSOR c_regrafranquia(nconta IN NUMBER, natend IN NUMBER) IS
        SELECT NVL(reg_amb.cd_regra, empresa_con_pla.cd_regra) cd_regra
             , empresa_con_pla.cd_indice
             , itreg_amb_espelho.cd_convenio
             , itreg_amb_espelho.cd_con_pla
          FROM dbamv.itreg_amb_espelho
             , dbamv.con_pla
             , dbamv.empresa_con_pla
             , dbamv.reg_amb
         WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
               AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
               AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
               AND itreg_amb_espelho.cd_reg_amb = nconta AND itreg_amb_espelho.cd_atendimento = natend
               AND con_pla.cd_convenio = itreg_amb_espelho.cd_convenio
               AND con_pla.cd_con_pla = itreg_amb_espelho.cd_con_pla
               AND reg_amb.cd_reg_amb = itreg_amb_espelho.cd_reg_amb;
      CURSOR c_regraatend(ncdatend IN NUMBER) IS
        SELECT regra_atendimento.cd_regra_atendimento
          FROM dbamv.regra_atendimento
         WHERE regra_atendimento.cd_atendimento = ncdatend;
      CURSOR c_regraatendprofat(ncdatend IN NUMBER) IS
        SELECT regra_atendimento_pro_fat.cd_regra_atendimento_pro_fat
          FROM dbamv.regra_atendimento_pro_fat
         WHERE regra_atendimento_pro_fat.cd_atendimento = ncdatend;
      CURSOR c_valrelacionado_ant(nregra IN NUMBER, cprofat IN VARCHAR2) IS
        SELECT 'x'
          FROM dbamv.val_pro_relacionado
         WHERE val_pro_relacionado.cd_regra = nregra AND val_pro_relacionado.cd_pro_fat = cprofat;
       CURSOR c_valrelacionado(
        nregra         IN  NUMBER
      , dreferencia    IN  DATE
      , hreferencia    IN  DATE
      , cprofat        IN  VARCHAR2
      , ncdatend       IN  NUMBER
      , p_pro_fat_pai  IN  VARCHAR2
      , pCdlancRel     in number default null
      ) IS
        SELECT   val_pro_relacionado.vl_percentual
               , val_pro_relacionado.cd_pro_fat_pai
               , val_pro_relacionado.sn_incidencia_exame
            FROM dbamv.val_pro_relacionado
               , dbamv.itreg_amb_espelho
               , dbamv.itreg_amb_espelho it
           WHERE val_pro_relacionado.cd_regra = nregra AND val_pro_relacionado.cd_pro_fat = cprofat
                 AND val_pro_relacionado.tp_valor = 'P'
                 AND val_pro_relacionado.cd_pro_fat_pai = NVL(p_pro_fat_pai, val_pro_relacionado.cd_pro_fat_pai)
                 AND itreg_amb_espelho.cd_reg_amb = ncdregamb
                 AND TO_CHAR(itreg_amb_espelho.hr_lancamento, 'hh24:mi') = TO_CHAR(hreferencia, 'hh24:mi')
                 AND itreg_amb_espelho.cd_atendimento = ncdatend
                 AND itreg_amb_espelho.cd_pro_fat = val_pro_relacionado.cd_pro_fat_pai
                 --
                 and it.cd_reg_amb = ncdregamb
                 and it.cd_atendimento = ncdatend
                 and it.cd_pro_fat = val_pro_relacionado.cd_pro_fat_pai
                 and  itreg_amb_espelho.cd_lancamento = decode(pCdlancRel,null,itreg_amb_espelho.cd_lancamento,pCdlancRel)
                 AND TRUNC(val_pro_relacionado.dt_vigencia) <= TRUNC(dreferencia)
        ORDER BY val_pro_relacionado.dt_vigencia DESC;
      CURSOR c_regraplano(nconv IN NUMBER, nplano IN NUMBER) IS
        SELECT empresa_con_pla.cd_regra, empresa_con_pla.cd_indice
          FROM dbamv.con_pla
             , dbamv.empresa_con_pla
         WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
               AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
               AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
               AND con_pla.cd_convenio = nconv AND con_pla.cd_con_pla = nplano;
      CURSOR c_percrelac(cprofat IN VARCHAR2) IS
        SELECT vl_percentual_multipla
          FROM dbamv.itreg_amb_espelho
         WHERE cd_reg_amb = ncdregamb AND cd_atendimento = ncdatendimento AND cd_pro_fat = cprofat;
      CURSOR c_config_ffcv IS
        SELECT sn_valores_relacionados, sn_calculo_data_atual, tp_controle_lote
          FROM dbamv.config_ffcv
         WHERE config_ffcv.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_itreg_amb_pai(p_cd_reg_amb_rel IN NUMBER, p_cd_lancamento_rel IN NUMBER) IS
        SELECT cd_pro_fat
          FROM dbamv.itreg_amb_espelho
         WHERE cd_reg_amb = p_cd_reg_amb_rel AND cd_lancamento = p_cd_lancamento_rel;
      CURSOR cfrangrupro(natend IN NUMBER) IS
        SELECT NVL(COUNT(*), 0) total
          FROM dbamv.itreg_amb_espelho itreg_amb_espelho
             , dbamv.franquias franquias
         WHERE itreg_amb_espelho.cd_franquia = franquias.cd_franquia AND itreg_amb_espelho.cd_atendimento = natend
               AND franquias.cd_gru_pro IS NOT NULL AND franquias.qt_pontos IS NOT NULL;
      CURSOR c_hospital IS
        SELECT cd_hospital
          FROM dbamv.hospital
         WHERE hospital.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
      CURSOR c_grupro(cprofat IN VARCHAR2) IS
        SELECT gru_pro.cd_gru_pro
          FROM dbamv.pro_fat
             , dbamv.gru_pro
         WHERE pro_fat.cd_gru_pro = gru_pro.cd_gru_pro AND pro_fat.cd_pro_fat = cprofat;
      CURSOR c_regra(nconvenio IN NUMBER, nplano IN NUMBER) IS
        SELECT regra.cd_regra
          FROM dbamv.con_pla
             , dbamv.regra
             , dbamv.empresa_con_pla
         WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
               AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
               AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
               AND empresa_con_pla.cd_convenio = nconvenio AND empresa_con_pla.cd_con_pla = nplano
               AND empresa_con_pla.cd_regra = regra.cd_regra(+);
      CURSOR c_acresdesc(nregra IN NUMBER, ngrupro IN NUMBER, ctpatdt IN VARCHAR2 ,dDtVigencia IN Date) IS
        SELECT NVL(acresc_descontos.vl_perc_acrescimo, 0) vl_perc_acrescimo
             , NVL(acresc_descontos.vl_perc_desconto, 0) vl_perc_desconto
             , NVL(acresc_descontos.sn_vl_filme, 'S') sn_vl_filme
             , NVL(acresc_descontos.sn_vl_honorario, 'S') sn_vl_honorario
             , NVL(acresc_descontos.sn_vl_operacional, 'S') sn_vl_operacional
             , DECODE(
                 ctpatdt
               , 'E', acresc_descontos.tp_atend_externo
               , 'U', acresc_descontos.tp_atend_urgeme
               , 'I', acresc_descontos.tp_atend_internacao
               , 'A', acresc_descontos.tp_atend_ambulatorial
               , 'H', acresc_descontos.tp_atend_homecare) sn_acres_desc
             , NVL(acresc_descontos.sn_destacar_na_fatura, 'S') sn_destacar_na_fatura
            , 0 vl_perc_acrescimo_exame
        FROM   dbamv.acresc_descontos
         WHERE acresc_descontos.cd_regra = nregra AND acresc_descontos.cd_gru_pro = ngrupro
		 AND (  ( dDtVigencia BETWEEN dt_inicio_vigencia AND Nvl(dt_final_vigencia,SYSDATE) AND dbamv.pkg_mv2000.le_cliente = 420 )
                OR dbamv.pkg_mv2000.le_cliente <> 420 ); -- PDA 557275 - só valida a data de vigencia se for cliente Mãe de Deus
      CURSOR c_acresdesc_proc(nregra IN NUMBER, cprofat IN VARCHAR2, ctpatdt IN VARCHAR2 ,dDtVigencia IN Date ) IS
        SELECT NVL(acresc_descontos_proc.vl_perc_acrescimo, 0) vl_perc_acrescimo
             , NVL(acresc_descontos_proc.vl_perc_desconto, 0) vl_perc_desconto
             , NVL(acresc_descontos_proc.sn_vl_filme, 'S') sn_vl_filme
             , NVL(acresc_descontos_proc.sn_vl_honorario, 'S') sn_vl_honorario
             , NVL(acresc_descontos_proc.sn_vl_operacional, 'S') sn_vl_operacional
             , DECODE(
                 ctpatdt
               , 'E', acresc_descontos_proc.tp_atend_externo
               , 'U', acresc_descontos_proc.tp_atend_urgeme
               , 'I', acresc_descontos_proc.tp_atend_internacao
               , 'A', acresc_descontos_proc.tp_atend_ambulatorial
               , 'H', acresc_descontos_proc.tp_atend_homecare) sn_acres_desc
             , NVL(acresc_descontos_proc.sn_destacar_na_fatura, 'S') sn_destacar_na_fatura
             , NVL(acresc_descontos_proc.vl_perc_acrescimo_exame, 0) vl_perc_acrescimo_exame
        FROM   dbamv.acresc_descontos_proc
         WHERE acresc_descontos_proc.cd_regra = nregra
               AND acresc_descontos_proc.cd_pro_fat = cprofat
			   AND (  ( dDtVigencia BETWEEN dt_inicio_vigencia AND Nvl(dt_final_vigencia,SYSDATE) AND dbamv.pkg_mv2000.le_cliente = 420 )
                OR dbamv.pkg_mv2000.le_cliente <> 420 ); -- PDA 557275 - só valida a data de vigencia se for cliente Mãe de Deus
      CURSOR c_tabconvenio(
        nconvenio    IN  NUMBER
      , nplano       IN  NUMBER
      , cprofat      IN  VARCHAR2
      , dreferencia  IN  DATE
      , pnprest      IN  NUMBER
      , pnset        IN  NUMBER
      , pnRegra      in  number) IS
        SELECT   NVL(tab_convenio.vl_tab_convenio, 0) vl_tab_convenio
               , tab_convenio.sn_usar_indice
               , tab_convenio.sn_horario_especial
               , tab_convenio.sn_filme
               , tab_convenio.cd_regra
            FROM dbamv.tab_convenio
           WHERE tab_convenio.sn_ativo = 'S' AND tab_convenio.cd_convenio = nconvenio
                 AND(tab_convenio.cd_con_pla = nplano OR tab_convenio.cd_con_pla IS NULL)
                 AND tab_convenio.cd_pro_fat = cprofat
                 AND tab_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                 AND(tab_convenio.cd_prestador = pnprest OR tab_convenio.cd_prestador IS NULL)
                 AND(tab_convenio.cd_setor = pnset OR tab_convenio.cd_setor IS NULL)
   	             AND (tab_convenio.cd_regra = pnRegra or tab_convenio.cd_regra is null)
                 AND tab_convenio.dt_vigencia =
                      (SELECT MAX(tab_conv.dt_vigencia)
                         FROM dbamv.tab_convenio tab_conv
                        WHERE tab_conv.sn_ativo = 'S' AND tab_conv.cd_convenio = nconvenio
                              AND(tab_conv.cd_con_pla = nplano OR tab_conv.cd_con_pla IS NULL)
                              AND tab_conv.cd_pro_fat = cprofat
                              AND tab_conv.dt_vigencia <= dreferencia
                              AND tab_conv.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                              AND(tab_conv.cd_prestador = pnprest OR tab_conv.cd_prestador IS NULL)
         	                  AND (tab_conv.cd_regra = pnRegra or tab_conv.cd_regra is null)
                              AND(tab_conv.cd_setor = pnset OR tab_conv.cd_setor IS NULL))
        ORDER BY tab_convenio.cd_prestador
               , tab_convenio.cd_setor
               , tab_convenio.cd_regra DESC;
      CURSOR c_tabconvenio_429(
        nconvenio    IN  NUMBER
      , nplano       IN  NUMBER
      , cprofat      IN  VARCHAR2
      , dreferencia  IN  DATE
      , pnprest      IN  NUMBER
      , pnset        IN  NUMBER
      , pcdregra     IN  NUMBER ) IS
        SELECT   NVL(tab_convenio.vl_tab_convenio, 0) vl_tab_convenio
               , tab_convenio.sn_usar_indice
               , tab_convenio.sn_horario_especial
               , tab_convenio.sn_filme
               , tab_convenio.cd_regra
            FROM dbamv.tab_convenio
           WHERE tab_convenio.sn_ativo = 'S' AND tab_convenio.cd_convenio = nconvenio
                 AND(tab_convenio.cd_con_pla = nplano OR tab_convenio.cd_con_pla IS NULL)
                 AND tab_convenio.cd_pro_fat = cprofat
                 AND tab_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                 AND(tab_convenio.cd_prestador = pnprest OR tab_convenio.cd_prestador IS NULL)
                 AND(tab_convenio.cd_setor = pnset OR tab_convenio.cd_setor IS NULL)
                 AND (tab_convenio.cd_regra = pcdregra or tab_convenio.cd_regra is null)
                 AND tab_convenio.dt_vigencia =
                      (SELECT MAX(tab_conv.dt_vigencia)
                         FROM dbamv.tab_convenio tab_conv
                        WHERE tab_conv.sn_ativo = 'S' AND tab_conv.cd_convenio = nconvenio
                              AND(tab_conv.cd_con_pla = nplano OR tab_conv.cd_con_pla IS NULL)
                              AND tab_conv.cd_pro_fat = cprofat
                              AND tab_conv.dt_vigencia <= dreferencia
                              AND tab_conv.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
                              AND(tab_conv.cd_prestador = pnprest OR tab_conv.cd_prestador IS NULL)
                              AND(tab_conv.cd_setor = pnset OR tab_conv.cd_setor IS NULL)
                              AND (tab_conv.cd_regra = pcdregra or tab_conv.cd_regra is null))
        ORDER BY tab_convenio.cd_prestador
               , tab_convenio.cd_setor
               , tab_convenio.cd_regra DESC;
      CURSOR c_ver_hor_esp(pcdambrel IN NUMBER, pcdlanrel IN NUMBER) IS
        SELECT sn_horario_especial
          FROM dbamv.itreg_amb_espelho
         WHERE cd_reg_amb = pcdambrel AND cd_lancamento = pcdlanrel;
      CURSOR cregraatendimentoprofat(ncdregraatendimentoprofat IN NUMBER) IS
        SELECT regra_atendimento_pro_fat.cd_regra_atendimento_pro_fat
             , regra_atendimento_pro_fat.dt_inicial
             , regra_atendimento_pro_fat.dt_final
             , regra_atendimento_pro_fat.vl_perc
             , regra_atendimento_pro_fat.tp_convenio
             , NVL(regra_atendimento_pro_fat.vl_co_participacao, 0) vl_co_participacao
          FROM dbamv.regra_atendimento_pro_fat
         WHERE regra_atendimento_pro_fat.cd_regra_atendimento_pro_fat = ncdregraatendimentoprofat;
  CURSOR c_filme(nregra IN NUMBER, dreferencia IN DATE, vprofat IN VARCHAR2) IS
    SELECT filme_tab.qt_m2_filme
      FROM dbamv.filme_tab,
           dbamv.itregra,
           dbamv.pro_fat
     WHERE filme_tab.cd_tab_fat = itregra.cd_tab_fat
       AND itregra.cd_gru_pro = pro_fat.cd_gru_pro
       AND pro_fat.cd_pro_fat = filme_tab.cd_pro_fat
       AND itregra.cd_regra = nregra
       AND filme_tab.cd_pro_fat = vprofat
       AND filme_tab.dt_vigencia =
                (SELECT MAX(filme.dt_vigencia)
                   FROM dbamv.filme_tab filme,
                        dbamv.itregra itreg,
                        dbamv.pro_fat pro
                  WHERE filme.cd_tab_fat = itreg.cd_tab_fat
                    AND itreg.cd_gru_pro = pro.cd_gru_pro
                    AND pro.cd_pro_fat = filme.cd_pro_fat
                    AND itreg.cd_regra = nregra
                    AND filme.cd_pro_fat = vprofat
                    AND filme.dt_vigencia <= dreferencia);
      nFilme  NUMBER := 0;
	  /*PDA 297436(inicio) - 13/07/2009 - Jansen Gallindo
   Incluido parametro na chamada do cursor, pois o ncdlanc quando chamado da tela vem nulo*/
  --PDA 557275 (Início)
  -- Se para o convênio estiver configurado para faturar data da alta, em contas ambulatoriais, buscará a data pela data do atendimento
  CURSOR cFaturaDataAlta(pCdLanc IN NUMBER) is
   SELECT Decode(c.sn_fatura_data_alta,'S',atendime.dt_atendimento,i.hr_lancamento) Data
      FROM dbamv.itreg_amb_espelho i,
           dbamv.convenio  c,
           dbamv.atendime
     WHERE atendime.cd_atendimento = i.cd_atendimento
       AND c.cd_convenio = atendime.cd_convenio
       AND i.cd_reg_amb = ncdregamb
       AND i.cd_lancamento = Nvl(ncdlanc,pCdLanc);
     --PDA 557275 (Fim)
     /*PDA 297436(fim) - 13/07/2009 - Jansen Gallindo*/
     -- PDA 175832 (Fim)
      cursor cConfConvTrunca is
        select valor
          from dbamv.configuracao
         where cd_sistema = 'FFCV'
           and cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           and chave = 'CD_CONV_NAO_ARREDONDA_VALOR';
      --
      CURSOR c_franquia(pcdFranquia IN NUMBER ) IS
       SELECT franquias.vl_particip
         FROM dbamv.franquias
        WHERE franquias.cd_franquia = pcdFranquia
          AND ((franquias.cd_gru_pro IS NULL and franquias.qt_pontos is not null) or
                franquias.vl_particip is not null);
      bexcessao                    BOOLEAN;
      v_tabconvenio                c_tabconvenio%ROWTYPE;
      v_grupro                     c_grupro%ROWTYPE;
      v_acresdesc                  c_acresdesc%ROWTYPE;
      nauxvlunitario               NUMBER;
      nauxvl_honorario_unitario    NUMBER;
      nauxvl_operacional_unitario  NUMBER;
      v_hospital                   c_hospital%ROWTYPE;
      cerrmsg                      VARCHAR2(2000);
      nvaloperacional              NUMBER;
      nvalhonorario                NUMBER;
      nvalfilme                    NUMBER;
      nvalporte                    NUMBER;
      nvalchtotal                  NUMBER;
      nvalchhonorario              NUMBER;
      nvalacrescimo                NUMBER;
      nvaldesconto                 NUMBER;
      nvalpercrelac                NUMBER;
      nvalunitproced               NUMBER;
      nvaltotproced                NUMBER;
      nvaltotconta                 NUMBER;
      nvalacresconta               NUMBER;
      nvaldescconta                NUMBER;
      nvalfilmeconta               NUMBER;
      ncdlfa                       NUMBER;
      dhrreferencia                DATE;
      hhrreferencia                DATE;
      ddtreferencia                DATE;
      nvalortotal                  NUMBER;
      ncdregra                     NUMBER;
      ncdindice                    NUMBER;
      ncdconvenio                  NUMBER;
      ncdplano                     NUMBER;
      ncdregatend                  NUMBER;
      ncdregatendprofat            NUMBER;
      npercrelacionado             NUMBER;
      cprofatpai                   VARCHAR2(8);
      ncdregraplano                NUMBER;
      cprocexced                   VARCHAR2(8);
      nqtd                         NUMBER;
      ncdindiceplano               NUMBER;
      cprofatpai_outros            VARCHAR2(8);
      csn_valores_relacionados     VARCHAR2(1);
      ctemregra                    VARCHAR2(1);
      vsn_calculo_data_atual       VARCHAR2(1);
	  vFaturaDataAlta              date;  --PDA 557275
      ncd_convenio_a               dbamv.itreg_amb_espelho.cd_convenio%TYPE;
      ctp_controle_lote            dbamv.config_ffcv.tp_controle_lote%TYPE;
      nretorno_desconto            NUMBER(1);
      vsn_incidencia_exame         dbamv.val_pro_relacionado.sn_incidencia_exame%TYPE;
      vlancamentos                 VARCHAR2(5000);
      nregra                       NUMBER;
      npctlanc                     NUMBER;
      pcdambrel                    NUMBER;
      pcdlanrel                    NUMBER;
      vhoresp                      VARCHAR2(1);
      rregraatendimentoprofat      cregraatendimentoprofat%ROWTYPE;
      natendimento                 NUMBER(10);
      encerra                      EXCEPTION;
      vConfConvTrunca              dbamv.configuracao.valor%type;
      vTruncaValor                 varchar2(01) := 'N';
      --
    nvlrfranquia NUMBER:=null;
    BEGIN
      nvaltotconta := 0;
      nvalacresconta := 0;
      nvaldescconta := 0;
      nvalfilmeconta := 0;
      nqtd := 0;
      FOR RECORD IN cfrangrupro(ncdatendimento) LOOP
        nqtd := RECORD.total;
      END LOOP;
      IF nqtd <> 0 THEN
        RAISE encerra;
      END IF;
      OPEN c_config_ffcv;
      FETCH c_config_ffcv
       INTO csn_valores_relacionados, vsn_calculo_data_atual, ctp_controle_lote;
      CLOSE c_config_ffcv;
      FOR v_itregamb IN c_itregamb LOOP
	   -- PDA 557275  (Início)
      vFaturaDataAlta:=NULL;
      Open cFaturaDataAlta(v_itregamb.cd_lancamento);
      Fetch cFaturaDataAlta into vFaturaDataAlta;
      Close cFaturaDataAlta;
     -- PDA 557275  (Fim)
        natendimento := v_itregamb.cd_atendimento;
        IF NVL(v_itregamb.sn_calcula_valor, 'S') = 'S' THEN
          ncdregra := NULL;
          ncdindice := NULL;
          ncdregatend := NULL;
          ncdregatendprofat := NULL;
          nvalpercrelac := NULL;
          npercrelacionado := NULL;
          cprofatpai := NULL;
          ncdregraplano := NULL;
          cprocexced := NULL;
          ncdconvenio := NULL;
          ncdplano := NULL;
          cprofatpai_outros := NULL;
          ncd_convenio_a := v_itregamb.cd_convenio;
          hhrreferencia := v_itregamb.hr_lancamento;
          IF NVL(v_itregamb.sn_horario_especial, 'S') = 'N' THEN
            OPEN c_ver_hor_esp(v_itregamb.cd_reg_amb_rel, v_itregamb.cd_lancamento_rel);
            FETCH c_ver_hor_esp
             INTO vhoresp;
            CLOSE c_ver_hor_esp;
            IF NVL(vhoresp, 'N') = 'S' THEN
              dhrreferencia := v_itregamb.hr_lancamento;
            ELSE
              dhrreferencia := NULL;
            END IF;
          ELSE
            dhrreferencia := v_itregamb.hr_lancamento;
          END IF;
          IF NVL(vsn_calculo_data_atual, 'N') <> 'S' THEN
            ddtreferencia := v_itregamb.dt_atendimento;
          ELSE
            ddtreferencia := SYSDATE;
          END IF;
          IF v_itregamb.tp_gru_pro IN('SP', 'SD', 'SH')
             AND NVL(v_itregamb.sn_horario_especial, 'S') = 'N' THEN
            OPEN c_ver_hor_esp(v_itregamb.cd_reg_amb_rel, v_itregamb.cd_lancamento_rel);
            FETCH c_ver_hor_esp
             INTO vhoresp;
            CLOSE c_ver_hor_esp;
            IF NVL(vhoresp, 'N') = 'S' THEN
              dhrreferencia := v_itregamb.hr_lancamento;
            ELSE
              dhrreferencia := NULL;
            END IF;
          END IF;
          IF NVL(csn_valores_relacionados, 'N') = 'S' THEN
            OPEN c_itreg_amb_pai(v_itregamb.cd_reg_amb_rel, v_itregamb.cd_lancamento_rel);
            FETCH c_itreg_amb_pai
             INTO cprofatpai_outros;
            CLOSE c_itreg_amb_pai;
          END IF;
          OPEN c_regraatend(v_itregamb.cd_atendimento);
          FETCH c_regraatend
           INTO ncdregatend;
          CLOSE c_regraatend;
          OPEN c_regraatendprofat(v_itregamb.cd_atendimento);
          FETCH c_regraatendprofat
           INTO ncdregatendprofat;
          CLOSE c_regraatendprofat;
          IF v_itregamb.sn_fechada = 'S'
             OR(ncdatendimento IS NOT NULL AND ncdatendimento <> v_itregamb.cd_atendimento) THEN
            IF NVL(v_itregamb.tp_pagamento, 'P') <> 'C'
               AND NVL(v_itregamb.sn_pertence_pacote, 'N') = 'N' THEN
              nvaltotconta := nvaltotconta + NVL(v_itregamb.vl_total_conta, 0);
              nvalacresconta := nvalacresconta + NVL(v_itregamb.vl_acrescimo, 0);
              nvaldescconta := nvaldescconta + NVL(v_itregamb.vl_desconto, 0);
              nvalfilmeconta := nvalfilmeconta + NVL(v_itregamb.vl_filme_unitario, 0);
            END IF;
          ELSE
            IF v_itregamb.cd_regra IS NOT NULL THEN
              ncdregra := v_itregamb.cd_regra;
            END IF;
            nvalunitproced := NULL;
            IF v_itregamb.tp_gru_pro = 'OP' OR dbamv.fnc_ffcv_sn_opme(v_itregamb.cd_pro_fat) = 'S' THEN
              OPEN c_itcobpre(v_itregamb.cd_lancamento);
              FETCH c_itcobpre
               INTO nvalunitproced;
              CLOSE c_itcobpre;
            END IF;
            IF (
                v_itregamb.cd_franquia IS NOT NULL OR v_itregamb.vl_percentual_paciente IS NOT NULL
                OR v_itregamb.cd_regra_acoplamento IS NOT NULL OR ncdregatend IS NOT NULL
                OR ncdregatendprofat IS NOT NULL)
               AND v_itregamb.cd_reg_amb_pai <> ncdregamb AND v_itregamb.cd_reg_amb_pai IS NOT NULL THEN
              --
              OPEN c_regrafranquia(v_itregamb.cd_reg_amb_pai, v_itregamb.cd_atendimento);
              FETCH c_regrafranquia
               INTO ncdregra, ncdindice, ncdconvenio, ncdplano;
              CLOSE c_regrafranquia;
            END IF;
            OPEN c_regraplano(v_itregamb.cd_convenio, v_itregamb.cd_con_pla);
            FETCH c_regraplano
             INTO ncdregraplano, ncdindiceplano;
            CLOSE c_regraplano;
            --
            vConfConvTrunca := null;
            open  cConfConvTrunca;
            fetch cConfConvTrunca into vConfConvTrunca;
            close cConfConvTrunca;
            if instr( nvl(vConfConvTrunca,'X'), 'TODOS' ) > 0 then
              vTruncaValor := 'S';
            elsif instr( nvl(vConfConvTrunca,'X'), lpad(nvl(ncdconvenio, v_itregamb.cd_convenio),4,'0') ) > 0 then
              vTruncaValor := 'S';
            else
              vTruncaValor := 'N';
            end if;
            --
            IF cprofatpai IS NULL THEN
              --
              ctemregra := NULL;
              OPEN c_valrelacionado_ant(NVL(ncdregra, ncdregraplano), v_itregamb.cd_pro_fat);
              FETCH c_valrelacionado_ant
               INTO ctemregra;
              --
              IF c_valrelacionado_ant%FOUND THEN
                OPEN c_valrelacionado(NVL(ncdregra, ncdregraplano), v_itregamb.dt_atendimento
                    , hhrreferencia, v_itregamb.cd_pro_fat, v_itregamb.cd_atendimento
                    , cprofatpai_outros
                    , v_itregamb.cd_lancamento_rel
                    );
                FETCH c_valrelacionado
                 INTO npercrelacionado, cprofatpai, vsn_incidencia_exame;
                CLOSE c_valrelacionado;
              END IF;
              --
              CLOSE c_valrelacionado_ant;
            END IF;
            --
            IF cprofatpai IS NOT NULL AND cprofatpai_outros IS NULL THEN
              cprocexced := v_itregamb.cd_pro_fat;
              OPEN c_percrelac(cprofatpai);
              FETCH c_percrelac
               INTO nvalpercrelac;
              IF c_percrelac%NOTFOUND THEN
                nvalpercrelac := NULL;
              END IF;
              CLOSE c_percrelac;
            END IF;
            IF dbamv.pkg_mv2000.le_empresa() IS NULL THEN
              pkg_mv2000.atribui_empresa(v_itregamb.cd_multi_empresa);
            END IF;
            npctlanc := NULL;
            IF ncdregra IS NULL THEN
              OPEN c_regra(NVL(ncdconvenio, v_itregamb.cd_convenio) , NVL(ncdplano, v_itregamb.cd_con_pla));
              FETCH c_regra
               INTO ncdregra;
              CLOSE c_regra;
            END IF;
            IF dbamv.pack_ffcv_espelho.fnc_retorna_perc_sd(v_itregamb.cd_pro_fat
               , NVL(v_itregamb.cd_regra, ncdregra)
               , v_itregamb.dt_atendimento) IS NOT NULL THEN
              vlancamentos := vlancamentos || TO_CHAR(v_itregamb.cd_lancamento) || ',';
              npctlanc := 100;
            END IF;
            nvalunitproced :=
              dbamv.pack_ffcv_espelho.val_proc_ffcv(NVL(cprofatpai, v_itregamb.cd_pro_fat), ddtreferencia
              , dhrreferencia, NVL(ncdconvenio, v_itregamb.cd_convenio)
              , NVL(ncdplano, v_itregamb.cd_con_pla), v_itregamb.tp_atendimento, NULL
              , v_itregamb.cd_ati_med
              , NVL(nvalpercrelac, NVL(npctlanc, v_itregamb.vl_percentual_multipla))
              , cerrmsg, nvaloperacional, nvalhonorario, nvalfilme, nvalporte, nvalchtotal
              , nvalchhonorario, nvalacrescimo, nvaldesconto, nvalunitproced
              , v_itregamb.qt_lancamento, nvalortotal, ncdregra, v_itregamb.vl_percentual_paciente
              , v_itregamb.cd_franquia, NVL(ncdindice, ncdindiceplano)
              , v_itregamb.cd_regra_acoplamento, cprocexced, v_itregamb.tp_convenio
              , v_itregamb.cd_convenio, v_itregamb.cd_con_pla, NULL
              , v_itregamb.cd_prestador, v_itregamb.cd_setor
              , ncdregamb, v_itregamb.cd_lancamento);
            nauxvlunitario := nvalunitproced;
            nauxvl_honorario_unitario := nvalhonorario;
            IF v_itregamb.tp_funcao = 'N' THEN
              nauxvl_honorario_unitario := nvalporte;
            END IF;
            nauxvl_operacional_unitario := nvaloperacional;
            IF cprofatpai IS NOT NULL AND NVL(npercrelacionado, 0) <> 0 THEN
              nvalunitproced :=((nvalunitproced * npercrelacionado) / 100);
              nvaloperacional :=((nvaloperacional * npercrelacionado) / 100);
              nvalhonorario :=((nvalhonorario * npercrelacionado) / 100);
              nvalfilme :=((nvalfilme * npercrelacionado) / 100);
              nvalporte :=((nvalporte * npercrelacionado) / 100);
              nvalchtotal :=((nvalchtotal * npercrelacionado) / 100);
              nvalchhonorario :=((nvalchhonorario * npercrelacionado) / 100);
              v_acresdesc.sn_acres_desc := NULL;
              v_acresdesc.sn_destacar_na_fatura := NULL;
              v_acresdesc.vl_perc_acrescimo := 0;
              v_acresdesc.vl_perc_desconto := 0;
              OPEN c_acresdesc_proc( ncdregra,
                                     v_itregamb.cd_pro_fat
                                   , v_itregamb.tp_atendimento
								   ,vFaturaDataAlta); -- PDA 557275 incluido vFaturaDataAlta
              FETCH c_acresdesc_proc INTO v_acresdesc;
              IF c_acresdesc_proc%NOTFOUND OR v_acresdesc.sn_acres_desc = 'N' THEN
                OPEN c_grupro(NVL(cprofatpai, v_itregamb.cd_pro_fat));
                FETCH c_grupro
                 INTO v_grupro;
                CLOSE c_grupro;
                v_acresdesc.sn_acres_desc := NULL;
                v_acresdesc.sn_destacar_na_fatura := NULL;
                v_acresdesc.vl_perc_acrescimo := 0;
                v_acresdesc.vl_perc_desconto := 0;
                OPEN c_acresdesc(ncdregra, v_grupro.cd_gru_pro, v_itregamb.tp_atendimento,vFaturaDataAlta);-- PDA 557275  incluido vFaturaDataAlta
                FETCH c_acresdesc
                 INTO v_acresdesc;
                CLOSE c_acresdesc;
              END IF;
              CLOSE c_acresdesc_proc;
              nvalacrescimo :=((Nvl(v_acresdesc.vl_perc_acrescimo,0) * npercrelacionado) / 100);
	      nvaldesconto  :=((nvl(v_acresdesc.vl_perc_desconto ,0) * npercrelacionado) / 100);
              nvalortotal :=((nvalortotal * npercrelacionado) / 100);
                open c_filme(ncdregra,ddtreferencia,v_itregamb.cd_pro_fat);
                fetch c_filme into nfilme;
                close c_filme;
                if nvl(nfilme,0) = 0 and nvl(nvalfilme,0) > 0 then
                   nvalfilme := 0;
                end if;
	    END IF;
            IF cerrmsg IS NOT NULL THEN
              --
              OPEN c_existelfa(ncdregamb, v_itregamb.cd_pro_fat);
              FETCH c_existelfa
               INTO ncdlfa;
              CLOSE c_existelfa;
              --
              IF ncdlfa IS NULL AND v_itregamb.tp_convenio IN('C', 'P') THEN
                INSERT INTO dbamv.log_falha_importacao
                            (
                             cd_reg_amb, cd_pro_fat, dt_importacao, tp_importacao, tp_erro
                           , nm_usuario_gerou, cd_log_falha_importacao, ds_msg_erro
                           , cd_atendimento, cd_item_falha)
                VALUES      (
                             ncdregamb, v_itregamb.cd_pro_fat, SYSDATE, 'Calculo', '03'
                           , USER, dbamv.seq_log_falha_importacao.NEXTVAL, cerrmsg
                           , v_itregamb.cd_atendimento, v_itregamb.cd_lancamento);
              END IF;
              --
              cmsgerro := cerrmsg;
            END IF;
            --
            nvalunitproced := ROUND(nvalunitproced, 4);
            --
            if vTruncaValor = 'S' then
              nvaloperacional := TRUNC(ROUND(nvaloperacional, 4),2);
              nvalhonorario := TRUNC(ROUND(nvalhonorario, 4),2);
              nvalporte := TRUNC(ROUND(nvalporte, 4),2);
              nvalfilme := TRUNC(ROUND(nvalfilme, 4),4);
            else
              nvaloperacional := ROUND(nvaloperacional, 2);
              nvalhonorario := ROUND(nvalhonorario, 2);
              nvalporte := ROUND(nvalporte, 2);
              nvalfilme := ROUND(nvalfilme, 2);
            end if;
            IF (
                v_itregamb.cd_franquia IS NOT NULL AND v_itregamb.cd_reg_amb_pai <> ncdregamb
                AND v_itregamb.cd_reg_amb_pai IS NOT NULL) THEN
              nvaldesconto := NULL;
            END IF;
        nvlrfranquia := NULL;
        --
        OPEN c_franquia( v_itregamb.cd_franquia);
        FETCH c_franquia INTO nvlrfranquia;
        CLOSE c_franquia;
        IF Nvl(nvlrfranquia,0) > 0 then
          if vTruncaValor = 'S' then
            nvaltotproced :=
              TRUNC(ROUND((NVL(nvalortotal, 0) + NVL(nvalacrescimo, 0) - NVL(nvaldesconto, 0))
                * v_itregamb.qt_lancamento
                , 4),2);
          else
            nvaltotproced :=
              ROUND((NVL(nvalortotal, 0) + NVL(nvalacrescimo, 0) - NVL(nvaldesconto, 0))
                * v_itregamb.qt_lancamento
                  , 2);
          end if;
        ELSE
          if vTruncaValor = 'S' then
            nvaltotproced :=
              TRUNC(ROUND(NVL(nvalortotal, 0) + NVL(nvalacrescimo, 0) - NVL(nvaldesconto, 0)
                +(NVL(nvalfilme, 0) * v_itregamb.qt_lancamento)
                 , 4),2);
          else
            nvaltotproced :=
              ROUND(NVL(nvalortotal, 0) + NVL(nvalacrescimo, 0) - NVL(nvaldesconto, 0)
                +(NVL(nvalfilme, 0) * v_itregamb.qt_lancamento)
                  , 2);
          end if;
        END IF;
            OPEN c_hospital;
            FETCH c_hospital
             INTO v_hospital;
            CLOSE c_hospital;
              IF ncdregra IS NULL THEN
                OPEN c_regra(NVL(ncdconvenio, v_itregamb.cd_convenio)
                    , NVL(ncdplano, v_itregamb.cd_con_pla));
                FETCH c_regra
                 INTO ncdregra;
                CLOSE c_regra;
              END IF;
             if (dbamv.pkg_mv2000.le_cliente = 429) then
                OPEN c_tabconvenio_429(NVL(ncdconvenio, v_itregamb.cd_convenio)
                                 , NVL(ncdplano, v_itregamb.cd_con_pla), NVL(cprofatpai, v_itregamb.cd_pro_fat)
                                 , ddtreferencia, v_itregamb.cd_prestador, v_itregamb.cd_setor,nvl(nregra, ncdregra));
                FETCH c_tabconvenio_429 INTO v_tabconvenio;
                IF c_tabconvenio_429%FOUND THEN
                    bexcessao := TRUE;
                ELSE
                    bexcessao := FALSE;
                END IF;
                CLOSE c_tabconvenio_429;
             else
                OPEN c_tabconvenio(NVL(ncdconvenio, v_itregamb.cd_convenio)
                                 , NVL(ncdplano, v_itregamb.cd_con_pla), NVL(cprofatpai, v_itregamb.cd_pro_fat)
                                 , ddtreferencia, v_itregamb.cd_prestador, v_itregamb.cd_setor, nvl(nregra, ncdregra));
                FETCH c_tabconvenio INTO v_tabconvenio;
                IF c_tabconvenio%FOUND THEN
                    bexcessao := TRUE;
                ELSE
                    bexcessao := FALSE;
                END IF;
                CLOSE c_tabconvenio;
             end if;
             if not bexcessao and nvl(pkg_mv2000.le_configuracao('FFCV', 'SN_APLICA_ACRES_DESC_VL_EXC'), 'S') = 'S' then
              v_acresdesc.sn_acres_desc := NULL;
              v_acresdesc.sn_destacar_na_fatura := NULL;
              v_acresdesc.vl_perc_acrescimo := 0;
              v_acresdesc.vl_perc_desconto := 0;
              OPEN c_acresdesc_proc( ncdregra, v_itregamb.cd_pro_fat    , v_itregamb.tp_atendimento ,vFaturaDataAlta);-- PDA 557275   incluido vFaturaDataAlta
              FETCH c_acresdesc_proc
               INTO v_acresdesc;
              IF c_acresdesc_proc%NOTFOUND OR v_acresdesc.sn_acres_desc = 'N' THEN
                OPEN c_grupro(NVL(cprofatpai, v_itregamb.cd_pro_fat));
                FETCH c_grupro
                 INTO v_grupro;
                CLOSE c_grupro;
                v_acresdesc.sn_acres_desc := NULL;
                v_acresdesc.sn_destacar_na_fatura := NULL;
                v_acresdesc.vl_perc_acrescimo := 0;
                v_acresdesc.vl_perc_desconto := 0;
                OPEN c_acresdesc(ncdregra, v_grupro.cd_gru_pro, v_itregamb.tp_atendimento ,vFaturaDataAlta);-- PDA 557275  incluido vFaturaDataAlta
                FETCH c_acresdesc
                 INTO v_acresdesc;
                CLOSE c_acresdesc;
              END IF;
              CLOSE c_acresdesc_proc;
              IF NVL(v_acresdesc.sn_acres_desc, 'N') = 'S' AND NVL(v_acresdesc.sn_destacar_na_fatura, 'S') = 'N' THEN
			    -- OP 3221 - 17/01/2013 - Acertados os IFs para utilizar corretamente o acréscimo de exame.
			    --IF NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) = 0 THEN
			    IF ( NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) = 0 )
				   OR ( Nvl(v_acresdesc.vl_perc_acrescimo,0) = 0 AND NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) > 0
				    ) THEN
				  IF Nvl(v_acresdesc.vl_perc_acrescimo,0) = 0 AND NVL(v_acresdesc.vl_perc_acrescimo_exame, 0) > 0 then
				    v_acresdesc.vl_perc_acrescimo := v_acresdesc.vl_perc_acrescimo_exame;
				  END IF;
			    -- OP 3221 - fim
                  IF NVL(v_acresdesc.vl_perc_acrescimo, 0) > 0 THEN
                    IF NVL(nauxvlunitario, 0) > 0 THEN
                      if vTruncaValor = 'S' then
                        nvalunitproced :=
                          nauxvlunitario
                          + TRUNC(ROUND(((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100),4),4);
                      ELSE
                        -- PDA 557275     - Inicio
                        IF dbamv.pkg_mv2000.le_cliente = 420 THEN
                          nvalunitproced := nauxvlunitario + ((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100);
                        ELSE
                          nvalunitproced := nauxvlunitario + ROUND(((nauxvlunitario * v_acresdesc.vl_perc_acrescimo) / 100), 4);
                        END IF ;
                        -- PDA 557275 - Fim
                      end if;
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S'
                       AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                      --
                      if vTruncaValor = 'S' then
                        nauxvl_honorario_unitario :=
                          nauxvl_honorario_unitario
                          + trunc(ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_acrescimo) / 100), 4),4);
                      else
                        nauxvl_honorario_unitario :=
                          nauxvl_honorario_unitario
                          + ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_acrescimo) / 100)
                           , 2);
                      end if;
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S'
                       AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                      --
                      if vTruncaValor = 'S' then
                        nvaloperacional :=
                          nauxvl_operacional_unitario
                          + trunc(ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_acrescimo) / 100), 4),4);
                      else
                        nvaloperacional :=
                          nauxvl_operacional_unitario
                          + ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_acrescimo)
                                   / 100), 2);
                      end if;
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilme, 0) > 0 THEN
                      --
                      if vTruncaValor = 'S' then
                        nvalfilme :=
                             nvalfilme + trunc(ROUND(((nvalfilme * v_acresdesc.vl_perc_acrescimo) / 100), 4),4);
                      else
                        nvalfilme :=
                             nvalfilme + ROUND(((nvalfilme * v_acresdesc.vl_perc_acrescimo) / 100)
                                        , 2);
                      end if;
                    END IF;
                  END IF;
                  IF NVL(v_acresdesc.vl_perc_desconto, 0) > 0 THEN
                    --
                    IF NVL(nauxvlunitario, 0) > 0 THEN
                      --
                      if vTruncaValor = 'S' then
                        nvalunitproced :=
                          nauxvlunitario
                          - trunc(ROUND(((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100), 4),4);
                      ELSE
                        -- PDA 557275   - Inicio
                        IF dbamv.pkg_mv2000.le_cliente = 420 THEN
                          nvalunitproced := nauxvlunitario - ((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100);
                        ELSE
                          nvalunitproced := nauxvlunitario - ROUND(((nauxvlunitario * v_acresdesc.vl_perc_desconto) / 100), 4);
                        END IF ;
                        -- PDA 557275 - Fim
                      end if;
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_honorario, 'N') = 'S'
                       AND NVL(nauxvl_honorario_unitario, 0) > 0 THEN
                      --
                      if vTruncaValor = 'S' then
                        nauxvl_honorario_unitario :=
                          nauxvl_honorario_unitario
                          - trunc(ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_desconto) / 100), 4),4);
                      else
                        nauxvl_honorario_unitario :=
                          nauxvl_honorario_unitario
                          - ROUND(((nauxvl_honorario_unitario * v_acresdesc.vl_perc_desconto) / 100)
                           , 2);
                      end if;
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_operacional, 'N') = 'S'
                       AND NVL(nauxvl_operacional_unitario, 0) > 0 THEN
                      --
                      if vTruncaValor = 'S' then
                        nvaloperacional :=
                          nauxvl_operacional_unitario
                          - trunc(ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_desconto) / 100), 4),4);
                      else
                        nvaloperacional :=
                          nauxvl_operacional_unitario
                          - ROUND(((nauxvl_operacional_unitario * v_acresdesc.vl_perc_desconto) / 100), 2);
                      end if;
                    END IF;
                    IF NVL(v_acresdesc.sn_vl_filme, 'N') = 'S' AND NVL(nvalfilme, 0) > 0 THEN
                      --
                      if vTruncaValor = 'S' then
                        nvalfilme :=
                              nvalfilme - trunc(ROUND(((nvalfilme * v_acresdesc.vl_perc_desconto) / 100), 4),4);
                      else
                        nvalfilme :=
                              nvalfilme - ROUND(((nvalfilme * v_acresdesc.vl_perc_desconto) / 100)
                                         , 2);
                      end if;
                    END IF;
                  END IF;
                  --
                  if vTruncaValor = 'S' then
                    nvaltotproced :=
                       trunc(ROUND((nvalunitproced + NVL(nvalfilme, 0)) * NVL(v_itregamb.qt_lancamento, 0)
                       , 4),2);
                  else
                    nvaltotproced :=
                       ROUND((nvalunitproced + NVL(nvalfilme, 0)) * NVL(v_itregamb.qt_lancamento, 0)
                       , 2);
                  end if;
                --
                -- não salvar o acréscimo ou desconto em tabela
                --
                END IF;                                                                -- PDA 170376
                --
                -- não salvar o acréscimo ou desconto em tabela
                --
                nvaldesconto := 0;
                nvalacrescimo := 0;
              END IF;
            END IF;
            IF v_itregamb.cd_regra_atendimento_pro_fat IS NOT NULL THEN
              OPEN cregraatendimentoprofat(v_itregamb.cd_regra_atendimento_pro_fat);
              FETCH cregraatendimentoprofat
               INTO rregraatendimentoprofat;
              CLOSE cregraatendimentoprofat;
              IF (NVL(rregraatendimentoprofat.vl_perc, 0) = 0)
                 AND(NVL(rregraatendimentoprofat.vl_co_participacao, 0) > 0) THEN
                IF v_itregamb.tp_convenio = 'P' THEN
                  -- Conta do tipo convênio...
                  nvaltotproced := rregraatendimentoprofat.vl_co_participacao;
                  --
                  if vTruncaValor = 'S' then
                    nvalunitproced := trunc(ROUND(nvaltotproced / v_itregamb.qt_lancamento, 4),2);
                  else
                    nvalunitproced := ROUND(nvaltotproced / v_itregamb.qt_lancamento, 2);
                  end if;
                  nvaldesconto := 0;
                  nvalacrescimo := 0;
                  nvaloperacional := 0;
                  nvalfilme := 0;
                ELSE
                  IF rregraatendimentoprofat.vl_co_participacao > nvaltotproced THEN
                    nvaldesconto := nvaltotproced;
                    nvaltotproced := 0;
                  ELSE
                    --
                    if vTruncaValor = 'S' then
                      nvaltotproced := trunc(ROUND(nvaltotproced - rregraatendimentoprofat.vl_co_participacao, 4),2);
                    else
                      nvaltotproced := ROUND(nvaltotproced - rregraatendimentoprofat.vl_co_participacao, 2);
                    end if;
                    nvaldesconto := nvaldesconto + rregraatendimentoprofat.vl_co_participacao;
                  END IF;
                END IF;
              END IF;
            END IF;
            if dbamv.pkg_mv2000.le_cliente = 429 and nvl(npercrelacionado,0) not IN (0,100) then
              nauxvl_honorario_unitario := nvalhonorario;
            end if;
            UPDATE dbamv.itreg_amb_espelho
               SET vl_unitario = nvalunitproced
                 , vl_desconto = NVL(nvaldesconto, 0)
                 , vl_acrescimo = NVL(nvalacrescimo, 0)
                 , vl_honorario_unitario = nauxvl_honorario_unitario
                 , vl_operacional_unitario = nvaloperacional
                 , vl_filme_unitario = nvalfilme
                 , vl_total_conta = nvaltotproced
                 , qt_ch_unitario = nvalchtotal
                 , sn_conta_calculada = 'S'
             WHERE itreg_amb_espelho.cd_reg_amb = ncdregamb
                   AND itreg_amb_espelho.cd_lancamento = v_itregamb.cd_lancamento;
            --
            IF NVL(v_itregamb.sn_pertence_pacote, 'N') = 'N' AND NVL(v_itregamb.tp_pagamento, 'P') <> 'C' THEN
              --
              if vTruncaValor = 'S' then
                nvaltotconta := TRUNC(ROUND(nvaltotconta, 4),2) + TRUNC(ROUND(nvaltotproced, 4),2);
                nvalacresconta := TRUNC(ROUND(nvalacresconta, 4),2) + TRUNC(ROUND(nvalacrescimo, 4),2);
                nvaldescconta := TRUNC(ROUND(nvaldescconta, 4),2) + TRUNC(ROUND(nvaldesconto, 4),2);
                nvalfilmeconta := TRUNC(ROUND(nvalfilmeconta, 4),2) + TRUNC(ROUND(nvalfilme, 4),2);
              else
                nvaltotconta := ROUND(nvaltotconta, 2) + ROUND(nvaltotproced, 2);
                nvalacresconta := ROUND(nvalacresconta, 2) + ROUND(nvalacrescimo, 2);
                nvaldescconta := ROUND(nvaldescconta, 2) + ROUND(nvaldesconto, 2);
                nvalfilmeconta := ROUND(nvalfilmeconta, 2) + ROUND(nvalfilme, 2);
              end if;
              --
            END IF;
          --
          END IF;
        --
        -- PDA 167334 (Inicio) - Henrique Antunes - 19/03/2007
        ELSE
          --
          if vTruncaValor = 'S' then
            nvaltotconta := TRUNC(ROUND(nvaltotconta, 4),2) + NVL(v_itregamb.vl_total_conta, 0);
            nvalfilmeconta := TRUNC(ROUND(nvalfilmeconta, 4),2) + NVL(v_itregamb.vl_filme_unitario, 0);
          else
            nvaltotconta := ROUND(nvaltotconta, 2) + NVL(v_itregamb.vl_total_conta, 0);
            nvalfilmeconta := ROUND(nvalfilmeconta, 2) + NVL(v_itregamb.vl_filme_unitario, 0);
          end if;
        END IF;
      -- PDA 167334 (Fim)
      END LOOP;
      --PDA 249318 - 24/09/2008 - Marinita Kommers (Início)
      --Se não existe co-participação na tabela regra_atendimento_pro_fat faz a verificação na PRC_REGRA_PERC_SD.
      IF ncdregatendprofat IS NULL and NVL(ncdregra, ncdregraplano) is not null THEN -- PDA.: 252960 - Emanoel Deivison - 16/10/2008
        -- pda 173027 - 11/12/2006 - Amalia Araújo
        -- Passando a regra, pois estava passando Null e travando o fechamento da conta dentro da procedure.
        -- PDA 160742 Inicio
        dbamv.pack_ffcv_espelho.prc_regra_perc_sd(vlancamentos, 'A', NVL(ncdregra, ncdregraplano)    --Null
        , ncdregamb, nvaltotconta);
      END IF;
      dbamv.pack_ffcv_espelho.fnc_ffcv_calc_desconto_conta(ncdregamb, natendimento);
      IF ctp_controle_lote = 'U' THEN
        -- PDA 135163 (Início) - Se for lançado pela auditoria, não atualiza a taxa agora , só qdo voltar p/ a tela de auditoria.
        IF ncdlanc IS NULL THEN
          -- PDA 135163 (Fim)
          dbamv.pack_ffcv_espelho.prc_reg_amb_insere_acrescimo(pcd_reg_amb => ncdregamb
          , pcd_convenio => ncd_convenio_a, pvl_total_conta => nvaltotconta);
        -- PDA 135163 (Início) - Fim da condição se o tipo da movimentação é auditoria.
        END IF;
      -- PDA 135163 (Fim)
      END IF;
    -- Fim
    EXCEPTION
      WHEN encerra THEN
        NULL;
    END;
  END valores_conta_ambula;
  FUNCTION VAL_PROC_FFCV(
  cprocedimento    IN      VARCHAR2
, ddatarefer       IN      DATE
, dhorarefer       IN      DATE
, ncodconvenio     IN      NUMBER
, ncodplano        IN      NUMBER
, ctipoatend       IN      VARCHAR2
, ncodtipoaco      IN      NUMBER
, ctpatimed        IN      VARCHAR2
, nvlpercirmult    IN      NUMBER
, cretmsg          OUT     VARCHAR2
, nvloper          OUT     NUMBER
, nvlhonor         OUT     NUMBER
, nvlfilme         OUT     NUMBER
, nvlporte         OUT     NUMBER
, nvlchtotal       OUT     NUMBER
, nvlchhonor       OUT     NUMBER
, nvltaxa          OUT     NUMBER
, nvldesconto      OUT     NUMBER
, nvalproced       IN      NUMBER
, nqtde            IN      NUMBER DEFAULT 1
, nvlrtotal        OUT     NUMBER
, nregra           IN      NUMBER DEFAULT NULL
, npercfranquia    IN      NUMBER DEFAULT NULL
, ncdfranquia      IN      NUMBER DEFAULT NULL
, ncdindice        IN      NUMBER DEFAULT NULL
, ncdregraacop     IN      NUMBER DEFAULT NULL
, cprofatexced     IN      VARCHAR2 DEFAULT NULL
, ctpconvenio      IN      VARCHAR2 DEFAULT NULL
, ncdconvacop      IN      NUMBER DEFAULT NULL
, ncdplanacop      IN      NUMBER DEFAULT NULL
, bprocessarvalor  IN      BOOLEAN DEFAULT NULL
, pncdprestador    IN      NUMBER DEFAULT NULL
, pncdsetor        IN      NUMBER DEFAULT NULL
, ncdconta         IN      NUMBER DEFAULT NULL
, ncdlancamento    IN      NUMBER DEFAULT NULL
)
  RETURN NUMBER IS
  --
  vprofat               VARCHAR2(8);
  nmultiemp             NUMBER := NULL;
  vvTpPag               varchar2(1):= null;
  vddatarefer           DATE;
  vdhorarefer           DATE;
  vParam_Conv           dbamv.configuracao.valor%type;
  --
  CURSOR c_valpro(cprofat IN VARCHAR2, ntabfat IN NUMBER, dreferencia IN DATE) IS
    SELECT NVL(val_pro.vl_total, 0) vl_total
         , NVL(val_pro.vl_operacional, 0) vl_operacional
         , NVL(val_pro.vl_honorario, 0) vl_honorario
      FROM dbamv.val_pro
     WHERE val_pro.cd_tab_fat = ntabfat AND val_pro.cd_pro_fat = cprofat
       AND NVL(val_pro.sn_ativo, 'S') = 'S'
       AND val_pro.dt_vigencia = ( SELECT MAX(vl_pro.dt_vigencia)
                                     FROM dbamv.val_pro vl_pro
                                    WHERE vl_pro.cd_tab_fat = ntabfat AND vl_pro.cd_pro_fat = cprofat
                                      AND NVL(vl_pro.sn_ativo, 'S') = 'S'
                                      AND vl_pro.dt_vigencia <= dreferencia );
  -- PDA 560191 - Inicio  - Query alterada para as mesma validações da DBAMV.VAL_PROC_FFCV , pois não estava pegando os valores corretos das exceções.
  CURSOR C_TabConvenio( nConvenio IN NUMBER,
                        nPlano IN NUMBER,
                        cProFat IN VARCHAR2,
                        dReferencia IN DATE,
						pnPrest	in number,
						pnSet	in number,
                        pnRegra in number
						  ) IS
    SELECT NVL( tab_convenio.vl_tab_convenio, 0 ) vl_tab_convenio,
                tab_convenio.sn_usar_indice,
                tab_convenio.sn_horario_especial,
                tab_convenio.sn_filme,
                tab_convenio.cd_regra,
                tab_convenio.cd_prestador,
                tab_convenio.cd_setor
				, '1' ordem
           FROM dbamv.tab_convenio
          WHERE tab_convenio.sn_ativo = 'S'
            AND tab_convenio.cd_convenio = nConvenio
            AND tab_convenio.cd_con_pla = nPlano
            AND tab_convenio.cd_pro_fat = cProFat
            and tab_convenio.cd_multi_empresa = nMultiEmp
			AND (tab_convenio.cd_prestador = pnPrest or tab_convenio.cd_prestador is null)
			AND (tab_convenio.cd_setor = pnSet or tab_convenio.cd_setor is null)
       and ((Nvl(tab_convenio.cd_regra,0) = Nvl(pnRegra,0) )  or
      ( not exists ( select 1
                      from dbamv.tab_convenio tb
                      where tb.cd_convenio      = tab_convenio.cd_convenio
                        and tb.cd_multi_empresa = tab_convenio.cd_multi_empresa
                        and tb.cd_pro_fat       = tab_convenio.cd_pro_fat
                        and tb.sn_ativo         = tab_convenio.sn_ativo
                        and tb.cd_regra        = pnRegra)
              and tab_convenio.cd_regra is null))
            AND tab_convenio.dt_vigencia = ( SELECT MAX( tab_conv.dt_vigencia )
                                                FROM dbamv.tab_convenio tab_conv
                                               WHERE tab_conv.sn_ativo = 'S'
                                                 AND tab_conv.cd_convenio = nConvenio
                                                 AND tab_conv.cd_con_pla = nPlano
                                                 AND tab_conv.cd_pro_fat = cProFat
                                                 AND tab_conv.dt_vigencia <= dReferencia
                                                 and tab_conv.cd_multi_empresa = nMultiEmp
                           					 	 AND (tab_conv.cd_prestador = pnPrest or tab_conv.cd_prestador is null)
                           					 	 AND (tab_conv.cd_setor = pnSet or tab_conv.cd_setor is null)
		                                       and ((Nvl(tab_conv.cd_regra,0) = Nvl(pnRegra,0) )  OR
                                          ( not exists ( select 1
                                                           from dbamv.tab_convenio tb
                                                          where tb.cd_convenio       = tab_conv.cd_convenio
                                                            and tb.cd_multi_empresa  = tab_conv.cd_multi_empresa
                                                            and tb.cd_pro_fat        = tab_conv.cd_pro_fat
                                                            and tb.sn_ativo          = tab_conv.sn_ativo
                                                            and tb.cd_regra          = pnRegra )
                                          and tab_conv.cd_regra is null  ) )
						)
        union
         SELECT NVL( tab_convenio.vl_tab_convenio, 0 ) vl_tab_convenio,
                tab_convenio.sn_usar_indice,
                tab_convenio.sn_horario_especial,
                tab_convenio.sn_filme,
                tab_convenio.cd_regra,
                tab_convenio.cd_prestador,
                tab_convenio.cd_setor,
				'2' ordem
           FROM dbamv.tab_convenio
          WHERE tab_convenio.sn_ativo = 'S'
            AND tab_convenio.cd_convenio = nConvenio
            AND tab_convenio.cd_con_pla is null
            AND tab_convenio.cd_pro_fat = cProFat
            and tab_convenio.cd_multi_empresa = nMultiEmp
			AND (tab_convenio.cd_prestador = pnPrest or tab_convenio.cd_prestador is null)
			AND (tab_convenio.cd_setor = pnSet or tab_convenio.cd_setor is null)
      and ((Nvl(tab_convenio.cd_regra,0) = Nvl(pnRegra,0) )  or
      ( not exists ( select 1
                      from dbamv.tab_convenio tb
                      where tb.cd_convenio      = tab_convenio.cd_convenio
                        and tb.cd_multi_empresa = tab_convenio.cd_multi_empresa
                        and tb.cd_pro_fat       = tab_convenio.cd_pro_fat
                        and tb.sn_ativo         = tab_convenio.sn_ativo
                        and tb.cd_regra        = pnRegra)
              and tab_convenio.cd_regra is null))
            AND tab_convenio.dt_vigencia = ( SELECT MAX( tab_conv.dt_vigencia )
                                                FROM dbamv.tab_convenio tab_conv
                                               WHERE tab_conv.sn_ativo = 'S'
                                                 AND tab_conv.cd_convenio = nConvenio
                                                 AND tab_conv.cd_con_pla is null
                                                 AND tab_conv.cd_pro_fat = cProFat
                                                 AND tab_conv.dt_vigencia <= dReferencia
                                                 and tab_conv.cd_multi_empresa = nMultiEmp
                           					 	 AND (tab_conv.cd_prestador = pnPrest or tab_conv.cd_prestador is null)
                           					 	 AND (tab_conv.cd_setor = pnSet or tab_conv.cd_setor is null)
		                                       and ((Nvl(tab_conv.cd_regra,0) = Nvl(pnRegra,0) )  OR
                                          ( not exists ( select 1
                                                           from dbamv.tab_convenio tb
                                                          where tb.cd_convenio       = tab_conv.cd_convenio
                                                            and tb.cd_multi_empresa  = tab_conv.cd_multi_empresa
                                                            and tb.cd_pro_fat        = tab_conv.cd_pro_fat
                                                            and tb.sn_ativo          = tab_conv.sn_ativo
                                                            and tb.cd_regra          = pnRegra )
                                          and tab_conv.cd_regra is null  ) )
                                       )
                    ORDER BY 6,7,5 DESC;
  --
  -- PDA 560191 - Fim
  --
  CURSOR C_TabConvenio_429( nConvenio IN NUMBER,
                            nPlano IN NUMBER,
                            cProFat IN VARCHAR2,
                            dReferencia IN DATE,
                			pnPrest	in number,
		         			pnSet	in number,
                            pcdregra in number
				  ) IS
    SELECT NVL( tab_convenio.vl_tab_convenio, 0 ) vl_tab_convenio,
           tab_convenio.sn_usar_indice,
           tab_convenio.sn_horario_especial,
           tab_convenio.sn_filme,
           tab_convenio.cd_regra,
           tab_convenio.cd_prestador,
           tab_convenio.cd_setor
  	   ,'1' nr_ordem
      FROM dbamv.tab_convenio
     WHERE tab_convenio.sn_ativo = 'S'
       AND tab_convenio.cd_convenio = nConvenio
       AND tab_convenio.cd_con_pla = nPlano
       AND tab_convenio.cd_pro_fat = cProFat
       AND tab_convenio.cd_regra = pcdregra
       and tab_convenio.cd_multi_empresa = nMultiEmp
       AND (tab_convenio.cd_prestador = pnPrest or tab_convenio.cd_prestador is null)
	   AND (tab_convenio.cd_setor = pnSet or tab_convenio.cd_setor is null)
       AND tab_convenio.dt_vigencia = ( SELECT MAX( tab_conv.dt_vigencia )
                                                FROM dbamv.tab_convenio tab_conv
                                               WHERE tab_conv.sn_ativo = 'S'
                                                 AND tab_conv.cd_convenio = nConvenio
                                                 AND tab_conv.cd_con_pla = nPlano
                                                 AND tab_conv.cd_pro_fat = cProFat
                                                 AND tab_conv.cd_regra = pcdregra
                                                 AND tab_conv.dt_vigencia <= dReferencia
                                                 and tab_conv.cd_multi_empresa = nMultiEmp
                           					 	 AND (tab_conv.cd_prestador = pnPrest or tab_conv.cd_prestador is null)
                           					 	 AND (tab_conv.cd_setor = pnSet or tab_conv.cd_setor is null)
						)
    union
    SELECT NVL( tab_convenio.vl_tab_convenio, 0 ) vl_tab_convenio,
                tab_convenio.sn_usar_indice,
                tab_convenio.sn_horario_especial,
                tab_convenio.sn_filme,
                tab_convenio.cd_regra,
                tab_convenio.cd_prestador,
                tab_convenio.cd_setor
    	       ,'1' nr_ordem
           FROM dbamv.tab_convenio
          WHERE tab_convenio.sn_ativo = 'S'
            AND tab_convenio.cd_convenio = nConvenio
            AND tab_convenio.cd_con_pla is null
            AND tab_convenio.cd_pro_fat = cProFat
            AND tab_convenio.cd_regra = pcdregra
            and tab_convenio.cd_multi_empresa = nMultiEmp
			AND (tab_convenio.cd_prestador = pnPrest or tab_convenio.cd_prestador is null)
			AND (tab_convenio.cd_setor = pnSet or tab_convenio.cd_setor is null)
            AND tab_convenio.dt_vigencia = ( SELECT MAX( tab_conv.dt_vigencia )
                                                FROM dbamv.tab_convenio tab_conv
                                               WHERE tab_conv.sn_ativo = 'S'
                                                 AND tab_conv.cd_convenio = nConvenio
                                                 AND tab_conv.cd_con_pla is null
                                                 AND tab_conv.cd_pro_fat = cProFat
                                                 AND tab_conv.cd_regra = pcdregra
                                                 AND tab_conv.dt_vigencia <= dReferencia
                                                 and tab_conv.cd_multi_empresa = nMultiEmp
                           					 	 AND (tab_conv.cd_prestador = pnPrest or tab_conv.cd_prestador is null)
                           					 	 AND (tab_conv.cd_setor = pnSet or tab_conv.cd_setor is null))
            ORDER BY 6,7,5  DESC;
  --
  CURSOR c_acresdesc(nregra IN NUMBER, ngrupro IN NUMBER, ctpatdt IN VARCHAR2 , dDtVigencia IN DATE ) IS
    SELECT NVL(acresc_descontos.vl_perc_acrescimo, 0) vl_perc_acrescimo
         , NVL(acresc_descontos.vl_perc_desconto, 0) vl_perc_desconto
         , NVL(acresc_descontos.sn_vl_filme, 'S') sn_vl_filme
         , NVL(acresc_descontos.sn_vl_honorario, 'S') sn_vl_honorario
         , NVL(acresc_descontos.sn_vl_operacional, 'S') sn_vl_operacional
         , DECODE(
           ctpatdt
         , 'E', acresc_descontos.tp_atend_externo
         , 'U', acresc_descontos.tp_atend_urgeme
         , 'I', acresc_descontos.tp_atend_internacao
         , 'A', acresc_descontos.tp_atend_ambulatorial
         , 'H', acresc_descontos.tp_atend_homecare) sn_acres_desc
      FROM dbamv.acresc_descontos
     WHERE acresc_descontos.cd_regra(+) = nregra AND acresc_descontos.cd_gru_pro(+) = ngrupro
	 AND (  ( dDtVigencia BETWEEN dt_inicio_vigencia AND Nvl(dt_final_vigencia,SYSDATE) AND dbamv.pkg_mv2000.le_cliente = 420 )
                OR dbamv.pkg_mv2000.le_cliente <> 420 ); -- PDA 557275 - só valida a data de vigencia se for cliente Mãe de Deus
  --
  CURSOR c_regra(nconvenio IN NUMBER, nplano IN NUMBER, ntpaco IN NUMBER) IS
    SELECT regra.cd_regra
         , indice_acomodacao.vl_percentual_pago vl_percentual_sp
         , indice_acomodacao.vl_percentual_sd
         , indice_acomodacao.vl_percentual_sh
         , regra.sn_paga_horario_especial
      FROM dbamv.con_pla
         , dbamv.regra
         , dbamv.indice_acomodacao
         , dbamv.empresa_con_pla
     WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
           AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
           AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           AND empresa_con_pla.cd_convenio = nconvenio
           AND empresa_con_pla.cd_con_pla = nplano
           AND empresa_con_pla.cd_regra = regra.cd_regra(+)
           AND regra.cd_regra = indice_acomodacao.cd_regra(+) AND indice_acomodacao.cd_tip_acom(+) = ntpaco;
  --
  CURSOR c_regraexplicita(nregra IN NUMBER, ntpaco IN NUMBER) IS
    SELECT regra.cd_regra
         , regra.sn_paga_horario_especial
         , indice_acomodacao.vl_percentual_pago vl_percentual_sp
         , indice_acomodacao.vl_percentual_sd
         , indice_acomodacao.vl_percentual_sh
      FROM dbamv.regra
         , dbamv.indice_acomodacao
     WHERE regra.cd_regra = nregra AND regra.cd_regra = indice_acomodacao.cd_regra(+)
           AND indice_acomodacao.cd_tip_acom(+) = ntpaco;
  --
  CURSOR c_grupro(cprofat IN VARCHAR2) IS
    SELECT gru_pro.cd_gru_pro, gru_pro.tp_gru_pro, pro_fat.cd_por_ane
      FROM dbamv.pro_fat
         , dbamv.gru_pro
     WHERE pro_fat.cd_gru_pro = gru_pro.cd_gru_pro AND pro_fat.cd_pro_fat = cprofat;
  --
  CURSOR c_por_ane_tab(cprofat IN VARCHAR2, dreferencia IN DATE, nregra IN NUMBER, ngrupro IN NUMBER) IS
    SELECT por_ane_tab.cd_por_ane
      FROM dbamv.por_ane_tab
         , dbamv.itregra
     WHERE itregra.cd_regra = nregra AND itregra.cd_gru_pro = ngrupro
           AND por_ane_tab.cd_tab_fat = itregra.cd_tab_fat AND por_ane_tab.cd_pro_fat = cprofat
           AND por_ane_tab.dt_vigencia =
                (SELECT MAX(porte.dt_vigencia)
                   FROM dbamv.por_ane_tab porte
                      , dbamv.itregra itregra
                  WHERE itregra.cd_regra = nregra AND itregra.cd_gru_pro = ngrupro
                        AND porte.cd_tab_fat = itregra.cd_tab_fat AND porte.cd_pro_fat = cprofat
                        AND porte.dt_vigencia <= dreferencia);
  --
  CURSOR c_itregra(nregra IN NUMBER, ngrupro IN NUMBER) IS
    SELECT NVL(itregra.vl_percetual_pago, 0) vl_percentual_itregra
         , itregra.cd_tab_fat
         , tab_fat.tp_tab_fat
         , nvl(itregra.tp_hor_esp_sd, 'T') tp_hor_esp_sd
         , itregra.cd_horario
         , itregra.tp_valor_base
    FROM   dbamv.itregra
         , dbamv.tab_fat
     WHERE itregra.cd_tab_fat = tab_fat.cd_tab_fat AND itregra.cd_tab_fat = tab_fat.cd_tab_fat
       AND itregra.cd_regra = nregra AND itregra.cd_gru_pro = ngrupro;
  --
  CURSOR c_indice(nindice IN NUMBER, dreferencia IN DATE, ngrupro IN NUMBER, ctpatend IN VARCHAR2) IS
    SELECT NVL(val_indice_gru_pro.vl_indice
         , NVL(val_indice_tp_atend.vl_indice, val_indice.vl_indice)) vl_ind
         , NVL(val_indice_gru_pro.vl_honorario
         , NVL(val_indice_tp_atend.vl_honorario, val_indice.vl_honorario)) vl_honor
         , NVL(val_indice_gru_pro.vl_m2filme
         , NVL(val_indice_tp_atend.vl_m2filme, val_indice.vl_m2filme)) vl_m2filme
         , NVL(val_indice_gru_pro.vl_uco, NVL(val_indice_tp_atend.vl_uco, val_indice.vl_uco)) vl_uco
    FROM   dbamv.indice
         , dbamv.val_indice
         , dbamv.val_indice_gru_pro
         , dbamv.val_indice_tp_atend
     WHERE indice.cd_indice = nindice AND indice.cd_indice = val_indice.cd_indice(+)
           AND val_indice.cd_val_indice = val_indice_gru_pro.cd_val_indice(+)
           AND val_indice_gru_pro.cd_gru_pro(+) = ngrupro
           AND DECODE(val_indice_gru_pro.tp_atendimento(+), 'T', ctpatend,
                      val_indice_gru_pro.tp_atendimento(+) )               = ctpatend
           AND val_indice_tp_atend.tp_atendimento(+) = ctpatend
           AND val_indice.cd_val_indice = val_indice_tp_atend.cd_val_indice(+)
           AND val_indice.dt_vigencia = ( SELECT MAX(val.dt_vigencia)
                                            FROM dbamv.val_indice val
                                           WHERE val.cd_indice = nindice AND val.dt_vigencia <= dreferencia)
           AND val_indice.cd_val_indice = val_indice_gru_pro.cd_val_indice(+);
  --
  CURSOR c_porteanest(nporte IN NUMBER, ntabfat IN NUMBER, dreferencia IN DATE) IS
    SELECT NVL(vl_porte, 0) vl_porte
      FROM dbamv.val_porte
     WHERE val_porte.cd_por_ane = nporte AND val_porte.cd_tab_fat = ntabfat
       AND val_porte.dt_vigencia =
                (SELECT MAX(vl_por.dt_vigencia)
                   FROM dbamv.val_porte vl_por
                  WHERE vl_por.cd_por_ane = nporte AND vl_por.cd_tab_fat = ntabfat
                        AND vl_por.dt_vigencia <= dreferencia);
  --
  CURSOR c_horesp(
    nhoresp  IN  NUMBER
  , nregra   IN  NUMBER
  , ndia     IN  NUMBER
  , dhora    IN  DATE
  , ctpatdt  IN  VARCHAR2) IS
    SELECT ithorario_especial.cd_horario
         , DECODE(
             ctpatdt
           , 'E', regra.tp_atend_externo
           , 'U', regra.tp_atend_urgeme
           , 'I', regra.tp_atend_internacao
           , 'A', regra.tp_atend_ambulatorial
           , 'H', regra.tp_atend_homecare) sn_hor_esp
      FROM dbamv.ithorario_especial
         , dbamv.regra
     WHERE ithorario_especial.cd_horario = nhoresp AND regra.cd_regra = nregra
           AND ithorario_especial.cd_dia = ndia
           AND TO_CHAR(dhora, 'hh24:mi') BETWEEN TO_CHAR(ithorario_especial.hr_inicio, 'hh24:mi')
                                             AND TO_CHAR(ithorario_especial.hr_fim, 'hh24:mi');
  --
  CURSOR c_feriado(ddatareferencia IN DATE) IS
    SELECT feriado.ds_feriado
      FROM dbamv.feriado
     WHERE feriado.nr_dia = TO_CHAR(ddatareferencia, 'dd')
           AND feriado.nr_mes = TO_CHAR(ddatareferencia, 'mm')
           AND((feriado.nr_ano = 0) OR(feriado.nr_ano = TO_CHAR(ddatareferencia, 'yyyy')));
  --
  CURSOR c_perchoresp(nhorario IN NUMBER) IS
    SELECT horario_especial.vl_percentual
      FROM dbamv.horario_especial
     WHERE horario_especial.cd_horario = nhorario;
  --
  CURSOR c_atimed IS
    SELECT ati_med.vl_percentual_pago, ati_med.tp_funcao
      FROM dbamv.ati_med
     WHERE ati_med.cd_ati_med = ctpatimed;
  --
  CURSOR c_tabfilme(ntabfat IN NUMBER, dreferencia IN DATE) IS
    SELECT filme_tab.qt_m2_filme
      FROM dbamv.filme_tab
     WHERE filme_tab.cd_tab_fat = ntabfat AND filme_tab.cd_pro_fat = vprofat
           AND filme_tab.dt_vigencia =
                (SELECT MAX(filme.dt_vigencia)
                   FROM dbamv.filme_tab filme
                  WHERE filme.cd_tab_fat = ntabfat AND filme.cd_pro_fat = vprofat
                        AND filme.dt_vigencia <= dreferencia);
  --
  CURSOR c_indice_profat(
    cprofat      IN  VARCHAR2
  , nregra       IN  NUMBER
  , ngrupro      IN  NUMBER
  , ncdtip_acom  IN  NUMBER) IS
    SELECT   indice_pro_fat.vl_percentual
        FROM dbamv.indice_pro_fat
       WHERE indice_pro_fat.cd_regra = nregra
             AND(indice_pro_fat.cd_pro_fat = cprofat OR indice_pro_fat.cd_pro_fat IS NULL)
             AND(indice_pro_fat.cd_tip_acom = ncdtip_acom OR indice_pro_fat.cd_tip_acom IS NULL)
             AND(indice_pro_fat.cd_gru_pro = ngrupro OR indice_pro_fat.cd_gru_pro IS NULL)
    ORDER BY NVL(cd_pro_fat, 0) DESC
           , NVL(cd_tip_acom, 0) DESC;
  --
  CURSOR c_valexced(dreferencia IN DATE, nregra IN NUMBER) IS
    SELECT val_exced.qt_inicial
         , val_exced.qt_subsequente
         , val_exced.vl_subsequente
         , val_exced.vl_percentual_sub
      FROM dbamv.val_exced
     WHERE val_exced.cd_pro_fat = NVL(cprofatexced, vprofat) AND val_exced.cd_regra = nregra
           AND val_exced.dt_vigencia =
                (SELECT MAX(exced.dt_vigencia)
                   FROM dbamv.val_exced exced
                  WHERE exced.cd_pro_fat = NVL(cprofatexced, vprofat) AND exced.cd_regra = nregra
                        AND exced.dt_vigencia <= dreferencia);
  --
  CURSOR csomaregtotal(ncta IN NUMBER) IS
    SELECT SUM(itreg_fat_espelho.qt_lancamento) total
      FROM dbamv.itreg_fat_espelho
     WHERE itreg_fat_espelho.cd_reg_fat = ncta AND itreg_fat_espelho.cd_pro_fat = vprofat;
  CURSOR c_franquia IS
    SELECT franquias.vl_particip, franquias.qt_pontos,
           franquias.vl_perc_particip
      FROM dbamv.franquias
     WHERE franquias.cd_franquia = ncdfranquia
       AND ( (franquias.cd_gru_pro IS NULL and franquias.qt_pontos is not null)
           or franquias.vl_particip is not null
	   or franquias.vl_perc_particip is not null );
  --
  CURSOR c_convpla IS
    SELECT empresa_con_pla.cd_indice
      FROM dbamv.convenio
         , dbamv.con_pla
         , dbamv.empresa_con_pla
     WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
           AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
           AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           AND convenio.cd_convenio = ncodconvenio AND con_pla.cd_convenio = convenio.cd_convenio
           AND con_pla.cd_con_pla = ncodplano AND ncdconta IS NULL
    UNION
    SELECT empresa_con_pla.cd_indice
      FROM dbamv.convenio
         , dbamv.con_pla
         , dbamv.empresa_con_pla
     WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
           AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
           AND empresa_con_pla.cd_multi_empresa IN(SELECT cd_multi_empresa
                                                     FROM dbamv.reg_fat
                                                    WHERE cd_reg_fat = ncdconta)
           AND convenio.cd_convenio = ncodconvenio AND con_pla.cd_convenio = convenio.cd_convenio
           AND con_pla.cd_con_pla = ncodplano AND ctipoatend = 'I'
    UNION
    SELECT empresa_con_pla.cd_indice
      FROM dbamv.convenio
         , dbamv.con_pla
         , dbamv.empresa_con_pla
     WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
           AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
           AND empresa_con_pla.cd_multi_empresa IN(SELECT cd_multi_empresa
                                                     FROM dbamv.reg_amb
                                                    WHERE cd_reg_amb = ncdconta)
           AND convenio.cd_convenio = ncodconvenio AND con_pla.cd_convenio = convenio.cd_convenio
           AND con_pla.cd_con_pla = ncodplano AND ctipoatend <> 'I';
  --
  CURSOR c_acoplam IS
    SELECT reg_acop.vl_percentual
         , reg_acop.vl_particip
         , reg_acop.qt_pontos
         , reg_acop.cd_convenio_conta
         , reg_acop.cd_con_pla_conta
         , reg_acop.cd_convenio
         , reg_acop.cd_con_pla
      FROM dbamv.regra_acoplamento reg_acop
         , dbamv.empresa_convenio
     WHERE reg_acop.cd_convenio = empresa_convenio.cd_convenio
           AND empresa_convenio.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           AND reg_acop.cd_regra_acoplamento = ncdregraacop;
  CURSOR c_hospital IS
    SELECT cd_hospital
      FROM dbamv.hospital
     WHERE hospital.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
  --
  CURSOR c_acresdesc_proc(nregra IN NUMBER, cprofat IN VARCHAR2, ctpatdt IN VARCHAR2 , dDtVigencia IN DATE ) IS
    SELECT NVL(acresc_descontos_proc.vl_perc_acrescimo, 0) vl_perc_acrescimo
         , NVL(acresc_descontos_proc.vl_perc_desconto, 0) vl_perc_desconto
         , NVL(acresc_descontos_proc.sn_vl_filme, 'S') sn_vl_filme
         , NVL(acresc_descontos_proc.sn_vl_honorario, 'S') sn_vl_honorario
         , NVL(acresc_descontos_proc.sn_vl_operacional, 'S') sn_vl_operacional
         , DECODE(
           ctpatdt
         , 'E', acresc_descontos_proc.tp_atend_externo
         , 'U', acresc_descontos_proc.tp_atend_urgeme
         , 'I', acresc_descontos_proc.tp_atend_internacao
         , 'A', acresc_descontos_proc.tp_atend_ambulatorial
         , 'H', acresc_descontos_proc.tp_atend_homecare) sn_acres_desc
      FROM dbamv.acresc_descontos_proc
     WHERE acresc_descontos_proc.cd_regra(+) = nregra AND acresc_descontos_proc.cd_pro_fat(+) = cprofat
	 AND (  ( dDtVigencia BETWEEN dt_inicio_vigencia AND Nvl(dt_final_vigencia,SYSDATE) AND dbamv.pkg_mv2000.le_cliente = 420 )
                OR dbamv.pkg_mv2000.le_cliente <> 420 ); -- PDA 557275 - só valida a data de vigencia se for cliente Mãe de Deus
  CURSOR cpormed IS
    SELECT p.cd_porte_medico, p.ds_porte_medico
      FROM dbamv.pro_fat_hierarquizado v
         , dbamv.porte_medico p
     WHERE v.cd_pro_fat = vprofat AND v.cd_porte_medico = p.cd_porte_medico;
  CURSOR cvalpormed(npormed IN NUMBER, ntabfat IN NUMBER) IS
    SELECT vl_porte_medico
      FROM dbamv.val_porte_medico
     WHERE cd_tab_fat = ntabfat AND cd_porte_medico = npormed
           AND TRUNC(dt_vigencia) =
                (SELECT TRUNC(MAX(v.dt_vigencia))
                   FROM dbamv.val_porte_medico v
                  WHERE v.cd_tab_fat = ntabfat AND v.cd_porte_medico = npormed
                        AND TRUNC(v.dt_vigencia) <= TRUNC(vddatarefer));
  --
  CURSOR cvaluco(ntabfat IN NUMBER) IS
    SELECT vl_uco
      FROM dbamv.val_uco
     WHERE cd_tab_fat = ntabfat
           AND TRUNC(dt_vigencia) =
                         (SELECT TRUNC(MAX(v.dt_vigencia))
                            FROM dbamv.val_uco v
                           WHERE v.cd_tab_fat = ntabfat AND TRUNC(v.dt_vigencia) <= TRUNC(vddatarefer));
  --
  CURSOR cpormedprofat(ntabfat IN NUMBER) IS
    SELECT p.cd_porte_medico, p.ds_porte_medico
      FROM dbamv.porte_medico_pro_fat e
         , dbamv.porte_medico p
     WHERE e.cd_tab_fat = ntabfat AND e.cd_pro_fat = vprofat
           AND e.cd_porte_medico = p.cd_porte_medico
           AND TRUNC(e.dt_vigencia) =
                (SELECT TRUNC(MAX(v.dt_vigencia))
                   FROM dbamv.porte_medico_pro_fat v
                  WHERE v.cd_tab_fat = ntabfat AND v.cd_pro_fat = vprofat
                        AND TRUNC(v.dt_vigencia) <= TRUNC(vddatarefer));
  CURSOR c_itregra_porte(nregra IN NUMBER, ngrupro IN NUMBER) IS
    SELECT itregra.cd_tab_fat
      FROM dbamv.itregra
     WHERE itregra.cd_regra = nregra AND itregra.cd_gru_pro = ngrupro;
  --
  ncdtabfatporte        NUMBER;
  --
  CURSOR catend(ncta IN NUMBER, nlct IN NUMBER) IS
    SELECT i.cd_atendimento
      FROM dbamv.itreg_amb_espelho i
     WHERE i.cd_reg_amb = ncta AND i.cd_lancamento = nlct;
  --
  CURSOR cregraatend IS
    SELECT convenio.sn_regra_atendimento_conta
      FROM dbamv.convenio
     WHERE cd_convenio = ncodconvenio;
  --
  CURSOR clancminhosp(pncdgrupro IN NUMBER) IS
    SELECT MIN(itreg_fat_espelho.cd_lancamento)
      FROM dbamv.itreg_fat_espelho
         , dbamv.pro_fat
     WHERE itreg_fat_espelho.cd_reg_fat = ncdconta AND pro_fat.cd_gru_pro = pncdgrupro
           AND pro_fat.cd_pro_fat = itreg_fat_espelho.cd_pro_fat AND itreg_fat_espelho.sn_pertence_pacote = 'N'
           AND NVL(itreg_fat_espelho.tp_pagamento, 'P') <> 'C';
  --
  -- Cursor para pegar o primeiro lançamento na conta ambulatorial.
  CURSOR clancminamb(pncdgrupro IN NUMBER) IS
    SELECT MIN(itreg_amb_espelho.cd_lancamento)
      FROM dbamv.itreg_amb_espelho
         , dbamv.pro_fat
     WHERE itreg_amb_espelho.cd_reg_amb = ncdconta AND pro_fat.cd_gru_pro = pncdgrupro
           AND pro_fat.cd_pro_fat = itreg_amb_espelho.cd_pro_fat
           AND itreg_amb_espelho.cd_atendimento =
                                     (SELECT cd_atendimento
                                        FROM dbamv.itreg_amb_espelho
                                       WHERE cd_lancamento = ncdlancamento AND cd_reg_amb = ncdconta)
           AND itreg_amb_espelho.sn_pertence_pacote = 'N' AND NVL(itreg_amb_espelho.tp_pagamento, 'P') <> 'C';
  --
  CURSOR cvlpercent(pncdtabfat IN NUMBER, pncdgrupro IN NUMBER) IS
    SELECT vl_percentual
      FROM dbamv.tab_fat_gru_pro
     WHERE cd_tab_fat = pncdtabfat AND cd_gru_pro = pncdgrupro;
  --
  ncdatend              NUMBER := 0;
  CURSOR c_valentrega IS
    SELECT ender_coleta_entrega.vl_servico
      FROM dbamv.ender_coleta_entrega
         , dbamv.itreg_fat_espelho
     WHERE itreg_fat_espelho.cd_lancamento = ncdlancamento AND itreg_fat_espelho.cd_reg_fat = ncdconta
           AND itreg_fat_espelho.tp_mvto = 'SADT' AND itreg_fat_espelho.cd_mvto = ender_coleta_entrega.cd_ped_lab
           AND itreg_fat_espelho.cd_itmvto = ender_coleta_entrega.cd_ped_lab_ender
    UNION
    SELECT ender_coleta_entrega.vl_servico
      FROM dbamv.ender_coleta_entrega
         , dbamv.itreg_fat_espelho
     WHERE itreg_fat_espelho.cd_lancamento = ncdlancamento AND itreg_fat_espelho.cd_reg_fat = ncdconta
           AND itreg_fat_espelho.tp_mvto = 'Imagem' AND itreg_fat_espelho.cd_mvto = ender_coleta_entrega.cd_ped_rx
           AND itreg_fat_espelho.cd_itmvto = ender_coleta_entrega.cd_ped_lab_ender
    UNION
    SELECT ender_coleta_entrega.vl_servico
      FROM dbamv.ender_coleta_entrega
         , dbamv.itreg_amb_espelho
     WHERE itreg_amb_espelho.cd_lancamento = ncdlancamento AND itreg_amb_espelho.cd_reg_amb = ncdconta
           AND itreg_amb_espelho.tp_mvto = 'SADT' AND itreg_amb_espelho.cd_mvto = ender_coleta_entrega.cd_ped_lab
           AND itreg_amb_espelho.cd_itmvto = ender_coleta_entrega.cd_ped_lab_ender
    UNION
    SELECT ender_coleta_entrega.vl_servico
      FROM dbamv.itreg_amb_espelho
         , dbamv.ender_coleta_entrega
     WHERE itreg_amb_espelho.cd_lancamento = ncdlancamento AND itreg_amb_espelho.cd_reg_amb = ncdconta
           AND itreg_amb_espelho.tp_mvto = 'Imagem' AND itreg_amb_espelho.cd_mvto = ender_coleta_entrega.cd_ped_rx
           AND itreg_amb_espelho.cd_itmvto = ender_coleta_entrega.cd_ped_lab_ender;
  --
  CURSOR c_procentrega IS
    SELECT config_pssd.cd_pro_fat_coleta cd_pro_fat
      FROM dbamv.config_pssd
     WHERE config_pssd.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           AND config_pssd.cd_pro_fat_coleta = vprofat
    UNION
    SELECT config_pssd.cd_pro_fat_laudo cd_pro_fat
      FROM dbamv.config_pssd
     WHERE config_pssd.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           AND config_pssd.cd_pro_fat_laudo = vprofat
    UNION
    SELECT config_psdi.cd_pro_fat_laudo cd_pro_fat
      FROM dbamv.config_psdi
     WHERE config_psdi.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           AND config_psdi.cd_pro_fat_laudo = vprofat;
  CURSOR c_pacote IS
    SELECT DECODE(
           conta_pacote.sn_principal
          ,'S'
          ,1
          ,dbamv.pack_ffcv_espelho.fnc_retorna_percentual_pacote(reg_fat.cd_atendimento
          ,itreg_fat_espelho.cd_reg_fat, itreg_fat_espelho.cd_lancamento)) vl_perc_pac_secund
          ,pacote.cd_pacote cd_pacote
          ,reg_fat.cd_atendimento
      FROM dbamv.conta_pacote
         , dbamv.pacote
         , dbamv.itreg_fat_espelho
         , dbamv.reg_fat
     WHERE conta_pacote.cd_lancamento_fat = ncdlancamento
       AND conta_pacote.cd_reg_fat = ncdconta
       AND conta_pacote.cd_pacote = pacote.cd_pacote
       AND conta_pacote.cd_lancamento_fat = itreg_fat_espelho.cd_lancamento
       AND conta_pacote.cd_reg_fat = itreg_fat_espelho.cd_reg_fat
       AND reg_fat.cd_reg_fat = itreg_fat_espelho.cd_reg_fat
       AND EXISTS( SELECT 'x'
                     FROM dbamv.itreg_fat_espelho l
                    WHERE l.cd_reg_fat = conta_pacote.cd_reg_fat
                      AND l.cd_conta_pacote = conta_pacote.cd_conta_pacote)
    UNION
    SELECT DECODE(
             conta_pacote.sn_principal
           , 'S', 1
           ,
             dbamv.pack_ffcv_espelho.fnc_retorna_percentual_pacote(itreg_amb_espelho.cd_atendimento
             , itreg_amb_espelho.cd_reg_amb, itreg_amb_espelho.cd_lancamento)) vl_perc_pac_secund
    ,      pacote.cd_pacote cd_pacote
         , itreg_amb_espelho.cd_atendimento
      FROM dbamv.conta_pacote
         , dbamv.pacote
         , dbamv.itreg_amb_espelho
     WHERE conta_pacote.cd_lancamento_amb = ncdlancamento AND conta_pacote.cd_reg_amb = ncdconta
       AND conta_pacote.cd_pacote = pacote.cd_pacote
       AND conta_pacote.cd_lancamento_amb = itreg_amb_espelho.cd_lancamento
       AND conta_pacote.cd_reg_amb = itreg_amb_espelho.cd_reg_amb
        AND EXISTS(
                SELECT 'x'
                  FROM dbamv.itreg_amb_espelho l
                 WHERE l.cd_reg_amb = conta_pacote.cd_reg_amb
                   AND l.cd_conta_pacote = conta_pacote.cd_conta_pacote);
  --
  CURSOR c_valorpacote(ncdpacote IN NUMBER, ncdatend IN NUMBER) IS
    SELECT vl_contrato_adiant
      FROM dbamv.contrato_adiantamento
     WHERE cd_pacote = ncdpacote AND cd_atendimento = ncdatend;
  CURSOR c_agenda IS
    SELECT it_agenda_central.vl_negociado
      FROM dbamv.it_agenda_central
         , dbamv.itreg_amb_espelho
     WHERE itreg_amb_espelho.cd_lancamento = ncdlancamento AND itreg_amb_espelho.cd_reg_amb = ncdconta
           AND itreg_amb_espelho.cd_it_agenda_central = it_agenda_central.cd_it_agenda_central;
  CURSOR cpercacresexame(nregra IN NUMBER, cprofat IN VARCHAR2, ctpatdt IN VARCHAR2) IS
    SELECT NVL(acresc_descontos_proc.vl_perc_acrescimo_exame, 0) vl_perc_acrescimo_exame
         , DECODE(
             ctpatdt
           , 'E', acresc_descontos_proc.tp_atend_externo
           , 'U', acresc_descontos_proc.tp_atend_urgeme
           , 'I', acresc_descontos_proc.tp_atend_internacao
           , 'A', acresc_descontos_proc.tp_atend_ambulatorial
           , 'H', acresc_descontos_proc.tp_atend_homecare) sn_incluir_acres_exame
      FROM dbamv.exa_rx
         , dbamv.acresc_descontos_proc
     WHERE acresc_descontos_proc.cd_regra(+) = nregra AND acresc_descontos_proc.cd_pro_fat(+) = cprofat
       AND exa_rx.exa_rx_cd_pro_fat = acresc_descontos_proc.cd_pro_fat
       AND NVL(exa_rx.sn_incluir_acresc, 'N') = 'S';
  --
  CURSOR cconvenioatendffis IS
    SELECT config_ffis.cd_convenio
      FROM dbamv.config_ffis
     WHERE config_ffis.cd_convenio = ncodconvenio
       AND cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
  --
  CURSOR cconvenioatendffas IS
    SELECT config_ffas.cd_convenio
      FROM dbamv.config_ffas
     WHERE config_ffas.cd_convenio = ncodconvenio
       AND cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
  --
  ncdconvatend          NUMBER := NULL;
  v_percacresexame      cpercacresexame%ROWTYPE;
  --
  CURSOR cdadoscdgrufat IS
    SELECT gru_pro.cd_gru_fat
      FROM dbamv.gru_pro
         , dbamv.pro_fat
     WHERE pro_fat.cd_pro_fat = vprofat AND pro_fat.cd_gru_pro = gru_pro.cd_gru_pro;
  --
  CURSOR cdadosvlpercentual(ncdregra IN NUMBER, ngrupro IN NUMBER) IS
    SELECT horario_especial.vl_percentual
      FROM dbamv.horario_especial
         , dbamv.regra
         , dbamv.itregra
    ,      dbamv.tab_fat
     WHERE itregra.cd_regra = regra.cd_regra
       AND itregra.cd_tab_fat = tab_fat.cd_tab_fat
       AND itregra.cd_horario = horario_especial.cd_horario AND itregra.cd_regra = ncdregra
       AND itregra.cd_gru_pro = ngrupro;
  --
  CURSOR cverconvprofat IS
    SELECT COUNT(*)
      FROM dbamv.convenio_pro_fat
     WHERE convenio_pro_fat.cd_convenio = ncodconvenio
           AND convenio_pro_fat.cd_pro_fat = cprocedimento;
  --
  nconvprofat           NUMBER;
  --
  CURSOR ccalcsemexcessao IS
    SELECT valor
      FROM dbamv.configuracao
     WHERE configuracao.cd_sistema = 'FFCV' AND configuracao.chave = 'SN_CALCULA_TAXA_EXCESSAO'
           AND configuracao.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
  --
  vcalcsemexcessao      VARCHAR2(1);
  --
  CURSOR c_tppagamento IS
    SELECT NVL(itreg_amb_espelho.tp_pagamento, 'P') tp_pagamento
      FROM dbamv.itreg_amb_espelho
     WHERE itreg_amb_espelho.cd_lancamento = ncdlancamento AND itreg_amb_espelho.cd_reg_amb = ncdconta
           AND ctipoatend IN('A', 'E', 'U')
    UNION
    SELECT NVL(itreg_fat_espelho.tp_pagamento, 'P') tp_pagamento
      FROM dbamv.itreg_fat_espelho
     WHERE itreg_fat_espelho.cd_lancamento = ncdlancamento AND itreg_fat_espelho.cd_reg_fat = ncdconta
           AND ctipoatend = 'I'
           AND NOT EXISTS(
                   SELECT 'x'
                     FROM dbamv.itlan_med_espelho
                    WHERE itlan_med_espelho.cd_reg_fat = ncdconta
                          AND itlan_med_espelho.cd_lancamento = ncdlancamento)
    UNION
    SELECT 'P' tp_pagamento
      FROM dbamv.itreg_fat_espelho
     WHERE itreg_fat_espelho.cd_lancamento = ncdlancamento AND itreg_fat_espelho.cd_reg_fat = ncdconta
           AND ctipoatend = 'I'
           AND EXISTS(
                SELECT 'x'
                  FROM dbamv.itlan_med_espelho
                 WHERE itlan_med_espelho.cd_reg_fat = ncdconta AND itlan_med_espelho.cd_lancamento = ncdlancamento
                       AND NVL(itlan_med_espelho.tp_pagamento, 'P') <> 'C')
    UNION
    SELECT 'C' tp_pagamento
      FROM dbamv.itreg_fat_espelho
     WHERE itreg_fat_espelho.cd_lancamento = ncdlancamento AND itreg_fat_espelho.cd_reg_fat = ncdconta
           AND ctipoatend = 'I'
           AND EXISTS(
                   SELECT 'x'
                     FROM dbamv.itlan_med_espelho
                    WHERE itlan_med_espelho.cd_reg_fat = ncdconta
                          AND itlan_med_espelho.cd_lancamento = ncdlancamento)
           AND NOT EXISTS(
                SELECT 'x'
                  FROM dbamv.itlan_med_espelho
                 WHERE itlan_med_espelho.cd_reg_fat = ncdconta AND itlan_med_espelho.cd_lancamento = ncdlancamento
                       AND NVL(itlan_med_espelho.tp_pagamento, 'P') <> 'C');
  --
  ctppagamento          VARCHAR2(1);
  --
  CURSOR clocgrupromult(pcdgfrupro IN NUMBER) IS
    SELECT COUNT(*) qtd_gru_pro
      FROM dbamv.configuracao
     WHERE chave = 'CD_GRU_MULTIPLOS'
       AND valor LIKE '%,' || pcdgfrupro || ',%';
  --
  vnqtd_gru_pro         NUMBER;
  --
  CURSOR cincidencia IS
    SELECT rela.cd_pro_fat, rela.vl_percentual
      FROM dbamv.con_pla
         , dbamv.regra
         , dbamv.val_pro_relacionado rela
         , dbamv.empresa_con_pla
     WHERE empresa_con_pla.cd_convenio = con_pla.cd_convenio
           AND empresa_con_pla.cd_con_pla = con_pla.cd_con_pla
           AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
           AND rela.cd_pro_fat = cprocedimento AND con_pla.cd_convenio = ncodconvenio
           AND con_pla.cd_con_pla = ncodplano AND rela.tp_lancamento = 'A' AND rela.tp_valor = 'P'
           AND rela.sn_incidencia_exame = 'S'
           AND(
               (ctipoatend = 'H' AND rela.tp_atend_homecare = 'S')
               OR(ctipoatend = 'E' AND rela.tp_atend_externo = 'S')
               OR(ctipoatend = 'U' AND rela.tp_atend_urgeme = 'S')
               OR(ctipoatend = 'A' AND rela.tp_atend_ambulatorial = 'S')
               OR(ctipoatend = 'I' AND rela.tp_atend_internacao = 'S'))
           AND con_pla.cd_regra = regra.cd_regra AND rela.cd_regra = regra.cd_regra
           AND dt_vigencia IN(
                SELECT MAX(vpr.dt_vigencia)
                  FROM dbamv.val_pro_relacionado vpr
                 WHERE vpr.dt_vigencia <= vddatarefer AND vpr.cd_regra = rela.cd_regra
                       AND vpr.cd_pro_fat_pai = rela.cd_pro_fat_pai
                       AND vpr.cd_pro_fat = rela.cd_pro_fat);
  --
  CURSOR ckit IS
    SELECT DISTINCT 'S' valor
               FROM dbamv.itformula
                  , dbamv.formula
                  , dbamv.produto
              WHERE formula.cd_formula = itformula.cd_formula
                    AND produto.cd_produto = formula.cd_produto
                    AND produto.cd_pro_fat = cprocedimento
    UNION
    SELECT DISTINCT 'S' valor
               FROM dbamv.itformula
                  , dbamv.formula
                  , dbamv.produto
                  , dbamv.kit_equip
              WHERE formula.cd_formula = itformula.cd_formula
                    AND produto.cd_produto = formula.cd_produto
                    AND formula.cd_formula = kit_equip.cd_formula
                    AND produto.cd_pro_fat = cprocedimento
    UNION
    SELECT DISTINCT 'S' valor
               FROM dbamv.itformula
                  , dbamv.formula
                  , dbamv.produto
                  , dbamv.kit_sangue
              WHERE formula.cd_formula = itformula.cd_formula
                    AND produto.cd_produto = formula.cd_produto
                    AND formula.cd_formula = kit_sangue.cd_formula
                    AND produto.cd_pro_fat = cprocedimento
    UNION
    SELECT DISTINCT 'S' valor
               FROM dbamv.itformula
                  , dbamv.formula
                  , dbamv.produto
                  , dbamv.kit_pro_fat
              WHERE formula.cd_formula = itformula.cd_formula
                    AND produto.cd_produto = formula.cd_produto
                    AND formula.cd_formula = kit_pro_fat.cd_formula
                    AND kit_pro_fat.cd_pro_fat = cprocedimento;
  --
  CURSOR cconfig IS
    SELECT NVL(valor, 'N') valor
      FROM dbamv.configuracao
     WHERE cd_sistema = 'FFCV'
       AND chave = 'SN_KIT_MGES_SEM_REGRA_NO_FFCV';
  --
  vckit                 ckit%ROWTYPE;
  vcconfig              cconfig%ROWTYPE;
  baplicaregraexced     BOOLEAN;
  --
  CURSOR c_setorexec IS
    SELECT cd_setor_produziu
      FROM dbamv.itreg_amb_espelho
     WHERE itreg_amb_espelho.cd_lancamento = ncdlancamento
       AND itreg_amb_espelho.cd_reg_amb = ncdconta
       AND ctipoatend IN('A', 'E', 'U')
    UNION
    SELECT cd_setor_produziu
      FROM dbamv.itreg_fat_espelho
     WHERE itreg_fat_espelho.cd_lancamento = ncdlancamento
       AND itreg_fat_espelho.cd_reg_fat = ncdconta
       AND ctipoatend = 'I';
  --
  ncdsetorexec          dbamv.setor.cd_setor%TYPE;
  --
  CURSOR cvalrelac IS
    SELECT   COUNT(*)
        FROM dbamv.val_pro_relacionado
       WHERE val_pro_relacionado.cd_regra = nregra
             AND val_pro_relacionado.cd_pro_fat_pai = cprocedimento
             AND TRUNC(val_pro_relacionado.dt_vigencia) <= TRUNC(vddatarefer)
    ORDER BY val_pro_relacionado.dt_vigencia DESC;
  --
  nvalrelac             NUMBER;
  --
  CURSOR cregralanca IS
    SELECT cd_regra_lancamento
      FROM dbamv.itreg_fat_espelho
     WHERE cd_reg_fat = ncdconta
       AND cd_lancamento = ncdlancamento
       AND cd_pro_fat = cprocedimento
    UNION ALL
    SELECT cd_regra_lancamento
      FROM dbamv.itreg_amb_espelho
     WHERE cd_reg_amb = ncdconta
       AND cd_lancamento = ncdlancamento
       AND cd_pro_fat = cprocedimento;
  --
  Cursor cSnOpmeValCatPro is
   Select configuracao.valor
     from dbamv.configuracao
    where configuracao.cd_sistema       = 'FFCV'
      and upper(configuracao.chave)     = 'SN_OPME_VALORIZA_CAT_PRO'
      and configuracao.cd_multi_empresa = Dbamv.Pkg_Mv2000.Le_Empresa;
  --
  cursor cConfConvTrunca is
    select valor
      from dbamv.configuracao
     where cd_sistema = 'FFCV'
       and cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
       and chave = 'CD_CONV_NAO_ARREDONDA_VALOR';
  --
  cursor cDt_Atendimento (pCd_Reg_Fat in dbamv.reg_fat.cd_reg_fat%type) is
     select dt_atendimento, hr_atendimento
	   from dbamv.atendime, dbamv.reg_fat
	  where atendime.tp_atendimento in ('I', 'H')
      and reg_fat.cd_atendimento = atendime.cd_atendimento
	    and reg_fat.cd_reg_fat     = pCd_Reg_Fat;
  --
  cursor cParam_Conv is
     select valor
      from dbamv.configuracao
     where cd_sistema = 'FFCV'
       and cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
       and chave = 'CD_CONVENIO_VALORIZA_DT_INTERNACAO';
  --
  cursor cBras_Indices is
     select 1
       from dbamv.imp_bra
      where cd_pro_fat = cprocedimento;
  /*PDA.: 476455 - Emanoel Deivison (inicio)*/
  cursor cExcPercCobranca(pvCdProFat in varchar, pvCdAtiMed in varchar, pnCdRegra in number, pnCdGruPro in number, pnCdTabFat in number) is
      select  exc.cd_gru_pro,
              exc.cd_tab_fat,
              exc.cd_regra,
              exc.cd_ati_med,
              exc.vl_percentual_pago
        from  dbamv.regra,
              dbamv.itregra,
              dbamv.pro_fat,
              dbamv.excecao_percentual_cobranca exc
        where regra.cd_regra                     = itregra.cd_regra
          and itregra.cd_gru_pro                 = pro_fat.cd_gru_pro
          and pro_fat.cd_pro_fat                 = Nvl(exc.cd_pro_fat, pro_fat.cd_pro_fat)
          and itregra.cd_regra                   = exc.cd_regra
          and itregra.cd_gru_pro                 = exc.cd_gru_pro(+)
          and itregra.cd_tab_fat                 = exc.cd_tab_fat(+)
          and (exc.cd_pro_fat                    = pvCdProFat         or exc.cd_pro_fat is null)
          and (exc.cd_ati_med                    = pvCdAtiMed         or exc.cd_ati_med is null)
          and exc.cd_regra                       = pnCdRegra
          and exc.cd_gru_pro                     = pnCdGruPro
          and exc.cd_tab_fat                     = pnCdTabFat;
  vcExcPercCobranca cExcPercCobranca%rowtype;
  /*PDA.: 476455 - Emanoel Deivison (fim)*/
  --PDA 557275 - Inicio
  -- Para o cliente Mãe de Deus, se para o convênio estiver configurado para faturar data da alta,
  -- se for conta hospitalar, buscará a data pela data final da conta senão pela data do lançamento.
  -- Se para o convênio estiver configurado para faturar data da alta, em contas ambulatoriais, buscará a data pela data do atendimento
  --se for conta hospitalar, buscará a data pela data da alta.
  CURSOR cFaturaDataAlta is
   SELECT Decode(c.sn_fatura_data_alta,'S',atendime.dt_atendimento,i.hr_lancamento) Data
      FROM dbamv.itreg_amb_espelho i,
           dbamv.convenio  c,
           dbamv.atendime
     WHERE atendime.cd_atendimento = i.cd_atendimento
       AND c.cd_convenio = atendime.cd_convenio
       AND c.cd_convenio= ncodconvenio
       AND i.cd_reg_amb = ncdconta
       AND i.cd_lancamento = ncdlancamento
  UNION ALL
   SELECT  Decode(c.sn_fatura_data_alta,'S',r.dt_final,i.dt_lancamento) Data
         --Decode(c.sn_fatura_data_alta,'S',atendime.dt_alta,i.dt_lancamento) Data  PDA 557275
      FROM dbamv.itreg_fat_espelho i,
           dbamv.reg_fat  r,
           dbamv.convenio  c,
           dbamv.atendime
     WHERE atendime.cd_atendimento = r.cd_atendimento
       AND r.cd_reg_fat  = i.cd_reg_fat
       AND c.cd_convenio = atendime.cd_convenio
       AND c.cd_convenio = ncodconvenio
       AND i.cd_reg_fat  = ncdconta
       AND i.cd_lancamento= ncdlancamento;
 --PDA 557275 - (Fim)
  vcregralanca          cregralanca%ROWTYPE;
  vdadosvlpercentual    cdadosvlpercentual%ROWTYPE;
  vdadoscdgrufat        cdadoscdgrufat%ROWTYPE;
  v_hospital            c_hospital%ROWTYPE;
  v_grupro              c_grupro%ROWTYPE;
  v_por_ane_tab         c_por_ane_tab%ROWTYPE;
  v_regra               c_regra%ROWTYPE;
  v_acresdesc           c_acresdesc%ROWTYPE;
  v_tabconvenio         c_tabconvenio%ROWTYPE;
  v_itregra             c_itregra%ROWTYPE;
  v_indice              c_indice%ROWTYPE;
  v_horesp              c_horesp%ROWTYPE;
  v_feriado             c_feriado%ROWTYPE;
  v_indice_profat       c_indice_profat%ROWTYPE;
  vFaturaDataAlta       date;  --PDA 557275
  v_valexced            c_valexced%ROWTYPE;
  v_convpla             c_convpla%ROWTYPE;
  v_regraexp            c_regraexplicita%ROWTYPE;
  v_acoplam             c_acoplam%ROWTYPE;
  vregraatend           cregraatend%ROWTYPE;
  v_pacote              c_pacote%ROWTYPE;
  ncdpormed             dbamv.porte_medico.cd_porte_medico%TYPE;
  vdspormed             dbamv.porte_medico.ds_porte_medico%TYPE;
  vvalorportemedico     dbamv.val_porte_medico.vl_porte_medico%TYPE;
  vvaloruco             dbamv.val_uco.vl_uco%TYPE;
  npercentualdesconto   dbamv.acresc_descontos_proc.vl_perc_desconto%TYPE := 0;
  npercentualacrescimo  dbamv.acresc_descontos_proc.vl_perc_acrescimo%TYPE := 0;
  ncdfornecedor         dbamv.itcob_pre_espelho.cd_fornecedor%TYPE;
  vprofatincid          dbamv.pro_fat.cd_pro_fat%TYPE;
  vSnOpmeValCatpro      dbamv.configuracao.valor%type;
  vConfConvTrunca       dbamv.configuracao.valor%type;
  vTruncaValor          varchar2(01) := 'N';
  bexcessao             BOOLEAN;
  bindice               BOOLEAN;
  bexcedente            BOOLEAN;
  llancamento           BOOLEAN;
  lvlpercentual         BOOLEAN;
  bpacote               BOOLEAN := FALSE;
  csnhorarioesp         VARCHAR2(1);
  cfuncatimed           VARCHAR2(1);
  cexcesshoresp         VARCHAR2(1);
  vsnregrconsig         VARCHAR2(01) := NULL;
  cprocentrega          VARCHAR2(8);
  vexcsubsproc          VARCHAR2(1);
  nvalortotal           NUMBER;
  nvalorporte           NUMBER;
  nvalorfilme           NUMBER;
  nvalorhonor           NUMBER;
  nvaloropera           NUMBER;
  nvalorexced           NUMBER;
  nretval               NUMBER;
  nvlacres              NUMBER;
  nvldesc               NUMBER;
  nvlacresfilme         NUMBER;
  nvldescfilme          NUMBER;
  nvlacreshonor         NUMBER;
  nvldeschonor          NUMBER;
  nvlacresoper          NUMBER;
  nvldescoper           NUMBER;
  nvlacresexced         NUMBER;
  nvldescexced          NUMBER;
  nvlunitregra          NUMBER;
  nvlperchoresp         NUMBER;
  nvlpercatimed         NUMBER;
  nqtfilme              NUMBER;
  nqtdeexced            NUMBER;
  ncdregra              NUMBER;
  nvlrfranquia          NUMBER;
  nvlpercsp             NUMBER;
  nvlpercsh             NUMBER;
  nvlpercsd             NUMBER;
  nqtpontos             NUMBER;
  nvlprecototal         NUMBER;
  nvalorunit            NUMBER := 0;
  nsomatotal            NUMBER;
  nsomaatual            NUMBER;
  ncdlancmin            NUMBER := 0;
  nvlpercentual         NUMBER := 0;
  nvltaxaentrega        NUMBER(11, 2);
  nvladiant             NUMBER(11, 2);
  nvlpercpacote         NUMBER(3, 2);
  nvlagenda             NUMBER(11, 2);
  nvlpercincid          NUMBER;
  nvlpercfranquia       number;
BEGIN
     if instr(nvl(vParam_Conv,'X'),'#'||lpad(ncodconvenio,4,'0')) > 0 then
		    for c in cBras_Indices
        loop
            open  cDt_Atendimento (ncdconta);
            fetch cDt_Atendimento into vddatarefer, vdhorarefer;
            close cDt_Atendimento;
            exit;
        end loop;
		    --
		    if vddatarefer is null then
		       vddatarefer    := ddatarefer;
           vdhorarefer    := dhorarefer;
		    end if;
     else
        vddatarefer    := ddatarefer;
        vdhorarefer    := dhorarefer;
     end if;
  vConfConvTrunca := null;
  open  cConfConvTrunca;
  fetch cConfConvTrunca into vConfConvTrunca;
  close cConfConvTrunca;
  if instr(nvl(vConfConvTrunca,'X'),'TODOS') > 0 then
    vTruncaValor := 'S';
  elsif instr(nvl(vConfConvTrunca,'X'),'#'||lpad(ncodconvenio,4,'0')) > 0 then
    vTruncaValor := 'S';
  else
    vTruncaValor := 'N';
  end if;
  OPEN c_setorexec;
  FETCH c_setorexec INTO ncdsetorexec;
  CLOSE c_setorexec;
  --
  Open cSnOpmeValCatpro;
  Fetch cSnOpmeValCatpro into vSnOpmeValCatpro;
  Close cSnOpmeValCatpro;
  --
  -- PDA 557275  (Início)
  vFaturaDataAlta:=NULL;
  Open cFaturaDataAlta;
  Fetch cFaturaDataAlta into vFaturaDataAlta;
  Close cFaturaDataAlta;
  -- PDA 557275 (Fim)
  --
  vprofat := dbamv.pack_lanca_ffcv.fnc_substituicao_procedimento(pkg_mv2000.le_empresa,
                                                                  ncodconvenio ,    -- PDA 328821
                                                                  NVL(NVL(ncdsetorexec, pncdsetor), SUBSTR(cprocedimento, 9, 4)),
                                                                  SUBSTR(cprocedimento, 1, 8),
                                                                  vddatarefer, ctipoatend, 'P');
  IF NVL(pkg_mv2000.le_configuracao('FFCV', 'SN_NAO_CALCULA_CENTAVOS'), 'N') != 'S' THEN
    --
    vexcsubsproc := dbamv.pack_ffcv_espelho.fnc_exclui_substitui_proc(ctipoatend
                                                                             , ncdconta
                                                                             , ncdlancamento
                                                                             , cprocedimento
                                                                             , vddatarefer
                                                                             , pncdsetor
                                                                             , ncodconvenio
                                                                             , ncodplano);
    --
    OPEN cregralanca;
    FETCH cregralanca INTO vcregralanca;
    CLOSE cregralanca;
    --
    IF nvl(dbamv.pkg_mv2000.le_formulario,'X') <> 'C_VAL_PROC' THEN
      IF NVL(vexcsubsproc, 'N') = 'S' AND vcregralanca.cd_regra_lancamento IS NULL THEN
        nvloper := 0;
        nvlfilme := 0;
        nvlporte := 0;
        nvltaxa := 0;
        nvldesconto := 0;
        nvlhonor := 0.01;
        nvlrtotal := 0.01;
        RETURN(0.01);
      END IF;
    END IF;
    --
  END IF;
  --
  OPEN c_agenda;
  FETCH c_agenda INTO nvlagenda;
  --
  IF NVL(nvlagenda, 0) > 0 THEN
    nvloper := 0;
    nvlfilme := 0;
    nvlporte := 0;
    nvltaxa := 0;
    nvldesconto := 0;
    nvlhonor := nvlagenda;
    nvlrtotal := nvlagenda;
    CLOSE c_agenda;
    RETURN(nvlagenda);
  END IF;
  CLOSE c_agenda;
  --
  OPEN c_pacote;
  FETCH c_pacote INTO v_pacote;
  --
  IF c_pacote%FOUND THEN
    OPEN c_valorpacote(v_pacote.cd_pacote, v_pacote.cd_atendimento);
    FETCH c_valorpacote INTO nvladiant;
    CLOSE c_valorpacote;
    IF NVL(nvladiant, 0) > 0 THEN
      nvlrtotal := nvladiant;
      RETURN(nvladiant);
      nvlpercpacote := 1;
    ELSE
      nvlpercpacote := v_pacote.vl_perc_pac_secund;
    END IF;
    bpacote := TRUE;
  ELSE
    nvlpercpacote := 1;
    bpacote := FALSE;
  END IF;
  --
  OPEN c_procentrega;
  FETCH c_procentrega INTO cprocentrega;
  --
  IF c_procentrega%FOUND THEN
    OPEN c_valentrega;
    FETCH c_valentrega INTO nvltaxaentrega;
    CLOSE c_valentrega;
    nvloper := 0;
    nvlhonor := 0;
    nvlfilme := 0;
    nvlporte := 0;
    nvltaxa := 0;
    nvldesconto := 0;
    IF NVL(nvltaxaentrega, 0) > 0 THEN
      nvlrtotal := nvltaxaentrega;
      RETURN(nvltaxaentrega);
    ELSE
      cretmsg := 'Não existe Preco Cadastrado para o Procedimento de Coleta para a Área - ' || vprofat;
      nvlrtotal := 0;
      RETURN(0);
    END IF;
  END IF;
  CLOSE c_procentrega;
  OPEN c_hospital;
  FETCH c_hospital INTO v_hospital;
  CLOSE c_hospital;
  --
  OPEN cregraatend;
  FETCH cregraatend INTO vregraatend;
  CLOSE cregraatend;
  --
  nmultiemp := dbamv.pkg_mv2000.le_empresa();
  nvloper := 0;
  nvlhonor := 0;
  nvlfilme := 0;
  nvlporte := 0;
  nvlchtotal := 0;
  nvlchhonor := 0;
  nvltaxa := 0;
  nvldesconto := 0;
  --
  OPEN c_grupro(vprofat);
  FETCH c_grupro INTO v_grupro;
  CLOSE c_grupro;
  IF v_grupro.tp_gru_pro = 'OP' OR dbamv.fnc_ffcv_sn_opme(vprofat) = 'S' THEN
    IF ncdconta IS NOT NULL AND ncdlancamento IS NOT NULL THEN
      --
      BEGIN
        SELECT sn_incid_regr_conv_prod_consig
          INTO vsnregrconsig
          FROM dbamv.config_ffcv
         WHERE cd_multi_empresa = nmultiemp;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          cretmsg := '';
      END;
      --
      IF ctipoatend = 'I' THEN
        BEGIN
          --
          SELECT vl_preco_unitario
               , vl_preco_total
               , cd_fornecedor
            INTO nvalorunit
               , nvalortotal
               , ncdfornecedor
            FROM dbamv.itcob_pre_espelho
           WHERE cd_reg_fat = ncdconta AND cd_lancamento = ncdlancamento;
          nretval := NVL(nvalorunit, 0);
          IF vsnregrconsig = 'N' AND nretval <> 0 THEN
            nvlrtotal := nvalortotal;
            RETURN nretval;
          END IF;
          --
          IF ncdfornecedor IS NULL AND dbamv.pack_aux_ffcv.fnc_procedimento_fatura_direto(vprofat) = 'S' THEN
            cretmsg := '# Procedimento ' || vprofat || ' com faturamento direto precisa ter dados da nota fiscal informados.';
          END IF;
          --
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            cretmsg := '';
        END;
        --
      ELSIF ctipoatend IN('A', 'E', 'U') THEN
        BEGIN
          --
          SELECT vl_preco_unitario
               , vl_preco_total
               , cd_fornecedor
            INTO nvalorunit
               , nvalortotal
               , ncdfornecedor
            FROM dbamv.itcob_pre_ambu_espelho
           WHERE cd_reg_amb = ncdconta AND cd_lancamento = ncdlancamento;
          nretval := NVL(nvalorunit, 0);                                               -- pda 110653
          IF vsnregrconsig = 'N' AND nretval <> 0 THEN
            nvlrtotal := nvalortotal;
            RETURN nretval;
          END IF;
          --
          IF ncdfornecedor IS NULL
             AND dbamv.pack_aux_ffcv.fnc_procedimento_fatura_direto(vprofat) = 'S' THEN
            cretmsg := '# Procedimento ' || vprofat || ' com faturamento direto precisa ter dados da nota fiscal informados.';
          END IF;
          --
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            cretmsg := '';
        END;
      END IF;
     Elsif ((nCdConta Is Null or nCdLancamento Is NULL) AND nvl(vSnOpmeValCatpro,'N') = 'S' ) THEN
      nretval := 1;
      RETURN nretval;
    END IF;
  END IF;
  --
  IF ncdindice IS NULL THEN
    OPEN c_convpla;
    FETCH c_convpla INTO v_convpla;
    CLOSE c_convpla;
  END IF;
  --
  /*PDA.: 476455 - Emanoel Deivison (inicio)*/
  OPEN c_itregra(Nvl(nregra,ncdregra), v_grupro.cd_gru_pro);
  FETCH c_itregra INTO v_itregra;
  CLOSE c_itregra;
  /*PDA.: 476455 - Emanoel Deivison (fim)*/
  --
  /*PDA.: 476455 - Emanoel Deivison (inicio)*/
  open  cExcPercCobranca(vprofat, ctpatimed, Nvl(nregra,ncdregra), v_grupro.cd_gru_pro, v_itregra.cd_tab_fat);
  fetch cExcPercCobranca into vcExcPercCobranca;
  close cExcPercCobranca;
  /*PDA.: 476455 - Emanoel Deivison (fim)*/
  --
  IF nregra IS NULL THEN
    OPEN c_regra(ncodconvenio, ncodplano, ncodtipoaco);
    FETCH c_regra INTO v_regra;
    CLOSE c_regra;
    ncdregra := v_regra.cd_regra;
    /*PDA.: 476455 - Emanoel Deivison (inicio)*/
    nvlpercsp := Nvl(vcExcPercCobranca.vl_percentual_pago, v_regra.vl_percentual_sp);
    /*PDA.: 476455 - Emanoel Deivison (fim)*/
    nvlpercsh := v_regra.vl_percentual_sh;
    nvlpercsd := v_regra.vl_percentual_sd;
  ELSE
    OPEN c_regraexplicita(nregra, ncodtipoaco);
    FETCH c_regraexplicita INTO v_regraexp;
    CLOSE c_regraexplicita;
    ncdregra := v_regraexp.cd_regra;
    /*PDA.: 476455 - Emanoel Deivison (inicio)*/
    nvlpercsp := Nvl(vcExcPercCobranca.vl_percentual_pago, v_regraexp.vl_percentual_sp);
    /*PDA.: 476455 - Emanoel Deivison (fim)*/
    nvlpercsh := v_regraexp.vl_percentual_sh;
    nvlpercsd := v_regraexp.vl_percentual_sd;
  END IF;
  --
  /*PDA.: 476455 - Emanoel Deivison (inicio)*/
  /*
  OPEN c_itregra(ncdregra, v_grupro.cd_gru_pro);
  FETCH c_itregra INTO v_itregra;
  CLOSE c_itregra;
  */
  /*PDA.: 476455 - Emanoel Deivison (fim)*/
  --
  IF v_itregra.cd_tab_fat IS NULL THEN
    IF NVL(pkg_mv2000.le_configuracao('FFCV', 'SN_CREDENCIADO_CENTAVOS'), 'N') = 'S' THEN
      OPEN c_tppagamento;
      FETCH c_tppagamento INTO ctppagamento;
      CLOSE c_tppagamento;
      if ctppagamento is null then
        vvTpPag:=dbamv.pkg_ffcv_it_conta.fnc_retorna_tp_pagamento(
                                                                  pncdprestador,
                                                                  ncodconvenio,
                                                                  ctipoatend,
                                                                  vprofat,
                                                                  null
                                                                  );
      else
        vvTpPag:=ctppagamento;
      end if;
      --
      IF NVL(vvTpPag, 'P') = 'C' THEN
        nvloper := 0;
        nvlfilme := 0;
        nvlporte := 0;
        nvltaxa := 0;
        nvldesconto := 0;
        nvlhonor := 0.01;
        nvlrtotal := 0.01;
        RETURN(0.01);
      END IF;
    END IF;
    cretmsg := 'Não existe Tabela de Cobranca Vinculada a Regra ' || TO_CHAR(ncdregra) || CHR(10)
               || ' do Grupo de Procedimento ' || TO_CHAR(v_grupro.cd_gru_pro) || ' na Regra !';
    RETURN 0;
  END IF;
  --
  v_acresdesc.vl_perc_acrescimo := NULL;
  v_acresdesc.vl_perc_desconto := NULL;
  v_acresdesc.sn_vl_filme := NULL;
  v_acresdesc.sn_vl_honorario := NULL;
  v_acresdesc.sn_vl_operacional := NULL;
  v_acresdesc.sn_acres_desc := NULL;
  --
  OPEN c_acresdesc_proc(ncdregra, vprofat, ctipoatend,vFaturaDataAlta); -- PDA 557275 incluido  vFaturaDataAlta
  FETCH c_acresdesc_proc INTO v_acresdesc;
  IF c_acresdesc_proc%NOTFOUND OR v_acresdesc.sn_acres_desc = 'N' THEN
    v_acresdesc.vl_perc_acrescimo := NULL;
    v_acresdesc.vl_perc_desconto := NULL;
    v_acresdesc.sn_vl_filme := NULL;
    v_acresdesc.sn_vl_honorario := NULL;
    v_acresdesc.sn_vl_operacional := NULL;
    v_acresdesc.sn_acres_desc := NULL;
    OPEN c_acresdesc(ncdregra, v_grupro.cd_gru_pro, ctipoatend,vFaturaDataAlta); -- PDA 557275 incluido  vFaturaDataAlta
    FETCH c_acresdesc INTO v_acresdesc;
    CLOSE c_acresdesc;
  END IF;
  CLOSE c_acresdesc_proc;
  --
  if (dbamv.pkg_mv2000.le_cliente = 429) then
    OPEN c_tabconvenio_429(ncodconvenio, ncodplano, vprofat, ddatarefer, pncdprestador, pncdsetor, nvl(nregra, ncdregra));
    FETCH c_tabconvenio_429 INTO v_tabconvenio;
    CLOSE c_tabconvenio_429;
  else
    OPEN c_tabconvenio(ncodconvenio, ncodplano, vprofat, vddatarefer, pncdprestador, pncdsetor, nvl(nregra, ncdregra));
    FETCH c_tabconvenio INTO v_tabconvenio;
    CLOSE c_tabconvenio;
  end if;
  --
  IF NVL(nvalproced, 0) = 0 THEN
    IF v_tabconvenio.vl_tab_convenio IS NOT NULL THEN
      nvalortotal := v_tabconvenio.vl_tab_convenio;
      ncdtabfatporte := NULL;
      cexcesshoresp := NVL(v_tabconvenio.sn_horario_especial, 'N');
      bexcessao := TRUE;
      nvaloropera := 0;
      ncdregra := NVL(v_tabconvenio.cd_regra, ncdregra);
      --
      OPEN c_itregra_porte(ncdregra, v_grupro.cd_gru_pro);
      FETCH c_itregra_porte INTO ncdtabfatporte;
      CLOSE c_itregra_porte;
      --
      IF v_grupro.tp_gru_pro IN('SP', 'SD') THEN
        nvalorhonor := v_tabconvenio.vl_tab_convenio;
      END IF;
    ELSE
      OPEN c_valpro(vprofat, v_itregra.cd_tab_fat, vddatarefer);
      FETCH c_valpro INTO nvalortotal, nvaloropera, nvalorhonor;
      CLOSE c_valpro;
      ncdtabfatporte := NULL;
      bexcessao := FALSE;
    END IF;
    --
    nvalortotal := dbamv.pack_lanca_ffcv.fnc_substituicao_proced_fator(pkg_mv2000.le_empresa,
                                                                        ncodconvenio ,  -- PDA 328821
                                                                       NVL(ncdsetorexec, pncdsetor),
                                                                       vprofat, vddatarefer, ctipoatend, 'P', nvalortotal);
    nvaloropera := dbamv.pack_lanca_ffcv.fnc_substituicao_proced_fator(pkg_mv2000.le_empresa ,
                                                                      ncodconvenio , -- PDA 328821
                                                                      NVL(ncdsetorexec, pncdsetor),
                                                                        vprofat, vddatarefer, ctipoatend, 'P', nvaloropera);
    nvalorhonor := dbamv.pack_lanca_ffcv.fnc_substituicao_proced_fator(pkg_mv2000.le_empresa,
                                                                        ncodconvenio, -- PDA 328821
                                                                        NVL(ncdsetorexec, pncdsetor),
                                                                        vprofat, vddatarefer, ctipoatend, 'P', nvalorhonor);
    --
    IF v_grupro.tp_gru_pro IN('SP', 'SD') AND NVL(nvalorhonor, 0) = 0 AND NVL(nvaloropera, 0) = 0 THEN
      IF nvalortotal IS NOT NULL AND
        (v_hospital.cd_hospital = 312 OR (  v_hospital.cd_hospital = 734 AND ctipoatend IN('A', 'E', 'U'))) THEN
        NULL;
      ELSE
        IF nvl(dbamv.pkg_mv2000.le_formulario,'X') <> 'C_VAL_PROC' THEN
          IF NVL(pkg_mv2000.le_configuracao('FFCV', 'SN_CREDENCIADO_CENTAVOS'), 'N') = 'S' THEN
            OPEN c_tppagamento;
            FETCH c_tppagamento INTO ctppagamento;
            CLOSE c_tppagamento;
            if ctppagamento is null then
              vvTpPag:=dbamv.pkg_ffcv_it_conta.fnc_retorna_tp_pagamento(
                                                                        pncdprestador,
                                                                        ncodconvenio,
                                                                        ctipoatend,
                                                                        vprofat,
                                                                        null
                                                                        );
            else
              vvTpPag:=ctppagamento;
            end if;
            IF NVL(vvTpPag, 'P') = 'C' THEN
              nvloper := 0;
              nvlfilme := 0;
              nvlporte := 0;
              nvltaxa := 0;
              nvldesconto := 0;
              nvlhonor := 0.01;
              nvlrtotal := 0.01;
              RETURN(0.01);
            END IF;
          END IF;
          --
          cretmsg := 'Não existe Preço Cadastrado para o Procedimento ' || vprofat || CHR(10) || 'na Tabela '
                    || TO_CHAR(v_itregra.cd_tab_fat) || CHR(10) || 'com Data Inferior a '
                    || TO_CHAR(vddatarefer, 'dd/mm/yyyy');
        END IF;
      END IF;
    END IF;
    --
    IF NVL(nvalortotal, 0) = 0 THEN
      --
      IF v_grupro.tp_gru_pro <> 'OP' AND dbamv.fnc_ffcv_sn_opme(vprofat) <> 'S' THEN
        IF nvalortotal IS NOT NULL  AND
           (v_hospital.cd_hospital = 312 OR (v_hospital.cd_hospital = 734 AND ctipoatend IN('A', 'E', 'U'))) THEN
          NULL;
        ELSE
          IF nvl(dbamv.pkg_mv2000.le_formulario,'X') <> 'C_VAL_PROC' THEN
            IF NVL(pkg_mv2000.le_configuracao('FFCV', 'SN_CREDENCIADO_CENTAVOS'), 'N') = 'S' THEN
              OPEN c_tppagamento;
              FETCH c_tppagamento INTO ctppagamento;
              CLOSE c_tppagamento;
              if ctppagamento is null then
                vvTpPag:=dbamv.pkg_ffcv_it_conta.fnc_retorna_tp_pagamento(
                                                                          pncdprestador,
                                                                          ncodconvenio,
                                                                          ctipoatend,
                                                                          vprofat,
                                                                          null
                                                                          );
              else
                vvTpPag:=ctppagamento;
              end if;
              IF NVL(vvTpPag, 'P') = 'C' THEN
                nvloper := 0;
                nvlfilme := 0;
                nvlporte := 0;
                nvltaxa := 0;
                nvldesconto := 0;
                nvlhonor := 0.01;
                nvlrtotal := 0.01;
                RETURN(0.01);
              END IF;
            END IF;
            --
            cretmsg := 'Não existe Preço Cadastrado para o Procedimento ' || vprofat || CHR(10)
                      || 'na Tabela ' || TO_CHAR(v_itregra.cd_tab_fat) || CHR(10) || 'com Data Inferior a '
                      || TO_CHAR(vddatarefer, 'dd/mm/yyyy');
          END IF;
        END IF;
      ELSE
        OPEN cverconvprofat;
        FETCH cverconvprofat INTO nconvprofat;
        CLOSE cverconvprofat;
        IF nvl(dbamv.pkg_mv2000.le_formulario,'X') <> 'C_VAL_PROC' AND
           NVL(nconvprofat, 0) = 0 AND
           --v_hospital.cd_hospital not in (429,338) AND
           v_hospital.cd_hospital not in (429,338,420) AND     /* pda 556827 - 30/11/2012 - incluindo cliente 420 para funcionar como era do adiantamento */
           dbamv.fnc_ffcv_sn_opme(vprofat) = 'S' THEN
          --
          cretmsg := '# Não existe Preço Cadastrado para o Procedimento ' || vprofat || CHR(10)
                     || ' do Tipo "OP" na Tabela de Dados da Nota';
        END IF;
      END IF;
      RETURN 0;
    END IF;
    --
    IF NVL(nvaloropera, 0) <> 0 OR NVL(nvalorhonor, 0) <> 0 THEN
      IF ROUND(NVL(nvalortotal, 0), 4) <> ROUND(NVL(nvaloropera, 0) + NVL(nvalorhonor, 0), 4) THEN
        cretmsg := 'Valor Total difere da soma do Valor de Honorários com o Valor Operacional !' || CHR(10)
                  || 'para o procedimento ' || vprofat || CHR(10) || 'na Tabela '
                  || TO_CHAR(v_itregra.cd_tab_fat) || CHR(10);
        RETURN 0;
      END IF;
    END IF;
    --
    OPEN c_indice(NVL(ncdindice, v_convpla.cd_indice), vddatarefer, v_grupro.cd_gru_pro, ctipoatend);
    FETCH c_indice INTO v_indice;
    CLOSE c_indice;
    --
    IF v_itregra.tp_tab_fat = 'H' AND NOT bexcessao THEN
      --
      llancamento := FALSE;
      lvlpercentual := FALSE;
      --
      IF ctipoatend = 'I' THEN
        IF dbamv.pack_ffcv_espelho.fnc_retorna_perc_sd(vprofat, ncdregra, vddatarefer) IS NULL THEN
          OPEN clancminhosp(v_grupro.cd_gru_pro);
          FETCH clancminhosp INTO ncdlancmin;
          IF clancminhosp%FOUND THEN
            llancamento := TRUE;
          END IF;
          CLOSE clancminhosp;
        END IF;
      ELSE
        IF dbamv.pack_ffcv_espelho.fnc_retorna_perc_sd(vprofat, ncdregra, vddatarefer) IS NULL THEN
          OPEN clancminamb(v_grupro.cd_gru_pro);
          FETCH clancminamb INTO ncdlancmin;
          IF clancminamb%FOUND THEN
            llancamento := TRUE;
          END IF;
          CLOSE clancminamb;
        END IF;
      END IF;
      --
      IF llancamento THEN
        IF ncdlancmin <> ncdlancamento THEN
          IF dbamv.pack_ffcv_espelho.fnc_retorna_perc_sd(vprofat, ncdregra, vddatarefer) IS NULL THEN
            OPEN cvlpercent(v_itregra.cd_tab_fat, v_grupro.cd_gru_pro);
            FETCH cvlpercent INTO nvlpercentual;
            IF cvlpercent%FOUND THEN
              IF NVL(nvaloropera, 0) > 0 THEN
                nvaloropera := (nvaloropera * nvlpercentual) / 100;
              END IF;
            END IF;
            CLOSE cvlpercent;
          END IF;
        END IF;
      END IF;
      --
      OPEN cpormedprofat(v_itregra.cd_tab_fat);
      FETCH cpormedprofat INTO ncdpormed, vdspormed;
      IF cpormedprofat%NOTFOUND THEN
        OPEN cpormed;
        FETCH cpormed INTO ncdpormed, vdspormed;
        CLOSE cpormed;
      END IF;
      CLOSE cpormedprofat;
      --
      IF ncdpormed IS NULL THEN
        IF nvl(dbamv.pkg_mv2000.le_formulario,'X') <> 'C_VAL_PROC' THEN
          IF NVL(pkg_mv2000.le_configuracao('FFCV', 'SN_CREDENCIADO_CENTAVOS'), 'N') = 'S' THEN
            OPEN c_tppagamento;
            FETCH c_tppagamento INTO ctppagamento;
            CLOSE c_tppagamento;
            if ctppagamento is null then
              vvTpPag:=dbamv.pkg_ffcv_it_conta.fnc_retorna_tp_pagamento(
                                                                        pncdprestador,
                                                                        ncodconvenio,
                                                                        ctipoatend,
                                                                        vprofat,
                                                                        null
                                                                        );
            else
              vvTpPag:=ctppagamento;
            end if;
            IF NVL(vvTpPag, 'P') = 'C' THEN
              nvloper := 0;
              nvlfilme := 0;
              nvlporte := 0;
              nvltaxa := 0;
              nvldesconto := 0;
              nvlhonor := 0.01;
              nvlrtotal := 0.01;
              RETURN(0.01);
            END IF;
          END IF;
          --
          cretmsg := 'Não existe Porte de Ato Médico ' || 'para o procedimento ' || vprofat || CHR(10)
                      || 'na Tabela tipo CBHPM' || TO_CHAR(v_itregra.cd_tab_fat) || CHR(10)
                      || 'para Essa Regra !';
          --
        END IF;
        RETURN 0;
      END IF;
      --
      OPEN cvalpormed(ncdpormed, v_itregra.cd_tab_fat);
      FETCH cvalpormed INTO vvalorportemedico;
      CLOSE cvalpormed;
      IF vvalorportemedico IS NULL THEN
        IF nvl(dbamv.pkg_mv2000.le_formulario,'X') <> 'C_VAL_PROC' THEN
          IF NVL(pkg_mv2000.le_configuracao('FFCV', 'SN_CREDENCIADO_CENTAVOS'), 'N') = 'S' THEN
            OPEN c_tppagamento;
            FETCH c_tppagamento INTO ctppagamento;
            CLOSE c_tppagamento;
            if ctppagamento is null then
              vvTpPag:=dbamv.pkg_ffcv_it_conta.fnc_retorna_tp_pagamento(
                                                                        pncdprestador,
                                                                        ncodconvenio,
                                                                        ctipoatend,
                                                                        vprofat,
                                                                        null
                                                                        );
            else
              vvTpPag:=ctppagamento;
            end if;
            IF NVL(vvTpPag, 'P') = 'C' THEN
              nvloper := 0;
              nvlfilme := 0;
              nvlporte := 0;
              nvltaxa := 0;
              nvldesconto := 0;
              nvlhonor := 0.01;
              nvlrtotal := 0.01;
              RETURN(0.01);
            END IF;
          END IF;
          --
          cretmsg := 'Não existe Valor de Porte Médico ' || vdspormed || CHR(10)
                    || ' para a Tabela de Faturamento tipo CBHPM ' || TO_CHAR(v_itregra.cd_tab_fat)
                    || CHR(10) || ' com data de vigência Inferior a ' || TO_CHAR(vddatarefer, 'DD/MM/YYYY')
                    || ' para Essa Regra !';
          --
        END IF;
        RETURN 0;
      END IF;
      --
      nvalorhonor := nvalorhonor * vvalorportemedico;
      --
      IF NVL(nvaloropera, 0) > 0 THEN
        vvaloruco := v_indice.vl_uco;
        IF vvaloruco IS NULL THEN
          cretmsg := 'Não existe Valor de Unidade de Custo Operacional para o Índice informado tipo CBHPM '
                      || TO_CHAR(NVL(ncdindice, v_convpla.cd_indice)) || CHR(10)
                      || ' com data de vigência Inferior a' || TO_CHAR(vddatarefer, 'DD/MM/YYYY')
                      || ' para Essa Regra !';
          RETURN 0;
        END IF;
        nvaloropera := nvaloropera * vvaloruco;
      END IF;
      --
      nvalortotal := NVL(nvaloropera, 0) + NVL(nvalorhonor, 0);
      --
    END IF;
    --
  ELSE
    bexcessao := FALSE;
    nvalortotal := nvalproced;
    nvalorhonor := 0;
    nvaloropera := 0;
  END IF; --IF NVL(nvalproced, 0) = 0
  --
  OPEN c_valexced(vddatarefer, ncdregra);
  FETCH c_valexced INTO v_valexced;
  CLOSE c_valexced;
  IF ctpatimed IS NOT NULL THEN
    OPEN c_atimed;
    FETCH c_atimed INTO nvlpercatimed, cfuncatimed;
    CLOSE c_atimed;
  ELSE
    nvlpercatimed := 0;
  END IF;
  --
  OPEN c_perchoresp(v_itregra.cd_horario);
  FETCH c_perchoresp INTO nvlperchoresp;
  CLOSE c_perchoresp;
  --
  OPEN c_por_ane_tab(vprofat, vddatarefer, ncdregra, v_grupro.cd_gru_pro);
  FETCH c_por_ane_tab INTO v_por_ane_tab;
  IF c_por_ane_tab%FOUND THEN
    v_grupro.cd_por_ane := v_por_ane_tab.cd_por_ane;
  END IF;
  CLOSE c_por_ane_tab;
  --
  IF v_grupro.cd_por_ane IS NOT NULL THEN
    OPEN c_porteanest(v_grupro.cd_por_ane, NVL(ncdtabfatporte, v_itregra.cd_tab_fat), vddatarefer);
    FETCH c_porteanest INTO nvalorporte;
    CLOSE c_porteanest;
  ELSE
    nvalorporte := 0;
  END IF;
  --
  IF v_grupro.cd_por_ane IS NOT NULL AND NVL(nvalorporte, 0) = 0 THEN
    IF NVL(pkg_mv2000.le_configuracao('FFCV', 'SN_CREDENCIADO_CENTAVOS'), 'N') = 'S' THEN
      OPEN c_tppagamento;
      FETCH c_tppagamento INTO ctppagamento;
      CLOSE c_tppagamento;
      if ctppagamento is null then
        vvTpPag:=dbamv.pkg_ffcv_it_conta.fnc_retorna_tp_pagamento(
                                                                  pncdprestador,
                                                                  ncodconvenio,
                                                                  ctipoatend,
                                                                  vprofat,
                                                                  null
                                                                  );
      else
        vvTpPag:=ctppagamento;
      end if;
      --
      IF NVL(vvTpPag, 'P') = 'C' THEN
        nvloper := 0;
        nvlfilme := 0;
        nvlporte := 0;
        nvltaxa := 0;
        nvldesconto := 0;
        nvlhonor := 0.01;
        nvlrtotal := 0.01;
        RETURN(0.01);
      END IF;
    END IF;
    --
    cretmsg :=
      'Não existe Valor de Porte ' || TO_CHAR(v_grupro.cd_por_ane) || CHR(10)
      || ' para a Tabela de Faturamento ' || TO_CHAR(v_itregra.cd_tab_fat) || CHR(10)
      || ' com data de vigência Inferior a ' || TO_CHAR(vddatarefer, 'DD/MM/YYYY')
      || ' para Essa Regra !';
    -- PDA 218812 (Fim)
    RETURN 0;
  END IF;
  --
  IF NVL(bprocessarvalor, TRUE) = FALSE THEN
    IF NVL(nvalortotal, 0) = 0 THEN
        IF nvl(dbamv.pkg_mv2000.le_formulario,'X') <> 'C_VAL_PROC' THEN
        cretmsg :=
          'Não existe preço definido para o procedimento: ' || vprofat
          || ' , contacte o Faturamento!';
      END IF;
    END IF;
    RETURN NVL(nvalortotal, 0);
  END IF;
  --
  OPEN ckit;
  FETCH ckit INTO vckit;
  CLOSE ckit;
  --
  OPEN cconfig;
  FETCH cconfig INTO vcconfig;
  CLOSE cconfig;
  --
  IF NVL(vckit.valor, 'N') = 'S' AND NVL(vcconfig.valor, 'N') = 'S' THEN
    baplicaregraexced := FALSE;
  ELSE
    baplicaregraexced := TRUE;
  END IF;
  --
  IF baplicaregraexced THEN
    IF (NVL(v_valexced.vl_subsequente, 0) > 0 OR NVL(v_valexced.vl_percentual_sub, 0) > 0)
       AND v_valexced.qt_subsequente > 0 THEN
      IF NVL(v_hospital.cd_hospital, 0) IN(312) THEN
        nsomatotal := 0;
        OPEN csomaregtotal(ncdconta);
        FETCH csomaregtotal INTO nsomatotal;
        CLOSE csomaregtotal;
        nqtdeexced := CEIL(NVL(nsomatotal, 1) - v_valexced.qt_inicial);
        --
        IF nqtdeexced > 0 THEN
          nqtdeexced := nqtde;
          --
          IF NVL(v_valexced.vl_percentual_sub, 0) > 0 THEN
            nvalorexced :=((nvalortotal * v_valexced.vl_percentual_sub) / 100);
          ELSE
            nvalorexced := v_valexced.vl_subsequente;
          END IF;
          --
          bexcedente := TRUE;
          --
        ELSE
          nqtdeexced := 0;
          nvalorexced := 0;
          bexcedente := FALSE;
        END IF;
      ELSE
        --
        nqtdeexced := CEIL((NVL(nqtde, 1) - v_valexced.qt_inicial) / v_valexced.qt_subsequente);
        --
        IF nqtdeexced > 0 THEN
          IF NVL(v_valexced.vl_percentual_sub, 0) > 0 THEN
            nvalorexced :=((nvalortotal * v_valexced.vl_percentual_sub) / 100);
          ELSE
            nvalorexced := v_valexced.vl_subsequente;
          END IF;
          bexcedente := TRUE;
        ELSE
          nvalorexced := 0;
          bexcedente := TRUE;
        END IF;
      END IF;
      --
    ELSE
      nvalorexced := 0;
      bexcedente := FALSE;
    END IF;
  END IF;
  --
  IF bexcedente AND dbamv.pkg_mv2000.le_cliente = 737 THEN
    OPEN cvalrelac;
    FETCH cvalrelac INTO nvalrelac;
    CLOSE cvalrelac;
    IF nvalrelac > 0 THEN
      bexcedente := FALSE;
    END IF;
  END IF;
  --
  OPEN c_feriado(vddatarefer);
  FETCH c_feriado INTO v_feriado;
  CLOSE c_feriado;
  --
  IF v_feriado.ds_feriado IS NOT NULL THEN
    OPEN c_horesp(v_itregra.cd_horario, ncdregra, 8, vdhorarefer, ctipoatend);
    FETCH c_horesp INTO v_horesp;
    CLOSE c_horesp;
    IF NVL(v_horesp.sn_hor_esp, 'N') = 'S' THEN
      csnhorarioesp := 'S';
    ELSE
      csnhorarioesp := 'N';
    END IF;
  ELSE
    OPEN c_horesp(v_itregra.cd_horario, ncdregra, TO_NUMBER(TO_CHAR(vddatarefer, 'd')), vdhorarefer, ctipoatend);
    FETCH c_horesp INTO v_horesp;
    CLOSE c_horesp;
    IF NVL(v_horesp.sn_hor_esp, 'N') = 'S' THEN
      csnhorarioesp := 'S';
    ELSE
      csnhorarioesp := 'N';
    END IF;
  END IF;
  --
  IF NVL(csnhorarioesp, 'N') = 'S' THEN
    OPEN cdadoscdgrufat;
    FETCH cdadoscdgrufat INTO vdadoscdgrufat;
    CLOSE cdadoscdgrufat;
    IF dbamv.pack_aux_ffcv.is_hor_esp(ncodconvenio, ncodplano, ctipoatend, vddatarefer, vdhorarefer, vdadoscdgrufat.cd_gru_fat, vprofat, ncdregra) THEN
      OPEN cdadosvlpercentual(ncdregra, v_grupro.cd_gru_pro);
      FETCH cdadosvlpercentual INTO vdadosvlpercentual;
      CLOSE cdadosvlpercentual;
      IF vdadosvlpercentual.vl_percentual IS NOT NULL THEN
        nvlperchoresp := vdadosvlpercentual.vl_percentual;
      END IF;
    ELSE
      nvlperchoresp := 0;
    END IF;
  END IF;
  --
  OPEN clocgrupromult(v_grupro.cd_gru_pro);
  FETCH clocgrupromult INTO vnqtd_gru_pro;
  CLOSE clocgrupromult;
  --
  IF ctpatimed IS NOT NULL THEN
    if vTruncaValor = 'S' then
      nvalortotal := Trunc(Round( Trunc(Round(nvalortotal,4),2) *(nvlpercatimed / 100),4),2);
      nvaloropera := Trunc(Round( Trunc(Round(nvaloropera,4),2) *(nvlpercatimed / 100),4),2);
      nvalorexced := Trunc(Round( Trunc(Round(nvalorexced,4),2) *(nvlpercatimed / 100),4),2);
      nvalorhonor := Trunc(Round( Trunc(Round(nvalorhonor,4),2) *(nvlpercatimed / 100),4),2);
      nvalorporte := Trunc(Round( Trunc(Round(nvalorporte,4),2) *(nvlpercatimed / 100),4),2);
    else
      nvalortotal := nvalortotal *(nvlpercatimed / 100);
      nvaloropera := nvaloropera *(nvlpercatimed / 100);
      nvalorexced := nvalorexced *(nvlpercatimed / 100);
      nvalorhonor := nvalorhonor *(nvlpercatimed / 100);
      nvalorporte := nvalorporte *(nvlpercatimed / 100);
    end if;
  END IF;
  --
  IF NVL(nvlpercirmult, 0) > 0 THEN
    IF (NVL(vnqtd_gru_pro, 0) > 0 AND NVL(nvlpercirmult, 0) <> 100) THEN
      --
      IF v_itregra.tp_tab_fat IN('C', 'R') THEN
        nvalorhonor := nvalorhonor *(nvlpercirmult / 100);
        nvaloropera := nvaloropera *(nvlpercirmult / 100);
      ELSIF v_itregra.tp_tab_fat = 'H' THEN
        nvaloropera := nvaloropera *(nvlpercirmult / 100);
        nvalorhonor := nvalorhonor;
      END IF;
      --
      nvalorexced := nvalorexced;
      nvalorporte := nvalorporte;
      nvalorfilme := nvalorfilme;
      nvalortotal := NVL(nvalorporte, 0) + NVL(nvalorhonor, 0) + NVL(nvaloropera, 0) + NVL(nvalorfilme, 0);
    ELSE
      if vTruncaValor = 'S' then
        nvalortotal := trunc(round(nvalortotal *(nvlpercirmult / 100),4),4);
        nvalorexced := trunc(round(nvalorexced *(nvlpercirmult / 100),4),4);
        nvalorporte := trunc(round(nvalorporte *(nvlpercirmult / 100),4),4);
        nvalorhonor := trunc(round(nvalorhonor *(nvlpercirmult / 100),4),4);
        nvaloropera := trunc(round(nvaloropera *(nvlpercirmult / 100),4),4);
        nvalorfilme := nvalorfilme *(nvlpercirmult / 100);
      else
        nvalortotal := nvalortotal *(nvlpercirmult / 100);
        nvalorexced := nvalorexced *(nvlpercirmult / 100);
        nvalorporte := nvalorporte *(nvlpercirmult / 100);
        nvalorhonor := nvalorhonor *(nvlpercirmult / 100);
        nvaloropera := nvaloropera *(nvlpercirmult / 100);
        nvalorfilme := nvalorfilme *(nvlpercirmult / 100);
      end if;
    END IF;
  END IF;
  --
  IF bexcessao THEN
    IF v_tabconvenio.sn_usar_indice = 'S' THEN
      bindice := TRUE;
    ELSE
      bindice := FALSE;
    END IF;
  ELSE
    IF v_itregra.tp_tab_fat = 'C' THEN
      bindice := TRUE;
    ELSE
      bindice := FALSE;
    END IF;
  END IF;
  --
  v_indice_profat.vl_percentual := 0;
  OPEN c_indice_profat(vprofat, ncdregra, v_grupro.cd_gru_pro, ncodtipoaco);
  FETCH c_indice_profat INTO v_indice_profat;
  CLOSE c_indice_profat;
  --
  IF NVL(v_indice_profat.vl_percentual, 0) > 0 THEN
    IF v_grupro.tp_gru_pro IN('SP', 'SD', 'SH') THEN
      nvalortotal := nvalortotal *(v_indice_profat.vl_percentual / 100);
      nvalorexced := nvalorexced *(v_indice_profat.vl_percentual / 100);
      nvalorhonor := nvalorhonor *(v_indice_profat.vl_percentual / 100);
      if v_itregra.tp_tab_fat <> 'H' then
        nvaloropera := nvaloropera *(v_indice_profat.vl_percentual / 100);
      end if;
      nvalorporte := nvalorporte *(v_indice_profat.vl_percentual / 100);
    END IF;
  ELSE
    IF NVL(nvlpercsp, 0) > 0 AND v_grupro.tp_gru_pro = 'SP' THEN
      nvalortotal := nvalortotal *(nvlpercsp / 100);
      nvalorexced := nvalorexced *(nvlpercsp / 100);
      nvalorhonor := nvalorhonor *(nvlpercsp / 100);
      nvalorporte := nvalorporte *(nvlpercsp / 100);
      if v_itregra.tp_tab_fat <> 'H' then
         nvaloropera := nvaloropera *(nvlpercsp / 100);
      end if;
    END IF;
    IF NVL(nvlpercsd, 0) > 0 AND v_grupro.tp_gru_pro = 'SD' THEN
      nvalortotal := nvalortotal *(nvlpercsd / 100);
      nvalorexced := nvalorexced *(nvlpercsd / 100);
      nvalorhonor := nvalorhonor *(nvlpercsd / 100);
      nvalorporte := nvalorporte *(nvlpercsd / 100);
      if v_itregra.tp_tab_fat <> 'H' then
        nvaloropera := nvaloropera *(nvlpercsd / 100);
      end if;
    END IF;
    IF NVL(nvlpercsh, 0) > 0 AND v_grupro.tp_gru_pro = 'SH' THEN
      nvalortotal := nvalortotal *(nvlpercsh / 100);
      nvalorexced := nvalorexced *(nvlpercsh / 100);
      nvalorhonor := nvalorhonor *(nvlpercsh / 100);
      nvalorporte := nvalorporte *(nvlpercsh / 100);
      if v_itregra.tp_tab_fat <> 'H' then
        nvaloropera := nvaloropera *(nvlpercsh / 100);
      end if;
    END IF;
  END IF;
  --
  IF NVL(v_itregra.vl_percentual_itregra, 0) > 0 AND NOT bexcessao THEN
    IF NVL(v_itregra.tp_valor_base, 'T') = 'T' THEN
      nvalortotal := nvalortotal *(v_itregra.vl_percentual_itregra / 100);
      nvalorexced := nvalorexced *(v_itregra.vl_percentual_itregra / 100);
      nvalorhonor := nvalorhonor *(v_itregra.vl_percentual_itregra / 100);
      nvaloropera := nvaloropera *(v_itregra.vl_percentual_itregra / 100);
      nvalorporte := nvalorporte *(v_itregra.vl_percentual_itregra / 100);
    ELSIF v_itregra.tp_valor_base = 'O' THEN
      nvaloropera := nvaloropera *(v_itregra.vl_percentual_itregra / 100);
      nvalortotal := NVL(nvaloropera, 0) + NVL(nvalorhonor, 0);
    ELSIF v_itregra.tp_valor_base = 'H' THEN
      nvalorhonor := nvalorhonor *(v_itregra.vl_percentual_itregra / 100);
      nvalortotal := NVL(nvaloropera, 0) + NVL(nvalorhonor, 0);
    END IF;
  END IF;
  --
  IF csnhorarioesp = 'S' AND NVL(nvlperchoresp, 0) > 0 THEN
    IF v_grupro.tp_gru_pro <> 'SD' AND NOT bexcessao THEN
      nvalortotal := nvalortotal +(nvalortotal * nvlperchoresp / 100);
      nvalorexced := nvalorexced +(nvalorexced * nvlperchoresp / 100);
      nvalorhonor := nvalorhonor +(nvalorhonor * nvlperchoresp / 100);
      nvalorporte := nvalorporte +(nvalorporte * nvlperchoresp / 100);
    ELSIF v_grupro.tp_gru_pro = 'SD' AND NOT bexcessao THEN
      IF v_itregra.tp_hor_esp_sd = 'T' THEN
        nvalortotal := nvalortotal +(nvalortotal * nvlperchoresp / 100);
        nValorExced := nValorExced + ( nValorExced * nVlPercHorEsp / 100 ) ;
        nvalorhonor := nvalorhonor +(nvalorhonor * nvlperchoresp / 100);
        nvaloropera := nvaloropera +(nvaloropera * nvlperchoresp / 100);
        nvalorporte := nvalorporte +(nvalorporte * nvlperchoresp / 100);
      ELSIF v_itregra.tp_hor_esp_sd = 'H' THEN
        nvalorhonor := nvalorhonor +(nvalorhonor * nvlperchoresp / 100);
        nvalorporte := nvalorporte +(nvalorporte * nvlperchoresp / 100);
      END IF;
    ELSIF bexcessao AND cexcesshoresp = 'S' THEN
      nvalortotal := nvalortotal +(nvalortotal * nvlperchoresp / 100);
      nvalorexced := nvalorexced +(nvalorexced * nvlperchoresp / 100);
      nvalorhonor := nvalorhonor +(nvalorhonor * nvlperchoresp / 100);
      nvaloropera := nvaloropera +(nvaloropera * nvlperchoresp / 100);
      nvalorporte := nvalorporte +(nvalorporte * nvlperchoresp / 100);
    END IF;
  END IF;
  IF vTruncaValor = 'S' then
    -- OP 2685 - pda 563752 - 03/01/2013 - correção erro ora-06502 trocando IF
    --IF NVL(pkg_mv2000.le_configuracao('FFCV', 'CD_CONV_NAO_ARREDONDA_VALOR_CCG'), '0') =  ncodconvenio THEN
    IF instr(nvl(pkg_mv2000.le_configuracao('FFCV', 'CD_CONV_NAO_ARREDONDA_VALOR_CCG'),'X'),ltrim(to_char(ncodconvenio,'0000'))) <> 0 THEN
      nvalortotal := trunc(round(nvalortotal,4),2);
    END IF;
  END IF;
  --PDA 374059(fim)
  --
  IF v_indice.vl_m2filme IS NOT NULL AND((bexcessao AND v_tabconvenio.sn_filme = 'S') OR NOT bexcessao) THEN
    --
    OPEN c_tabfilme(v_itregra.cd_tab_fat, vddatarefer);
    FETCH c_tabfilme INTO nqtfilme;
    CLOSE c_tabfilme;
    --
    OPEN cincidencia;
    FETCH cincidencia INTO vprofatincid, nvlpercincid;
    IF cincidencia%FOUND THEN
      IF nqtfilme IS NOT NULL THEN
          nvalorfilme := v_indice.vl_m2filme *(nqtfilme *(nvlpercincid / 100));
      ELSE
        nvalorfilme := 0;
      END IF;
    ELSE
      IF nqtfilme IS NOT NULL THEN
          nvalorfilme := v_indice.vl_m2filme * nqtfilme;
      ELSE
        nvalorfilme := 0;
      END IF;
    END IF;
    CLOSE cincidencia;
  ELSE
    nvalorfilme := 0;
  END IF;
  --
  OPEN ccalcsemexcessao;
  FETCH ccalcsemexcessao INTO vcalcsemexcessao;
  CLOSE ccalcsemexcessao;
  IF v_acresdesc.sn_acres_desc = 'S' AND(NOT bexcessao OR vcalcsemexcessao = 'S') THEN
    nvlacres := 0;
    nvlacreshonor := 0;
    nvlacresoper := 0;
    nvlacresfilme := 0;
    nvlacresexced := 0;
    nvldesc := 0;
    nvldeschonor := 0;
    nvldescoper := 0;
    nvldescfilme := 0;
    nvldescexced := 0;
    npercentualdesconto := NVL(v_acresdesc.vl_perc_desconto, 0);
    npercentualacrescimo := NVL(v_acresdesc.vl_perc_acrescimo, 0);
    --
    IF NVL(npercentualacrescimo, 0) > 0 THEN
      IF v_acresdesc.sn_vl_filme = 'S' THEN
        nvlacresfilme := nvalorfilme *(npercentualacrescimo / 100);
      END IF;
      IF v_acresdesc.sn_vl_operacional = 'S' THEN
        nvlacresoper := nvaloropera *(npercentualacrescimo / 100);
      END IF;
      IF v_acresdesc.sn_vl_honorario = 'S' THEN
        IF cfuncatimed = 'N' THEN
          nvlacreshonor := nvalorporte *(npercentualacrescimo / 100);
        ELSE
          nvlacreshonor := nvalorhonor *(npercentualacrescimo / 100);
        END IF;
      END IF;
      IF v_acresdesc.sn_vl_operacional = 'N' AND v_acresdesc.sn_vl_honorario = 'N' THEN
        IF cfuncatimed = 'N' THEN
          nvlacres := nvalorporte *(npercentualacrescimo / 100);
          nvlacresexced := nvalorporte *(npercentualacrescimo / 100);
        ELSE
          nvlacres := nvalortotal *(npercentualacrescimo / 100);
          nvlacresexced := nvalorexced *(npercentualacrescimo / 100);
        END IF;
      ELSE
        nvlacres := nvlacreshonor + nvlacresoper;
        nvlacresexced := nvlacres;
      END IF;
      IF NVL(nvalortotal, 0) > 0 AND NVL(nvalorfilme, 0) = 0 AND NVL(nvaloropera, 0) = 0
         AND NVL(nvalorhonor, 0) = 0 THEN
        nvlacres := nvalortotal *(npercentualacrescimo / 100);
      END IF;
    END IF;
    --
    IF NVL(npercentualdesconto, 0) > 0 THEN
      IF v_acresdesc.sn_vl_filme = 'S' THEN
        nvldescfilme := nvalorfilme *(npercentualdesconto / 100);
      END IF;
      IF v_acresdesc.sn_vl_operacional = 'S' THEN
        IF v_itregra.tp_tab_fat = 'H' AND dbamv.pkg_mv2000.le_cliente = 734 THEN
          NULL;
        else
          nvldescoper := nvaloropera *(npercentualdesconto / 100);
        END IF;
      END IF;
      IF v_acresdesc.sn_vl_honorario = 'S' THEN
        IF cfuncatimed = 'N' THEN
          nvldeschonor := nvalorporte *(npercentualdesconto / 100);
        ELSE
          nvldeschonor := nvalorhonor *(npercentualdesconto / 100);
        END IF;
      END IF;
      IF v_acresdesc.sn_vl_operacional = 'N' AND v_acresdesc.sn_vl_honorario = 'N' THEN
        IF cfuncatimed = 'N' THEN
          nvldesc := nvalorporte *(npercentualdesconto / 100);
          nvldescexced := nvalorporte *(npercentualdesconto / 100);
        ELSE
          nvldesc := nvalortotal *(npercentualdesconto / 100);
          nvldescexced := nvalorexced *(npercentualdesconto / 100);
        END IF;
      ELSE
        nvldesc := nvldescoper + nvldeschonor;
        nvldescexced := nvldesc;
      END IF;
      IF NVL(nvalortotal, 0) > 0 AND NVL(nvalorfilme, 0) = 0 AND NVL(nvaloropera, 0) = 0
         AND NVL(nvalorhonor, 0) = 0 THEN
        nvldesc := nvalortotal *(npercentualdesconto / 100);
      END IF;
    END IF;
  ELSE
    nvlacres := 0;
    nvldesc := 0;
    nvlacresexced := 0;
    nvldescexced := 0;
  END IF; --acrescimo e desconto
  --
  IF bindice THEN --Indice CH
    --
    IF NVL(v_indice.vl_ind, 0) = 0 THEN
      cretmsg := 'N?o existe Valor de Indice Cadastrado !';
      RETURN 0;
    END IF;
    --
    nvlchtotal := nvalortotal;
    nvlchhonor := nvalorhonor;
    --
    if vTruncaValor = 'S' then
      IF NOT bexcessao THEN
        nvalortotal := Trunc(Round( nvalortotal * v_indice.vl_ind,4),4);
        nvalorexced := Trunc(Round( nvalorexced * v_indice.vl_ind,4),4);
        nvalorhonor := Trunc(Round( nvalorhonor * v_indice.vl_honor,4),4);
        nvaloropera := Trunc(Round( nvaloropera * v_indice.vl_ind,4),4);
        nvalorporte := Trunc(Round( nvalorporte * v_indice.vl_honor,4),4);
      ELSE
        nvalortotal := Trunc(Round( nvalortotal * v_indice.vl_ind,4),4);
        nvalorexced := Trunc(Round( nvalorexced * v_indice.vl_ind,4),4);
        nvalorhonor := Trunc(Round( nvalorhonor * v_indice.vl_ind,4),4);
        nvaloropera := Trunc(Round( nvaloropera * v_indice.vl_ind,4),4);
        nvalorporte := Trunc(Round( nvalorporte * v_indice.vl_ind,4),4);
      END IF;
    else
      IF NOT bexcessao THEN
        nvalortotal := nvalortotal * v_indice.vl_ind;
        nvalorexced := nvalorexced * v_indice.vl_ind;
        nvalorhonor := nvalorhonor * v_indice.vl_honor;
        nvaloropera := nvaloropera * v_indice.vl_ind;
        nvalorporte := nvalorporte * v_indice.vl_honor;
      ELSE
        nvalortotal := nvalortotal * v_indice.vl_ind;
        nvalorexced := nvalorexced * v_indice.vl_ind;
        nvalorhonor := nvalorhonor * v_indice.vl_ind;
        nvaloropera := nvaloropera * v_indice.vl_ind;
        nvalorporte := nvalorporte * v_indice.vl_ind;
      END IF;
    end if;
    --
    IF v_acresdesc.sn_vl_operacional = 'N' AND v_acresdesc.sn_vl_honorario = 'N' THEN
      IF cfuncatimed = 'N' THEN
        nvlacres :=(nvalorporte *(v_acresdesc.vl_perc_acrescimo / 100))        ;
        nvlacresexced :=(nvalorporte *(v_acresdesc.vl_perc_acrescimo / 100))   ;
        nvldesc :=(nvalorporte *(v_acresdesc.vl_perc_desconto / 100))          ;
        nvldescexced :=(nvalorporte *(v_acresdesc.vl_perc_desconto / 100))     ;
      ELSE
        nvlacres :=(nvalortotal *(v_acresdesc.vl_perc_acrescimo / 100))         ;
        nvlacresexced :=(nvalorexced *(v_acresdesc.vl_perc_acrescimo / 100))    ;
        nvldesc :=(nvalortotal *(v_acresdesc.vl_perc_desconto / 100))           ;
        nvldescexced :=(nvalortotal *(v_acresdesc.vl_perc_desconto / 100))      ;
      END IF;
    ELSE
      nvlacres := (nvlacreshonor * v_indice.vl_honor) +(nvlacresoper * v_indice.vl_ind);
      nvlacresexced := (nvlacreshonor * v_indice.vl_honor) +(nvlacresoper * v_indice.vl_ind);
      nvldesc := (nvldescoper * v_indice.vl_ind) +(nvldeschonor * v_indice.vl_honor);
      nvldescexced := (nvldescoper * v_indice.vl_ind) +(nvldeschonor * v_indice.vl_honor);
    END IF;
    --
  END IF; --Indice CH
  --
  nvlacres := nvlacres + nvlacresfilme;
  nvldesc := nvldesc + nvldescfilme;
  nvlacresexced := nvlacresexced + nvlacresfilme;
  nvldescexced := nvldescexced + nvldescfilme;
  --
  IF v_grupro.tp_gru_pro IN('SP', 'SD') THEN
    IF cfuncatimed = 'N' THEN
      nvaloropera := 0;
      nvalortotal := nvalorporte + nvaloropera;
    ELSE
      nvalortotal := nvalorhonor + nvaloropera;
    END IF;
  END IF;
  --
  OPEN c_franquia;
  FETCH c_franquia INTO nvlrfranquia,
                        nqtpontos,
                        nvlpercfranquia
			  ;
  CLOSE c_franquia;
  IF ncdfranquia IS NOT NULL AND NVL(nvlpercfranquia, 0) = 0 THEN
    IF ctpconvenio = 'P' THEN
      IF nvl(nqtpontos,0) > 0 then
        nvalortotal := dbamv.pack_aux_ffcv.val_ponto_franquia(ncodconvenio, vddatarefer, nqtpontos);
      ELSE
        nvalortotal := NVL(nvlrfranquia, 0);
      END IF;
      --
      IF NVL(nvalorhonor, 0) > 0 THEN
        nvalorhonor := NVL(nvlrfranquia, 0);
      END IF;
      --
      IF NVL(nvaloropera, 0) > 0 THEN
        nvaloropera := NVL(nvlrfranquia, 0);
      END IF;
      --
      nvalorfilme := 0;
      --
    ELSIF ctpconvenio = 'C' THEN
      --
      IF nvl(nqtpontos,0) > 0 then
        nvalortotal :=
          nvalortotal - dbamv.pack_aux_ffcv.val_ponto_franquia(ncodconvenio, vddatarefer, nqtpontos);
      ELSE
        IF nvlrfranquia is not null then -- >  nvalortotal then
          nvalortotal := nvalortotal + Nvl(nvalorfilme, 0) - NVL(nvlrfranquia, 0);
        ELSE
          nvalortotal := nvalortotal - NVL(nvlrfranquia, 0);
        END IF;
        IF nvalortotal < 0 THEN
          nvalortotal := 0;
        END IF;
      END IF;
      --
      IF NVL(nvalorhonor, 0) > 0 THEN
        nvalorhonor := nvalorhonor - NVL(nvlrfranquia, 0);
        IF nvalorhonor < 0 THEN
          nvalorhonor := 0;
        END IF;
      END IF;
      --
      IF NVL(nvaloropera, 0) > 0 THEN
        nvaloropera := nvaloropera - NVL(nvlrfranquia, 0);
        IF nvaloropera < 0 THEN
          nvaloropera := 0;
        END IF;
      END IF;
      --
    END IF;
   --
  ELSIF (NVL(nvlpercfranquia, 0) > 0) OR
        (NVL(npercfranquia  , 0) > 0) OR
        (nvlpercfranquia = 0 AND v_hospital.cd_hospital = 312) THEN
    --
    nvlunitregra := nvalortotal;
    --
    nvalortotal :=((nvalortotal * npercfranquia) / 100);
    --
    IF vregraatend.sn_regra_atendimento_conta <> 'S' THEN
      nvalorhonor :=((nvalorhonor * npercfranquia) / 100);
      nvaloropera :=((nvaloropera * npercfranquia) / 100);
      nvalorporte :=((nvalorporte * npercfranquia) / 100);
      nvalorfilme :=((nvalorfilme * npercfranquia) / 100);
      nvlunitregra := NULL;
    END IF;
    --
    --
  END IF;
  --
  --REGRA DE ACOPLAMENTO
  IF ncdregraacop IS NOT NULL THEN
    OPEN c_acoplam;
    FETCH c_acoplam INTO v_acoplam;
    CLOSE c_acoplam;
    --
    IF v_acoplam.cd_convenio_conta = ncdconvacop AND v_acoplam.cd_con_pla_conta = ncdplanacop THEN
      IF v_acoplam.vl_percentual IS NOT NULL THEN
        --
        if vTruncaValor = 'S' then
          -- PDA 362766 - colocando 4 casas decimais no truncamento(estava 2), pois estava zerando o valores muito pequenos
          nvalortotal := trunc(round(((nvalortotal *(100 - v_acoplam.vl_percentual)) / 100),4),4);
          nvalorhonor := trunc(round(((nvalorhonor *(100 - v_acoplam.vl_percentual)) / 100),4),2);
          nvaloropera := trunc(round(((nvaloropera *(100 - v_acoplam.vl_percentual)) / 100),4),2);
          nvalorporte := trunc(round(((nvalorporte *(100 - v_acoplam.vl_percentual)) / 100),4),2);
          nvalorfilme := trunc(round(((nvalorfilme *(100 - v_acoplam.vl_percentual)) / 100),4),2);
        else
          nvalortotal := ((nvalortotal *(100 - v_acoplam.vl_percentual)) / 100);
          nvalorhonor := ((nvalorhonor *(100 - v_acoplam.vl_percentual)) / 100);
          nvaloropera := ((nvaloropera *(100 - v_acoplam.vl_percentual)) / 100);
          nvalorporte := ((nvalorporte *(100 - v_acoplam.vl_percentual)) / 100);
          nvalorfilme := ((nvalorfilme *(100 - v_acoplam.vl_percentual)) / 100);
        end if;
      ELSIF v_acoplam.vl_particip IS NOT NULL THEN
        nvalortotal := v_acoplam.vl_particip;
        IF NVL(nvalorhonor, 0) > 0 THEN
          nvalorhonor := v_acoplam.vl_particip;
        END IF;
        IF NVL(nvaloropera, 0) > 0 THEN
          nvaloropera := v_acoplam.vl_particip;
        END IF;
      END IF;
    ELSE
      IF v_acoplam.vl_percentual IS NOT NULL THEN
        --
        if vTruncaValor = 'S' then
          nvalortotal := trunc(round(((nvalortotal * v_acoplam.vl_percentual) / 100),4),2);
          nvalorhonor := trunc(round(((nvalorhonor * v_acoplam.vl_percentual) / 100),4),2);
          nvaloropera := trunc(round(((nvaloropera * v_acoplam.vl_percentual) / 100),4),2);
          nvalorporte := trunc(round(((nvalorporte * v_acoplam.vl_percentual) / 100),4),2);
          nvalorfilme := trunc(round(((nvalorfilme * v_acoplam.vl_percentual) / 100),4),2);
        else
          nvalortotal := ((nvalortotal * v_acoplam.vl_percentual) / 100);
          nvalorhonor := ((nvalorhonor * v_acoplam.vl_percentual) / 100);
          nvaloropera := ((nvaloropera * v_acoplam.vl_percentual) / 100);
          nvalorporte := ((nvalorporte * v_acoplam.vl_percentual) / 100);
          nvalorfilme := ((nvalorfilme * v_acoplam.vl_percentual) / 100);
        end if;
      ELSIF v_acoplam.vl_particip IS NOT NULL THEN
        nvalortotal := nvalortotal - v_acoplam.vl_particip;
        IF NVL(nvalorhonor, 0) > 0 THEN
          nvalorhonor := nvalorhonor - v_acoplam.vl_particip;
        END IF;
        IF NVL(nvaloropera, 0) > 0 THEN
          nvaloropera := nvaloropera - v_acoplam.vl_particip;
        END IF;
      END IF;
    END IF;
  END IF; --REGRA DE ACOPLAMENTO
  --
  IF bexcedente THEN
    IF NVL(v_hospital.cd_hospital, 0) IN (312) THEN
      nvlrtotal := nvalorexced * nqtdeexced;
    ELSE
      nvlrtotal := nvalortotal +(nvalorexced * nqtdeexced);
      nvlacres := nvlacres +(nvlacresexced * nqtdeexced);
      nvldesc := nvldesc +(nvldescexced * nqtdeexced);
    END IF;
    nvlacres := nvlacres +(nvlacresexced * nqtdeexced);
    nvldesc := nvldesc +(nvldescexced * nqtdeexced);
  ELSE
    nvlrtotal := nvalortotal * NVL(nqtde, 1);
    nvlacres := nvlacres * NVL(nqtde, 1);
    nvldesc := nvldesc * NVL(nqtde, 1);
  END IF;
  --
  OPEN cpercacresexame(ncdregra, vprofat, ctipoatend);
  FETCH cpercacresexame INTO v_percacresexame;
  CLOSE cpercacresexame;
  --
  IF ( NVL(v_percacresexame.vl_perc_acrescimo_exame, 0) > 0    AND
       NVL(v_percacresexame.sn_incluir_acres_exame, 'N') = 'S' AND
       NOT bexcessao )                                         THEN
    --
    IF v_acresdesc.sn_vl_filme = 'S' THEN
      nvlacresfilme := nvalorfilme *(v_percacresexame.vl_perc_acrescimo_exame / 100);
    ELSE
      nvlacresfilme := 0;
    END IF;
    --
    IF v_acresdesc.sn_vl_operacional = 'S' THEN
      nvlacresoper := nvaloropera *(v_percacresexame.vl_perc_acrescimo_exame / 100);
    END IF;
    --
    IF v_acresdesc.sn_vl_honorario = 'S' THEN
      IF cfuncatimed = 'N' THEN
        nvlacreshonor := nvalorporte *(v_percacresexame.vl_perc_acrescimo_exame / 100);
      ELSE
        nvlacreshonor := nvalorhonor *(v_percacresexame.vl_perc_acrescimo_exame / 100);
      END IF;
    END IF;
    --
    IF v_acresdesc.sn_vl_operacional = 'N' AND v_acresdesc.sn_vl_honorario = 'N' THEN
      IF cfuncatimed = 'N' THEN
        nvlacres := nvalorporte *(v_percacresexame.vl_perc_acrescimo_exame / 100) + nvlacresfilme;
      ELSE
        nvlacres := nvalortotal *(v_percacresexame.vl_perc_acrescimo_exame / 100);
      END IF;
    ELSE
      nvlacres := nvlacreshonor + nvlacresoper + nvlacresfilme;
    END IF;
    --
  END IF;
  --
  nvloper     := NVL(nvaloropera, 0);
  nvlhonor    := NVL(nvalorhonor, 0);
  nvlfilme    := NVL(nvalorfilme, 0);
  nvlporte    := NVL(nvalorporte, 0);
  nvltaxa     := NVL(nvlacres, 0);
  nvldesconto := NVL(nvldesc, 0);
  nvlrtotal   := NVL(nvlrtotal, 0);
  nretval     := NVL(nvalortotal, 0);
  --
  IF NVL(v_hospital.cd_hospital, 0) IN(312) THEN
    IF bexcedente THEN
      nretval := NVL(nvalorexced, 0);
    END IF;
  END IF;
  --
  IF bpacote THEN
    nvloper      := nvloper      * NVL(v_pacote.vl_perc_pac_secund, 1);
    nvlhonor     := nvlhonor     * NVL(v_pacote.vl_perc_pac_secund, 1);
    nvlfilme     := nvlfilme     * NVL(v_pacote.vl_perc_pac_secund, 1);
    nvlporte     := nvlporte     * NVL(v_pacote.vl_perc_pac_secund, 1);
    nvltaxa      := nvltaxa      * NVL(v_pacote.vl_perc_pac_secund, 1);
    nvldesconto  := nvldesconto  * NVL(v_pacote.vl_perc_pac_secund, 1);
    nvlrtotal    := nvlrtotal    * NVL(v_pacote.vl_perc_pac_secund, 1);
    nretval      := nretval      * NVL(v_pacote.vl_perc_pac_secund, 1);
    nvlunitregra := nvlunitregra * NVL(v_pacote.vl_perc_pac_secund, 1);
    --
    nvloper      := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvloper);
    nvlhonor     := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvlhonor);
    nvlfilme     := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvlfilme);
    nvlporte     := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvlporte);
    nvltaxa      := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvltaxa);
    nvldesconto  := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvldesconto);
    nvlrtotal    := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvlrtotal);
    nretval      := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nretval);
    nvlunitregra := dbamv.pack_ffcv_espelho.fnc_aplica_percentual_pacote(ncdconta, ncdlancamento, ctipoatend, nvlunitregra);
  END IF;
  --
  IF not bPacote and ( nvlrtotal <> 0 AND nvlrtotal < 0.01 ) THEN
    nvlrtotal := 0.01;
  END IF;
  RETURN NVL(nvlunitregra, nretval);
  --
END;
FUNCTION val_proc_ffcv_resumido (CPROCEDIMENTO IN VARCHAR2
 ,DDATAREFER IN DATE
 ,DHORAREFER IN DATE
 ,NCODCONVENIO IN NUMBER
 ,NCODPLANO IN NUMBER
 ,CTIPOATEND IN VARCHAR2
 ,NCODTIPOACO IN NUMBER
 ,CRETMSG OUT VARCHAR2
 ,cTipoProduto IN VARCHAR2
 ,nProduto    IN Number
 )
 RETURN BOOLEAN
 IS
   nVlrProced         Number;
   nParametroOut      Number;
   nValorTotal        Number;
   cMsgErro           VarChar2(2000);
   cDscTpProd         VarChar2(100);
--PDA 194962(Início) - 23/08/2007 - Pedro Neiva
   CURSOR cRegra IS
   select regra_lancamento.tp_acao, '4' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = SubStr(CPROCEDIMENTO,1,8)
      and trunc(dt_ini_vigencia) <= trunc(DDATAREFER)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(DDATAREFER,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = NCODCONVENIO
      and ( reg_rel.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or reg_rel.cd_multi_empresa is null)
      and decode(CTIPOATEND,'A',reg_rel.sn_ambulatorial,'N') = decode(CTIPOATEND,'A','S','N')
      and decode(CTIPOATEND,'I',reg_rel.sn_internacao,'N') = decode(CTIPOATEND,'I','S','N')
      and decode(CTIPOATEND,'E',reg_rel.sn_externo,'N') = decode(CTIPOATEND,'E','S','N')
      and decode(CTIPOATEND,'H',reg_rel.sn_hoca,'N') = decode(CTIPOATEND,'H','S','N')
      and decode(CTIPOATEND,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(CTIPOATEND,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = NCODPLANO )
     and exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor  = SubStr(CPROCEDIMENTO,9,Length(CPROCEDIMENTO)) )
     AND regra_lancamento.tp_acao IN ('E','S')
UNION ALL
    -- RESTRINGE APENAS POR PLANO
  select regra_lancamento.tp_acao, '3' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = SubStr(CPROCEDIMENTO,1,8)
      and trunc(dt_ini_vigencia) <= trunc(DDATAREFER)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(DDATAREFER,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = NCODCONVENIO
      and ( reg_rel.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or reg_rel.cd_multi_empresa is null)
      and decode(CTIPOATEND,'A',reg_rel.sn_ambulatorial,'N') = decode(CTIPOATEND,'A','S','N')
      and decode(CTIPOATEND,'I',reg_rel.sn_internacao,'N') = decode(CTIPOATEND,'I','S','N')
      and decode(CTIPOATEND,'E',reg_rel.sn_externo,'N') = decode(CTIPOATEND,'E','S','N')
      and decode(CTIPOATEND,'H',reg_rel.sn_hoca,'N') = decode(CTIPOATEND,'H','S','N')
      and decode(CTIPOATEND,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(CTIPOATEND,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = NCODPLANO   )
       and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor = SubStr(CPROCEDIMENTO,9,Length(CPROCEDIMENTO)) )
    AND regra_lancamento.tp_acao IN ('E','S')
UNION ALL
    --- RESTRINGE APENAS POR SETOR
  select regra_lancamento.tp_acao, '2' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = SubStr(CPROCEDIMENTO,1,8)
      and trunc(dt_ini_vigencia) <= trunc(DDATAREFER)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(DDATAREFER,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = NCODCONVENIO
      and ( reg_rel.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or reg_rel.cd_multi_empresa is null)
      and decode(CTIPOATEND,'A',reg_rel.sn_ambulatorial,'N') = decode(CTIPOATEND,'A','S','N')
      and decode(CTIPOATEND,'I',reg_rel.sn_internacao,'N') = decode(CTIPOATEND,'I','S','N')
      and decode(CTIPOATEND,'E',reg_rel.sn_externo,'N') = decode(CTIPOATEND,'E','S','N')
      and decode(CTIPOATEND,'H',reg_rel.sn_hoca,'N') = decode(CTIPOATEND,'H','S','N')
      and decode(CTIPOATEND,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(CTIPOATEND,'U','S','N')
	  and NOT exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados   )
     and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                and cd_setor = SubStr(CPROCEDIMENTO,9,Length(CPROCEDIMENTO))  )
    AND regra_lancamento.tp_acao IN ('E','S')
     -- NAO RESTRINGE POR PLANO NEM POR SETOR
UNION ALL
  select regra_lancamento.tp_acao, '1' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = SubStr(CPROCEDIMENTO,1,8)
      and trunc(dt_ini_vigencia) <= trunc(DDATAREFER)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(DDATAREFER,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = NCODCONVENIO
      and ( reg_rel.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa or reg_rel.cd_multi_empresa is null)
      and decode(CTIPOATEND,'A',reg_rel.sn_ambulatorial,'N') = decode(CTIPOATEND,'A','S','N')
      and decode(CTIPOATEND,'I',reg_rel.sn_internacao,'N') = decode(CTIPOATEND,'I','S','N')
      and decode(CTIPOATEND,'E',reg_rel.sn_externo,'N') = decode(CTIPOATEND,'E','S','N')
      and decode(CTIPOATEND,'H',reg_rel.sn_hoca,'N') = decode(CTIPOATEND,'H','S','N')
      and decode(CTIPOATEND,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(CTIPOATEND,'U','S','N')
	  and NOT exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
     and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
    AND regra_lancamento.tp_acao IN ('E','S')
    UNION all
    SELECT 'S' tp_acao, '0' grau
      FROM DBAMV.REGRA_SUBSTITUICAO_PROCED
    WHERE cd_setor = SubStr(CPROCEDIMENTO,9,Length(CPROCEDIMENTO))
     AND cd_pro_fat_substituto = SubStr(CPROCEDIMENTO,1,8)
     AND Decode(tp_atendimento,'T',CTIPOATEND,tp_atendimento ) = CTIPOATEND
     AND cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
     vcRegra cRegra%ROWTYPE;
     vvRegraConcat varchar2(100):=null;
BEGIN
      vvRegraConcat:=cTipoProduto;
      if vvRegraConcat is not null and SubStr(vvRegraConcat,1,1) = '@' then
        vvRegraConcat:=SubStr(vvRegraConcat,2, Length(vvRegraConcat)-1);
      else
        vvRegraConcat:=null;
      end if;
      -- PDA.: 270330 - 05/02/2009 - Emanoel Deivison (fim)
      --PDA 194962(Início) - 23/08/2007 - Pedro Neiva
      OPEN cRegra;
      FETCH cRegra INTO  vcRegra;
      IF cRegra%NOTFOUND THEN
      --PDA 194962(Fim) - 23/08/2007 - Pedro Neiva
         nVlrProced := dbamv.pack_ffcv_espelho.Val_Proc_FFCV( Substr(CPROCEDIMENTO, 1, 8), -- pda 201204 10/09/2007
                                           DDATAREFER,
                                           DHORAREFER,
                                           NCODCONVENIO,
                                           NCODPLANO,
                                           CTIPOATEND,
                                           NCODTIPOACO,
                                           Null,
                                           Null,
                                           cMsgErro,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           Null,
                                           1,
                                           nValorTotal,
                                           vvRegraConcat,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           false,
                     					   null,
					                       SubStr(CPROCEDIMENTO,9,Length(CPROCEDIMENTO)),
                     					   null,
                                           null
                                           ) ;
     END IF;
     CLOSE cRegra;
    if cMsgErro is not null Then
       cDscTpProd := 'item';
       if cTipoProduto = 'Produto' Then
          cDscTpProd := 'produto';
       elsif cTipoProduto in ('SADT', 'Imagem') Then
          cDscTpProd := 'exame';
       elsif cTipoProduto = 'Nutricao' Then
          cDscTpProd := 'opcao';
       elsif cTipoProduto = 'Equipamento' Then
          cDscTpProd := 'equipamento';
       elsif cTipoProduto = 'Sangue' Then
          cDscTpProd := 'sangue';
       elsif cTipoProduto = 'Cirurgia' Then
          cDscTpProd := 'cirurgia';
       end if;
        CRETMSG := cMsgErro ||' Entre em contato com o Faturamento!';
       return false;
    end if;
    RETURN true ;
END;
function FNC_OBTEM_SEQUENCIA(pnCdConta in number,
                             pTpConta  in varchar2) return number is
    cursor cProxSeq is
    select cd_prox_lancamento
      from (select max(nvl(itreg_fat_espelho.cd_lancamento,0)) + 1 cd_prox_lancamento
              from dbamv.itreg_fat_espelho
             where cd_reg_fat = pnCdConta
               and pTpConta = 'H'
           union all
            select max(nvl(itreg_amb_espelho.cd_lancamento,0)) + 1 cd_prox_lancamento
              from dbamv.itreg_amb_espelho
             where cd_reg_amb = pnCdConta
               and pTpConta <> 'H')
      where cd_prox_lancamento is not null;
      cursor cProxSeqOrigem is
      select cd_prox_lancamento_origem
      from (select max(nvl(log_pro_fat_empresa.cd_lancamento_origem,0)) + 1 cd_prox_lancamento_origem
              from dbamv.log_pro_fat_empresa
             where cd_conta_origem = pnCdConta);
   nProxLcto       number;
   nProxLctoOrigem number;
begin
   open cProxSeq;
   fetch cProxSeq into nProxLcto;
   if cProxSeq%notfound then
        nProxLcto := 1;
   end if;
   close cProxSeq;
  if pTpConta = 'H' then
    open cProxSeqOrigem;
    fetch cProxSeqOrigem into nProxLctoOrigem;
    if cProxSeqOrigem%notfound then
       nProxLctoOrigem := 0;
    end if;
    close cProxSeqOrigem;
  else
    nProxLctoOrigem := 0;
  end if;
  if nProxLctoOrigem > nProxLcto then
     return nProxLctoOrigem;
  else
     return nProxLcto;
  end if;
exception
  when others then
    raise_application_error( -20018, 'Não foi possível obter a seqüência da conta: '|| pnCdConta || '! ' || TO_CHAR(SQLCODE) || ': ' || SQLERRM );
end;  /*  fim da função FNC_OBTEM_SEQUENCIA */
FUNCTION FNC_RETORNA_PERCENTUAL_PACOTE   (pCD_ATENDIMENTO   in number
                                         ,pCD_CONTA         in number
                                         ,pCD_LANCAMENTO    in number) return number is
Cursor c_Principal is
select conta_pacote.cd_lancamento_fat cd_lancamento
from dbamv.conta_pacote,
     dbamv.reg_fat
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
union
select conta_pacote.cd_lancamento_amb cd_lancamento
from dbamv.conta_pacote
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and conta_pacote.cd_reg_amb in (select distinct itreg_amb_espelho.cd_reg_amb
                                    from dbamv.itreg_amb_espelho
                                   where itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO);
Cursor c_PacotesConta is
select sum(count_pacote) from (
select count(distinct conta_pacote.cd_conta_pacote) count_pacote
from dbamv.conta_pacote,
     dbamv.reg_fat
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
union
select count(distinct conta_pacote.cd_conta_pacote)
from dbamv.conta_pacote
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_reg_amb in (select distinct itreg_amb_espelho.cd_reg_amb
                                    from dbamv.itreg_amb_espelho
                                   where itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO));
Cursor c_PosicaoPacote is
select conta_pacote.cd_lancamento_fat cd_lancamento,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.pacote
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
union
select conta_pacote.cd_lancamento_amb,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.pacote
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and conta_pacote.cd_reg_amb in (select distinct itreg_amb_espelho.cd_reg_amb
                                    from dbamv.itreg_amb_espelho
                                   where itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO)
order by 2 desc, 3;
Cursor c_PosicaoPacoteEspec (nCdEspec in number, nCdAtiMed in number, cTpCobranca in varchar) is
select conta_pacote.cd_lancamento_fat cd_lancamento,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.cirurgia_aviso,
     dbamv.aviso_cirurgia,
     dbamv.pacote,
     dbamv.itreg_fat_espelho
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and cirurgia_aviso.cd_especialid = nCdEspec
  and ((aviso_cirurgia.cd_equipe_medica = nCdAtiMed and cTpCobranca = 'A') or cTpCobranca <> 'A')
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  and itreg_fat_espelho.cd_mvto = aviso_cirurgia.cd_aviso_cirurgia
  and itreg_fat_espelho.cd_itmvto = cirurgia_aviso.cd_cirurgia
  and aviso_cirurgia.cd_aviso_cirurgia = cirurgia_aviso.cd_aviso_cirurgia
  and upper(itreg_fat_espelho.tp_mvto) = 'CIRURGIA'
  AND conta_pacote.CD_LANCAMENTO_FAT = itreg_fat_espelho.CD_LANCAMENTO
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
  and aviso_cirurgia.cd_aviso_cirurgia = reg_fat.cd_atendimento
union
select conta_pacote.cd_lancamento_amb,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.pacote,
     dbamv.cirurgia_aviso,
     dbamv.aviso_cirurgia,
     dbamv.itreg_amb_espelho
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and itreg_amb_espelho.cd_mvto = aviso_cirurgia.cd_aviso_cirurgia
  and itreg_amb_espelho.cd_itmvto = cirurgia_aviso.cd_cirurgia
  and cirurgia_aviso.cd_especialid = nCdEspec
  and ((aviso_cirurgia.cd_equipe_medica = nCdAtiMed and cTpCobranca = 'A') or cTpCobranca <> 'A')
  and aviso_cirurgia.cd_aviso_cirurgia = cirurgia_aviso.cd_aviso_cirurgia
  AND conta_pacote.CD_LANCAMENTO_AMB = itreg_amb_espelho.CD_LANCAMENTO
  and upper(itreg_amb_espelho.tp_mvto) = 'CIRURGIA'
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
  and conta_pacote.cd_reg_amb = itreg_amb_espelho.cd_reg_amb
order by 2 desc, 3;
Cursor c_PosicaoPacoteProc (nCdProc in varchar) is
select conta_pacote.cd_lancamento_fat cd_lancamento,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.itreg_fat_espelho,
     dbamv.pacote
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and itreg_fat_espelho.cd_pro_fat = nCdProc
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  AND conta_pacote.CD_LANCAMENTO_FAT = itreg_fat_espelho.CD_LANCAMENTO
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
union
select conta_pacote.cd_lancamento_amb,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.pacote,
     dbamv.itreg_amb_espelho
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and itreg_amb_espelho.cd_pro_fat = nCdProc
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
  AND conta_pacote.CD_LANCAMENTO_AMB = itreg_amb_espelho.CD_LANCAMENTO
  and conta_pacote.cd_reg_amb = itreg_amb_espelho.cd_reg_amb
order by 2 desc, 3;
Cursor cPacotePrincipalProc is
select itreg_fat_espelho.cd_pro_fat cd_pro_fat
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.itreg_fat_espelho
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_lancamento_fat = itreg_fat_espelho.cd_lancamento
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
union
select itreg_amb_espelho.cd_pro_fat cd_pro_fat
from dbamv.conta_pacote,
     dbamv.itreg_amb_espelho
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and itreg_amb_espelho.cd_lancamento = conta_pacote.cd_lancamento_amb
  and itreg_amb_espelho.cd_reg_amb = conta_pacote.cd_reg_amb
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO;
-- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
Cursor c_PosicaoPacoteAviso (nCdMvto in number,
                            cDtLanc in varchar2,
                            cHrLanc in varchar2,
                            cTpMvto in varchar2) is
select conta_pacote.cd_lancamento_fat cd_lancamento,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.itreg_fat_espelho,
     dbamv.pacote
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and itreg_fat_espelho.cd_mvto = nCdMvto
  and upper(itreg_fat_espelho.tp_mvto) = 'CIRURGIA'
  and cTpMvto = 'C'
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  AND conta_pacote.CD_LANCAMENTO_FAT = itreg_fat_espelho.CD_LANCAMENTO
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
union
select conta_pacote.cd_lancamento_amb,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.pacote,
     dbamv.itreg_amb_espelho
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and itreg_amb_espelho.cd_mvto = nCdMvto
  and upper(itreg_amb_espelho.tp_mvto) = 'CIRURGIA'
  and cTpMvto = 'C'
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
  AND conta_pacote.CD_LANCAMENTO_AMB = itreg_amb_espelho.CD_LANCAMENTO
  and conta_pacote.cd_reg_amb = itreg_amb_espelho.cd_reg_amb
union
select conta_pacote.cd_lancamento_fat cd_lancamento,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.itreg_fat_espelho,
     dbamv.pacote
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and to_char(itreg_fat_espelho.dt_lancamento,'DD/MM/YYYY') = cDtLanc
  and to_char(itreg_fat_espelho.hr_lancamento,'HH24MI') = cHrLanc
  and upper(itreg_fat_espelho.tp_mvto) = 'FATURAMENTO'
  and cTpMvto = 'F'
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  AND conta_pacote.CD_LANCAMENTO_FAT = itreg_fat_espelho.CD_LANCAMENTO
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
union
select conta_pacote.cd_lancamento_amb,
       pacote.qt_diarias,
       conta_pacote.cd_conta_pacote
from dbamv.conta_pacote,
     dbamv.pacote,
     dbamv.itreg_amb_espelho
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'N'
  and conta_pacote.cd_pacote = pacote.cd_pacote
  and itreg_amb_espelho.cd_mvto = nCdMvto
  and to_char(itreg_amb_espelho.hr_lancamento,'HH24MI') = cHrLanc
  and upper(itreg_amb_espelho.tp_mvto) = 'FATURAMENTO'
  and cTpMvto = 'F'
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
  AND conta_pacote.CD_LANCAMENTO_AMB = itreg_amb_espelho.CD_LANCAMENTO
  and conta_pacote.cd_reg_amb = itreg_amb_espelho.cd_reg_amb
order by 2 desc, 3;
Cursor cPacotePrincipalAviso is
select itreg_fat_espelho.cd_mvto cd_aviso_cirurgia,
       to_char(itreg_fat_espelho.dt_lancamento,'DD/MM/YYYY') dt_lancamento,
       to_char(itreg_fat_espelho.hr_lancamento,'HH24MI') hr_lancamento,
       'C' tp_mvto
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.itreg_fat_espelho
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_lancamento_fat = itreg_fat_espelho.cd_lancamento
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
  and upper(itreg_fat_espelho.tp_mvto) = 'CIRURGIA'
union
select itreg_amb_espelho.cd_mvto cd_aviso_cirurgia,
       null dt_lancamento,
       to_char(itreg_amb_espelho.hr_lancamento,'HH24MI') hr_lancamento,
       'C' tp_mvto
from dbamv.conta_pacote,
     dbamv.itreg_amb_espelho
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and itreg_amb_espelho.cd_lancamento = conta_pacote.cd_lancamento_amb
  and itreg_amb_espelho.cd_reg_amb = conta_pacote.cd_reg_amb
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
  and upper(itreg_amb_espelho.tp_mvto) = 'CIRURGIA'
union
select itreg_fat_espelho.cd_mvto cd_aviso_cirurgia,
       to_char(itreg_fat_espelho.dt_lancamento,'DD/MM/YYYY') dt_lancamento,
       to_char(itreg_fat_espelho.hr_lancamento,'HH24MI') hr_lancamento,
       'F' tp_mvto
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.itreg_fat_espelho
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_lancamento_fat = itreg_fat_espelho.cd_lancamento
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
  and upper(itreg_fat_espelho.tp_mvto) = 'FATURAMENTO'
union
select itreg_amb_espelho.cd_mvto cd_aviso_cirurgia,
       null dt_lancamento,
       to_char(itreg_amb_espelho.hr_lancamento,'HH24MI') hr_lancamento,
       'F' tp_mvto
from dbamv.conta_pacote,
     dbamv.itreg_amb_espelho
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and itreg_amb_espelho.cd_lancamento = conta_pacote.cd_lancamento_amb
  and itreg_amb_espelho.cd_reg_amb = conta_pacote.cd_reg_amb
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
  and upper(itreg_amb_espelho.tp_mvto) = 'FATURAMENTO';
-- PDA 200082 (Fim)
Cursor cPacotePrincipalEspec is
select distinct cirurgia_aviso.cd_especialid cd_especialid,
                aviso_cirurgia.cd_equipe_medica cd_equipe_medica
from dbamv.conta_pacote,
     dbamv.reg_fat,
     dbamv.itreg_fat_espelho,
     dbamv.cirurgia_aviso,
     dbamv.aviso_cirurgia
where conta_pacote.cd_reg_fat = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and conta_pacote.cd_reg_fat = reg_fat.cd_reg_fat
  and conta_pacote.cd_lancamento_fat = itreg_fat_espelho.cd_lancamento
  and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
  and itreg_fat_espelho.cd_mvto = aviso_cirurgia.cd_aviso_cirurgia
  and itreg_fat_espelho.cd_itmvto = cirurgia_aviso.cd_cirurgia
  and aviso_cirurgia.cd_aviso_cirurgia = cirurgia_aviso.cd_aviso_cirurgia
  and upper(itreg_fat_espelho.tp_mvto) = 'CIRURGIA'
  and reg_fat.cd_atendimento = pCD_ATENDIMENTO
  and aviso_cirurgia.cd_aviso_cirurgia = reg_fat.cd_atendimento
union
select distinct cirurgia_aviso.cd_especialid cd_especialid,
                aviso_cirurgia.cd_equipe_medica cd_equipe_medica
from dbamv.conta_pacote,
     dbamv.itreg_amb_espelho,
     dbamv.cirurgia_aviso,
     dbamv.aviso_cirurgia
where conta_pacote.cd_reg_amb = pCD_CONTA
  and conta_pacote.sn_principal = 'S'
  and aviso_cirurgia.cd_aviso_cirurgia = itreg_amb_espelho.cd_atendimento
  and itreg_amb_espelho.cd_mvto = aviso_cirurgia.cd_aviso_cirurgia
  and itreg_amb_espelho.cd_itmvto = cirurgia_aviso.cd_cirurgia
  and aviso_cirurgia.cd_aviso_cirurgia = cirurgia_aviso.cd_aviso_cirurgia
  and upper(itreg_amb_espelho.tp_mvto) = 'CIRURGIA'
  and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
  and itreg_amb_espelho.cd_lancamento = conta_pacote.cd_lancamento_amb
  and itreg_amb_espelho.cd_reg_amb = conta_pacote.cd_reg_amb;
ncd_pacote                   number;
nParametroOut                number;
cParametroOut                varchar2(4000);
nVL_PERC_PAC_SECUND          number;
nVL_PERC_PAC_SECUND_2        number;
nVL_PERC_PAC_SECUND_3        number;
nVL_PERC_PAC_SECUND_4        number;
cTP_COBRANCA_PAC_SECUND      varchar2(1);
nCountPacSecund              number := 0;
vPacotePrincipalProc         cPacotePrincipalProc%rowtype;
vPacotePrincipalAviso        cPacotePrincipalAviso%rowtype;
vPacotePrincipalEspec        cPacotePrincipalEspec%rowtype;
nOrdem                       number := 1;
cComparacao                  varchar2(1) := 'N';
nPercentual                  dbamv.pacote.vl_perc_pac_secund%type;
nCdPrincipal                 dbamv.itreg_fat_espelho.cd_lancamento%type;
BEGIN
OPEN c_PacotesConta;
FETCH c_PacotesConta INTO nCountPacSecund;
CLOSE c_PacotesConta;
if nvl(nCountPacSecund,0) = 0 then
   return(1);
end if;
OPEN c_Principal;
FETCH c_Principal INTO nCdPrincipal;
CLOSE c_Principal;
ncd_pacote := dbamv.pack_ffcv_espelho.FNC_RETORNA_PACOTE(pCD_ATENDIMENTO
                                                        ,pCD_CONTA
                                                        ,nCdPrincipal
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,nParametroOut
                                                        ,nVL_PERC_PAC_SECUND
                                                        ,cTP_COBRANCA_PAC_SECUND
                                                        ,nVL_PERC_PAC_SECUND_2
                                                        ,nVL_PERC_PAC_SECUND_3
                                                        ,nVL_PERC_PAC_SECUND_4
                                                        ,'N'
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut);
                                                        -- PDA 200082 (Fim)
if cTP_COBRANCA_PAC_SECUND = 'G' then
   for vPosicaoPacote in c_PosicaoPacote loop
    if vPosicaoPacote.cd_lancamento = pCD_LANCAMENTO then
       if nOrdem = 1 then
          nPercentual := nVL_PERC_PAC_SECUND / 100;
       elsif nOrdem = 2 then
          nPercentual := nVL_PERC_PAC_SECUND_2 / 100;
       elsif nOrdem = 3 then
          nPercentual := nVL_PERC_PAC_SECUND_3 / 100;
       elsif nOrdem = 4 then
          nPercentual := nVL_PERC_PAC_SECUND_4 / 100;
       else
          nPercentual := 1;
       end if;
       cComparacao := 'S';
     end if;
     nOrdem := nOrdem + 1;
   end loop;
elsif cTP_COBRANCA_PAC_SECUND = 'P' then
   OPEN cPacotePrincipalProc;
   FETCH cPacotePrincipalProc INTO vPacotePrincipalProc;
   CLOSE cPacotePrincipalProc;
   for vPosicaoPacote in c_PosicaoPacoteProc(vPacotePrincipalProc.cd_pro_fat) loop
    if vPosicaoPacote.cd_lancamento = pCD_LANCAMENTO then
       if nOrdem = 1 then
          nPercentual := nVL_PERC_PAC_SECUND / 100;
       elsif nOrdem = 2 then
          nPercentual := nVL_PERC_PAC_SECUND_2 / 100;
       elsif nOrdem = 3 then
          nPercentual := nVL_PERC_PAC_SECUND_3 / 100;
       elsif nOrdem = 4 then
          nPercentual := nVL_PERC_PAC_SECUND_4 / 100;
       else
          nPercentual := 1;
       end if;
       cComparacao := 'S';
     end if;
     nOrdem := nOrdem + 1;
   end loop;
-- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
elsif cTP_COBRANCA_PAC_SECUND = 'V' then
   OPEN cPacotePrincipalAviso;
   FETCH cPacotePrincipalAviso INTO vPacotePrincipalAviso;
   CLOSE cPacotePrincipalAviso;
   for vPosicaoPacote in c_PosicaoPacoteAviso(vPacotePrincipalAviso.cd_aviso_cirurgia,
                                              vPacotePrincipalAviso.dt_lancamento,
                                              vPacotePrincipalAviso.hr_lancamento,
                                              vPacotePrincipalAviso.tp_mvto) loop
    if vPosicaoPacote.cd_lancamento = pCD_LANCAMENTO then
       if nOrdem = 1 then
          nPercentual := nVL_PERC_PAC_SECUND / 100;
       elsif nOrdem = 2 then
          nPercentual := nVL_PERC_PAC_SECUND_2 / 100;
       elsif nOrdem = 3 then
          nPercentual := nVL_PERC_PAC_SECUND_3 / 100;
       elsif nOrdem = 4 then
          nPercentual := nVL_PERC_PAC_SECUND_4 / 100;
       else
          nPercentual := 1;
       end if;
       cComparacao := 'S';
    end if;
    nOrdem := nOrdem + 1;
   end loop;
-- PDA 200082 (Fim)
elsif cTP_COBRANCA_PAC_SECUND in ('A','E') then
   OPEN cPacotePrincipalEspec;
   FETCH cPacotePrincipalEspec INTO vPacotePrincipalEspec;
   CLOSE cPacotePrincipalEspec;
   for vPosicaoPacote in c_PosicaoPacoteEspec(vPacotePrincipalEspec.cd_especialid,
                                              vPacotePrincipalEspec.cd_equipe_medica,
                                              cTP_COBRANCA_PAC_SECUND) loop
    if vPosicaoPacote.cd_lancamento = pCD_LANCAMENTO then
       if nOrdem = 1 then
          nPercentual := nVL_PERC_PAC_SECUND / 100;
       elsif nOrdem = 2 then
          nPercentual := nVL_PERC_PAC_SECUND_2 / 100;
       elsif nOrdem = 3 then
          nPercentual := nVL_PERC_PAC_SECUND_3 / 100;
       elsif nOrdem = 4 then
          nPercentual := nVL_PERC_PAC_SECUND_4 / 100;
       else
          nPercentual := 1;
       end if;
       cComparacao := 'S';
     end if;
     nOrdem := nOrdem + 1;
   end loop;
end if;
if nvl(cComparacao,'N') <> 'S' then
   nPercentual := 1;
end if;
RETURN(nPercentual);
END;
FUNCTION FNC_RETORNA_PACOTE (pCD_ATENDIMENTO     in number
                            ,pCD_CONTA           in number
                            ,pCD_LANCAMENTO      in number
                            ,pSN_FATURADO        out varchar2
                            ,pSN_GUIA            out varchar2
                            ,pCD_PRO_FAT_PACOTE  out varchar2
                            ,pSN_AUTOMATICO      out varchar2
                            ,pSN_PRINCIPAL       out varchar2
                            ,pQT_DIARIAS         out number
                            ,pVL_PERC_PAC_SECUND out number
                            -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
                            ,pTP_COBRANCA_PAC_SECUND out varchar2
                            ,pVL_PERC_PAC_SECUND_2 out number
                            ,pVL_PERC_PAC_SECUND_3 out number
                            ,pVL_PERC_PAC_SECUND_4 out number
                            ,pSN_TELA_RET          in varchar2 default 'N'
                            ,pDS_RETORNO           out varchar2
                            ,psn_valida_autorizacao  out varchar2
                            -- PDA 188077 (Fim)
                            -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
                            ,pSN_DAY_CLINIC out varchar2
                            ,pVL_PERC_ACRES_GEMELARES out number
                            ,pVL_PERC_DESC_RN_UTI out number
                            -- PDA 200082 (Fim)
                            ) return number is
Cursor c_ContaPacote is
 select itreg_fat_espelho.cd_conta_pacote
       ,itreg_fat_espelho.cd_setor
       ,itreg_fat_espelho.cd_pro_fat
       ,itreg_fat_espelho.dt_lancamento
       ,reg_fat.cd_tip_acom
       ,reg_fat.cd_convenio
       ,reg_fat.cd_con_pla
       ,reg_fat.cd_multi_empresa
       ,conta_pacote.sn_principal
       ,atendime.tp_atendimento
       ,pacote.sn_automatico
       ,pacote.sn_guia
       ,pacote.vl_perc_pac_secund
       ,pacote.cd_pro_fat_pacote
       ,pacote.qt_diarias
       ,pacote.cd_pacote
       -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
       ,atendime.cd_tipo_internacao
       ,pacote.TP_COBRANCA_PAC_SECUND
       ,pacote.VL_PERC_PAC_SECUND_2
       ,pacote.VL_PERC_PAC_SECUND_3
       ,pacote.VL_PERC_PAC_SECUND_4
       ,pacote.sn_valida_autorizacao
       -- PDA 188077 (Fim)
       -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
       ,pacote.SN_DAY_CLINIC
       ,pacote.VL_PERC_ACRES_GEMELARES
       ,pacote.VL_PERC_DESC_RN_UTI
       -- PDA 200082 (Fim)
   from dbamv.itreg_fat_espelho,
        dbamv.atendime,
        dbamv.reg_fat,
        dbamv.conta_pacote,
        dbamv.pacote
  where  itreg_fat_espelho.cd_reg_fat = pCD_CONTA
    and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa
    and  itreg_fat_espelho.cd_lancamento = pCD_LANCAMENTO
    -- PDA 157145 (Inicio) - Henrique Antunes - 27/04/2007
    and  reg_fat.cd_atendimento = pCD_ATENDIMENTO
    -- PDA 157145 (Fim)
    and  atendime.tp_atendimento in ('I','H')
    and  reg_fat.cd_atendimento = atendime.cd_atendimento
    and  itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
    and  itreg_fat_espelho.cd_conta_pacote = conta_pacote.cd_conta_pacote(+)
    and  pacote.cd_pacote(+) = conta_pacote.cd_pacote
 union
 select itreg_amb_espelho.cd_conta_pacote
       ,itreg_amb_espelho.cd_setor
       ,itreg_amb_espelho.cd_pro_fat
       ,atendime.dt_atendimento
       ,atendime.cd_tip_acom
       ,itreg_amb_espelho.cd_convenio
       ,itreg_amb_espelho.cd_con_pla
       ,reg_amb.cd_multi_empresa
       ,conta_pacote.sn_principal
       ,atendime.tp_atendimento
       ,pacote.sn_automatico
       ,pacote.sn_guia
       ,pacote.vl_perc_pac_secund
       ,pacote.cd_pro_fat_pacote
       ,pacote.qt_diarias
       ,pacote.cd_pacote
       -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
       ,atendime.cd_tipo_internacao
       ,pacote.TP_COBRANCA_PAC_SECUND
       ,pacote.VL_PERC_PAC_SECUND_2
       ,pacote.VL_PERC_PAC_SECUND_3
       ,pacote.VL_PERC_PAC_SECUND_4
       ,pacote.sn_valida_autorizacao
       -- PDA 188077 (Fim)
       -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
       ,pacote.SN_DAY_CLINIC
       ,pacote.VL_PERC_ACRES_GEMELARES
       ,pacote.VL_PERC_DESC_RN_UTI
       -- PDA 200082 (Fim)
   from dbamv.itreg_amb_espelho,
        dbamv.atendime,
        dbamv.reg_amb,
        dbamv.conta_pacote,
        dbamv.pacote
  where  itreg_amb_espelho.cd_reg_amb = pCD_CONTA
    and  atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa
    and  itreg_amb_espelho.cd_lancamento = pCD_LANCAMENTO
    and  itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
    and  atendime.tp_atendimento in ('A','E','U')
    and  itreg_amb_espelho.cd_atendimento = atendime.cd_atendimento
    and  itreg_amb_espelho.cd_reg_amb = reg_amb.cd_reg_amb
    and  itreg_amb_espelho.cd_conta_pacote = conta_pacote.cd_conta_pacote(+)
    and  pacote.cd_pacote(+) = conta_pacote.cd_pacote;
  /* PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - criando cursor para pegar o cid do atendimento para ser utiliado na rotina le_pacote*/
  Cursor c_Atendime is
  select cd_cid
    from dbamv.atendime
   where cd_atendimento            = pCD_ATENDIMENTO
     and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa;
  /* fim pda 432166*/
v_ContaPacote        c_ContaPacote%rowtype;
nvl_perc_pac_secund  number;
csn_guia             varchar2(1);
ccd_pro_fat_pacote   varchar2(8);
csn_automatico       varchar2(1);
nqt_diarias          number;
ncd_pacote           number;
-- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
nCdTipoInternacao number;
nvl_perc_pac_secund_2  number;
nvl_perc_pac_secund_3  number;
nvl_perc_pac_secund_4  number;
ctp_cobranca_pac_secund  varchar2(1);
csn_valida_autorizacao   varchar2(1);
cds_retorno  varchar2(4000);
-- PDA 188077 (Fim)
-- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
cSN_DAY_CLINIC varchar2(1);
nVL_PERC_ACRES_GEMELARES number;
nVL_PERC_DESC_RN_UTI number;
-- PDA 200082 (Fim)
/* PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - criando variável para passar o cid do atendimento para a rotina le_pacote*/
pCdCid       dbamv.atendime.cd_Cid%type:=null;
/*PDA 432166 fim*/
BEGIN
  open c_ContaPacote;
  fetch c_ContaPacote into v_ContaPacote;
  close c_ContaPacote;
  -- Item encontrase em um pacote
  if v_ContaPacote.cd_conta_pacote is null then
     pSN_FATURADO := 'N';
     pSN_PRINCIPAL := null;
  -- Item encontrase em um pacote
  else
     pSN_FATURADO        := 'S';
     pSN_PRINCIPAL       := v_ContaPacote.sn_principal;
     pVL_PERC_PAC_SECUND := v_ContaPacote.vl_perc_pac_secund;
     pSN_GUIA            := v_ContaPacote.sn_guia;
     pCD_PRO_FAT_PACOTE  := v_ContaPacote.cd_pro_fat_pacote;
     pSN_AUTOMATICO      := v_ContaPacote.sn_automatico;
     pQT_DIARIAS         := v_ContaPacote.qt_diarias;
     -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
     pvl_perc_pac_secund_2 := v_ContaPacote.vl_perc_pac_secund_2;
     pvl_perc_pac_secund_3 := v_ContaPacote.vl_perc_pac_secund_3;
     pvl_perc_pac_secund_4 := v_ContaPacote.vl_perc_pac_secund_4;
     ptp_cobranca_pac_secund := v_ContaPacote.tp_cobranca_pac_secund;
     psn_valida_autorizacao := v_ContaPacote.sn_valida_autorizacao;
     -- PDA 188077 (Fim)
     -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
     pSN_DAY_CLINIC := v_ContaPacote.SN_DAY_CLINIC;
     pVL_PERC_ACRES_GEMELARES := v_ContaPacote.VL_PERC_ACRES_GEMELARES;
     pVL_PERC_DESC_RN_UTI := v_ContaPacote.VL_PERC_DESC_RN_UTI;
     -- PDA 200082 (Fim)
  	 RETURN(v_ContaPacote.cd_pacote);
  end if;
   /* PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - passando o cid do atendimento para a rotina le_pacote, verificando as configuraçções do pacote
                  foi criadno este cursor abaixo justamente para pegar esta informação*/
  open c_Atendime;
  fetch c_Atendime into pCdCid;
  close c_Atendime;
  /* fim pda 432166*/
  ncd_pacote := DBAMV.PKG_FFCV_IT_CONTA.FNC_LE_PACOTE  (v_contaPacote.cd_multi_empresa
                                                       -- PDA 254599 (Inicio) - Henrique Antunes - 17/10/2008
                                                       --,v_contaPacote.tp_atendimento
                                                       ,v_contaPacote.tp_atendimento || substr(pSN_TELA_RET,2,8)
                                                       -- PDA 254599 (Fim)
                                                       ,v_contaPacote.cd_convenio
                                                       ,v_contaPacote.cd_con_pla
                                                       ,v_contaPacote.cd_tip_acom
                                                       ,v_contaPacote.cd_pro_fat
                                                       ,v_contaPacote.cd_setor
                                                       ,v_contaPacote.dt_lancamento
                                                       ,csn_guia
                                                       ,ccd_pro_fat_pacote
                                                       ,csn_automatico
                                                       ,nqt_diarias
                                                       ,nvl_perc_pac_secund
                                                       -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
                                                       ,pCD_ATENDIMENTO
                                                       ,v_contaPacote.cd_tipo_internacao
                                                       ,ctp_cobranca_pac_secund
                                                       ,nvl_perc_pac_secund_2
                                                       ,nvl_perc_pac_secund_3
                                                       ,nvl_perc_pac_secund_4
                                                       ,pSN_TELA_RET
                                                       ,cds_retorno
                                                       ,pCD_CONTA
                                                       ,csn_valida_autorizacao
                                                       -- PDA 188077 (Fim)
                                                       -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
                                                       ,cSN_DAY_CLINIC
                                                       ,nVL_PERC_ACRES_GEMELARES
                                                       ,nVL_PERC_DESC_RN_UTI
                                                       ,pCdCid /* pda 432166 */
                                                       );
                                                       -- PDA 200082 (Fim)
  -- Item não está associado à regra
  if ncd_pacote is null then
     pVL_PERC_PAC_SECUND := null;
     pSN_GUIA            := null;
     pCD_PRO_FAT_PACOTE  := null;
     pSN_AUTOMATICO      := null;
     pQT_DIARIAS         := null;
     -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
     pvl_perc_pac_secund_2 := null;
     pvl_perc_pac_secund_3 := null;
     pvl_perc_pac_secund_4 := null;
     ptp_cobranca_pac_secund := null;
     pDS_RETORNO := null;
     psn_valida_autorizacao := null;
     -- PDA 188077 (Fim)
     -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
     pSN_DAY_CLINIC := null;
     pVL_PERC_ACRES_GEMELARES := null;
     pVL_PERC_DESC_RN_UTI := null;
     -- PDA 200082 (Fim)
     RETURN(null);
  -- Item está associado à regra
  else
     pVL_PERC_PAC_SECUND := nvl_perc_pac_secund;
     pSN_GUIA            := csn_guia;
     pCD_PRO_FAT_PACOTE  := ccd_pro_fat_pacote;
     pSN_AUTOMATICO      := csn_automatico;
     pQT_DIARIAS         := nqt_diarias;
     -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
     pvl_perc_pac_secund_2 := nvl_perc_pac_secund_2;
     pvl_perc_pac_secund_3 := nvl_perc_pac_secund_3;
     pvl_perc_pac_secund_4 := nvl_perc_pac_secund_4;
     ptp_cobranca_pac_secund := ctp_cobranca_pac_secund;
     pDS_RETORNO := cds_retorno;
     psn_valida_autorizacao := csn_valida_autorizacao;
     -- PDA 188077 (Fim)
     -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
     pSN_DAY_CLINIC := cSN_DAY_CLINIC;
     pVL_PERC_ACRES_GEMELARES := nVL_PERC_ACRES_GEMELARES;
     pVL_PERC_DESC_RN_UTI := nVL_PERC_DESC_RN_UTI;
     -- PDA 200082 (Fim)
     RETURN(ncd_pacote);
	end if;
END;
FUNCTION FNC_LE_PACOTE      (pCD_MULTI_EMPRESA   in number
                            ,pTP_ATENDIMENTO     in varchar2
                            ,pCD_CONVENIO        in number
                            ,pCD_CON_PLA         in number
                            ,pCD_TIP_ACOM        in number
                            ,pCD_PRO_FAT         in varchar2
                            ,pCD_SETOR           in number
                            ,pDT_LANCAMENTO      in date
                            ,pSN_GUIA            out varchar2
                            ,pCD_PRO_FAT_PACOTE  out varchar2
                            ,pSN_AUTOMATICO      out varchar2
                            ,pQT_DIARIAS         out number
                            ,pVL_PERC_PAC_SECUND out number
                            -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
                            ,pCD_ATENDIMENTO     in number default null
                            ,pCD_TIPO_INTERNACAO in number default null
                            ,pTP_COBRANCA_PAC_SECUND out varchar2
                            ,pVL_PERC_PAC_SECUND_2 out number
                            ,pVL_PERC_PAC_SECUND_3 out number
                            ,pVL_PERC_PAC_SECUND_4 out number
                            ,pSN_TELA_LER          in varchar2 default 'N'
                            ,pDS_RETORNO           out varchar2
                            ,pCD_CONTA             in number default null
                            ,pSN_VALIDA_AUTORIZACAO  out varchar2
                            -- PDA 188077 (Fim)
                            -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
                            ,pSN_DAY_CLINIC out varchar2
                            ,pVL_PERC_ACRES_GEMELARES out number
                            ,pVL_PERC_DESC_RN_UTI out number
                            -- PDA 200082 (Fim)
                            /* PDA 432166 - Thiago Miranda de Oliveira - 14/05/2011 - criando variável para passar o cid do atendimento para a rotina*/
                            ,pCD_CID            in VARCHAR2     default null
                            /*PDA 432166 fim*/
                            ) return number is
-- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
--Cursor c_RegraPacote is
--Cursor c_RegraPacote (nNrIdade in number) is
-- PDA 188077 (Fim)
/*PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - adicionando configurações nos selects deste cursor:
               - Verificar se existe alguma exceção de cid na tela de configurações do pacote, através da tabela dbamv.pacote_cid,
                 pegando o cid do atendimento ou pelos cids secundarios bamv.cid_ate
               - Segunda regra verifica se a configuração pacote.sn_gemelar esta habilitada, caso esteja é feito uma busca de possíveis recem-nascidos
                 caso a seja gemelar, sera barrado o pacote.
               - Terceira verificação sera pelo IMC - onde se estiver configurad e para o atendimento tenha sido feito o preenchimento dos seus dados
                 verificar se estara dentro das massas configuradas. Este indice sera passado por parâmetro na abertura do cursor.*/
Cursor c_RegraPacote (nNrIdade in number, pnIMC in number) is
 select pacote.cd_pacote
       ,pacote.qt_diarias
       ,pacote.sn_guia
       ,pacote.cd_pro_fat_pacote
       ,pacote.sn_automatico
       ,pacote.dt_vigencia
       ,pacote.cd_convenio
       ,pacote.cd_con_pla
       ,pacote.cd_setor
       ,pacote.cd_tip_acom
       ,0 ds_ordem
       ,pacote.cd_pro_fat
       ,pacote.vl_perc_pac_secund
       -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
       ,pacote.TP_COBRANCA_PAC_SECUND
       ,pacote.VL_PERC_PAC_SECUND_2
       ,pacote.VL_PERC_PAC_SECUND_3
       ,pacote.VL_PERC_PAC_SECUND_4
       ,pacote.SN_VALIDA_AUTORIZACAO
       -- PDA 188077 (Fim)
       -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
       ,pacote.SN_DAY_CLINIC
       ,pacote.VL_PERC_ACRES_GEMELARES
       ,pacote.VL_PERC_DESC_RN_UTI
       -- PDA 200082 (Fim)
  from dbamv.pacote
 where  pacote.cd_multi_empresa = pCD_MULTI_EMPRESA
   and  pacote.cd_pro_fat = pCD_PRO_FAT
   and (pacote.cd_tip_acom = pCD_TIP_ACOM or pacote.cd_tip_acom is null)
   and (pacote.cd_convenio = pCD_CONVENIO or pacote.cd_convenio is null)
   and (pacote.cd_con_pla = pCD_CON_PLA or pacote.cd_con_pla is null)
   and (pacote.cd_setor = pCD_SETOR or pacote.cd_setor is null)
   and (pacote.tp_atendimento = substr(pTP_ATENDIMENTO,1,1))
   and trunc(pacote.dt_vigencia) <= trunc(pDT_LANCAMENTO)
   -- pda 236248(Incio) Pedro Neiva - 25/06/2008
   /*
   and  (pacote.cd_pro_fat_pacote = substr(pCD_PRO_FAT_PACOTE,2,8) or
        substr(pCD_PRO_FAT_PACOTE,2,8) is null)
   */
  and  (pacote.cd_pro_fat_pacote = substr(pTP_ATENDIMENTO,2,8) or
        substr(pTP_ATENDIMENTO,2,8) is null)
   -- pda 236248(Fim) Pedro Neiva - 25/06/2008
   -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
   and (pacote.nr_idade_maxima >= nNrIdade or pacote.nr_idade_maxima is null)
   and (trunc(pacote.dt_vigencia_final) >= trunc(pDT_LANCAMENTO) or pacote.dt_vigencia_final IS NULL)
   and (pacote.cd_tipo_internacao = pCD_TIPO_INTERNACAO or pacote.cd_tipo_internacao is null)
   -- PDA 188077 (Fim)
   and not exists( select 'X'
                     from dbamv.pacote_cid
                    where pacote_cid.cd_cid     = pCD_CID
                      and pacote_cid.cd_pacote  = pacote.cd_pacote
                    union
                   select 'X'
                     from dbamv.pacote_cid,
                          dbamv.cid_ate
                    where cid_ate.cd_atendimento = pCD_ATENDIMENTO
                      and cid_ate.cd_cid         = pacote_cid.cd_cid
                      and pacote_cid.cd_pacote   = pacote.cd_pacote
                 )
   and ( ( nvl(pacote.sn_gemelar, 'N') = 'N' )
         or
         ( nvl(pacote.sn_gemelar, 'N') = 'S'
           and 1 >= (	select Count(recem_nascido.Cd_Recem_Nascido) Cd_Recem_Nascido
		                  from dbamv.recem_nascido,
                               dbamv.admissao_co
                         where admissao_co.cd_atendimento = pCD_ATENDIMENTO
   		                   and recem_nascido.cd_admissao_co  = admissao_co.cd_admissao_co
                           And recem_nascido.Cd_Tip_Morte_Rn Is Null
                    )
         )
       )
   and (
        (pacote.nr_imc_inicial is null) or
        (pnIMC is null) or
        (pnIMC is not null and pacote.nr_imc_inicial is not null and pnIMC BETWEEN pacote.nr_imc_inicial and pacote.nr_imc_final)
       )
   union
 select pacote.cd_pacote
       ,pacote.qt_diarias
       ,pacote.sn_guia
       ,pacote.cd_pro_fat_pacote
       ,pacote.sn_automatico
       ,pacote.dt_vigencia
       ,pacote.cd_convenio
       ,pacote.cd_con_pla
       ,pacote.cd_setor
       ,pacote.cd_tip_acom
       ,1 ds_ordem
       ,pacote.cd_pro_fat
       ,pacote.vl_perc_pac_secund
       -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
       ,pacote.TP_COBRANCA_PAC_SECUND
       ,pacote.VL_PERC_PAC_SECUND_2
       ,pacote.VL_PERC_PAC_SECUND_3
       ,pacote.VL_PERC_PAC_SECUND_4
       ,pacote.SN_VALIDA_AUTORIZACAO
       -- PDA 188077 (Fim)
       -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
       ,pacote.SN_DAY_CLINIC
       ,pacote.VL_PERC_ACRES_GEMELARES
       ,pacote.VL_PERC_DESC_RN_UTI
       -- PDA 200082 (Fim)
  from dbamv.pacote
 where  pacote.cd_multi_empresa = pCD_MULTI_EMPRESA
   and  pacote.cd_pro_fat = pCD_PRO_FAT
   and (pacote.cd_tip_acom = pCD_TIP_ACOM or pacote.cd_tip_acom is null)
   and (pacote.cd_convenio = pCD_CONVENIO or pacote.cd_convenio is null)
   and (pacote.cd_con_pla = pCD_CON_PLA or pacote.cd_con_pla is null)
   and (pacote.cd_setor = pCD_SETOR or pacote.cd_setor is null)
   and  pacote.tp_atendimento = 'T'
   and trunc(pacote.dt_vigencia) <= trunc(pDT_LANCAMENTO)
	 /* Teste >>> */
   -- pda 236248(Incio) Pedro Neiva - 25/06/2008
   /*
   and  (pacote.cd_pro_fat_pacote = substr(pCD_PRO_FAT_PACOTE,2,8) or
        substr(pCD_PRO_FAT_PACOTE,2,8) is null)
   */
  and  (pacote.cd_pro_fat_pacote = substr(pTP_ATENDIMENTO,2,8) or
        substr(pTP_ATENDIMENTO,2,8) is null)
   -- pda 236248(Fim) Pedro Neiva - 25/06/2008
   -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
   and (pacote.nr_idade_maxima >= nNrIdade or pacote.nr_idade_maxima is null)
   and (trunc(pacote.dt_vigencia_final) >= trunc(pDT_LANCAMENTO) or pacote.dt_vigencia_final IS NULL)
   and (pacote.cd_tipo_internacao = pCD_TIPO_INTERNACAO or pacote.cd_tipo_internacao is null)
   -- PDA 188077 (Fim)
   and not exists( select 'X'
                     from dbamv.pacote_cid
                    where pacote_cid.cd_cid     = pCD_CID
                      and pacote_cid.cd_pacote  = pacote.cd_pacote
                    union
                   select 'X'
                     from dbamv.pacote_cid,
                          dbamv.cid_ate
                    where cid_ate.cd_atendimento = pCD_ATENDIMENTO
                      and cid_ate.cd_cid         = pacote_cid.cd_cid
                      and pacote_cid.cd_pacote   = pacote.cd_pacote
                 )
   and ( ( nvl(pacote.sn_gemelar, 'N') = 'N' )
         or
         ( nvl(pacote.sn_gemelar, 'N') = 'S'
           and 1 >= (	select Count(recem_nascido.Cd_Recem_Nascido) Cd_Recem_Nascido
		                  from dbamv.recem_nascido,
                               dbamv.admissao_co
                         where admissao_co.cd_atendimento = pCD_ATENDIMENTO
   		                   and recem_nascido.cd_admissao_co  = admissao_co.cd_admissao_co
                           And recem_nascido.Cd_Tip_Morte_Rn Is Null
                    )
         )
       )
   and (
        (pacote.nr_imc_inicial is null) or
        (pnIMC is null) or
        (pnIMC is not null and pacote.nr_imc_inicial is not null and pnIMC BETWEEN pacote.nr_imc_inicial and pacote.nr_imc_final)
       )
 order by 11, 6 desc, 7, 8, 9, 10;
-- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
Cursor c_Idade is
select fn_idade(paciente.dt_nascimento) nr_idade
from dbamv.paciente,
     dbamv.atendime
where paciente.cd_paciente = atendime.cd_paciente
  and atendime.cd_atendimento = pCD_ATENDIMENTO
  and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa;
Cursor c_IdadePac is
select fn_idade(paciente.dt_nascimento) nr_idade
from dbamv.paciente
where paciente.cd_paciente = pCD_ATENDIMENTO;
--
/*PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - cursor criado para pegar os dados do paciente para ser feito o calculo do IMC*/
cursor cDadosIMC(pnAtend in number) is
SELECT DECODE(SV.TP_SINAL, 'A', 'ALTURA', 'PESO') TP_SINAL,
       ITCS.VALOR
  FROM DBAMV.ITCOLETA_SINAL_VITAL ITCS,
       (select max(c.cd_coleta_sinal_vital) cd_coleta_sinal_vital  , c.CD_ATENDIMENTO
          from DBAMV.COLETA_SINAL_VITAL c
         where c.CD_ATENDIMENTO = pnAtend
         group by c.CD_ATENDIMENTO) CSV
       ,DBAMV.SINAL_VITAL          SV
 WHERE ITCS.CD_COLETA_SINAL_VITAL = CSV.CD_COLETA_SINAL_VITAL
   AND SV.CD_SINAL_VITAL          = ITCS.CD_SINAL_VITAL
   AND NVL(ITCS.SN_ATIVO, 'S')    = 'S'
   AND (SV.ds_sinal_vital LIKE '%PESO%' OR SV.ds_sinal_vital LIKE '%ALTURA%') ;
   /*pda 432166 fim*/
nnridade         number := 0;
-- PDA 188077 (Fim)
v_regra          c_RegraPacote%rowtype;
/*PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - criando variáveis para ser utilizado no calculo do IMC*/
nAltura      number:=null;
nPeso        number:=null;
IMC          number:=null;
/*PDA 432166 fim*/
BEGIN
-- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
if pCD_ATENDIMENTO is not null and pCD_CONTA is not null then
   open c_Idade;
   fetch c_Idade into nnridade;
   close c_Idade;
else
   open c_IdadePac;
   fetch c_IdadePac into nnridade;
   close c_IdadePac;
end if;
if nnridade is null then
   nnridade := 0;
end if;
--
/*PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - abrindo cursor para pegar os dados para fazer o calculo do IMC*/
if pCD_ATENDIMENTO is not null then
  for c in cDadosIMC(pCD_ATENDIMENTO) loop
    if c.TP_SINAL = 'ALTURA' then
      nAltura:= c.VALOR;
    else
      nPeso := c.VALOR;
    end if;
  end loop;
  -- o calculo do imc é justamente a altura dividido pelo peso * peso
  if nAltura is not null and nPeso is not null then
    nAltura:= nAltura/100;
    --
    IMC:= nPeso / (nAltura * nAltura);
  end if;
end if;
/*PDA 432166 fim*/
--
--open c_RegraPacote;
--fetch c_RegraPacote into v_regra;
--close c_RegraPacote;
--
/*PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - passando o IMC na passagem da abertura do cursor*/
open c_RegraPacote(nnridade, IMC);
fetch c_RegraPacote into v_regra;
close c_RegraPacote;
if pCD_CONTA is not null then
  if DBAMV.PKG_FFCV_IT_CONTA.FNC_VERIFICA_ACOMODACAO_PACOTE(pCD_ATENDIMENTO,pCD_CONTA,v_regra.cd_pacote,null) THEN
   IF pSN_TELA_LER = 'N' then
      pSN_AUTOMATICO      := null;
      pVL_PERC_PAC_SECUND := null;
      pSN_GUIA            := null;
      pCD_PRO_FAT_PACOTE  := null;
      pSN_AUTOMATICO      := null;
      pQT_DIARIAS         := null;
      -- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
      pVL_PERC_PAC_SECUND_2 := null;
      pVL_PERC_PAC_SECUND_3 := null;
      pVL_PERC_PAC_SECUND_4 := null;
      pTP_COBRANCA_PAC_SECUND := null;
      pDS_RETORNO := null;
      pSN_VALIDA_AUTORIZACAO := null;
      -- PDA 188077 (Fim)
      -- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
      pSN_DAY_CLINIC := null;
      pVL_PERC_ACRES_GEMELARES := null;
      pVL_PERC_DESC_RN_UTI := null;
      -- PDA 200082 (Fim)
      RETURN(null);
   ELSE
      pDS_RETORNO := 'Pacote no caracterizado pelo paciente ter passado por acomodao que desconfigura pacotes. ' ||
                     'Cadastro de Pacotes - Aba: Acomodaes';
   END IF;
  end if;
end if;
-- PDA 188077 (Fim)
pSN_AUTOMATICO      := v_regra.sn_automatico;
pVL_PERC_PAC_SECUND := v_regra.vl_perc_pac_secund;
pSN_GUIA            := v_regra.sn_guia;
pCD_PRO_FAT_PACOTE  := v_regra.cd_pro_fat_pacote;
pSN_AUTOMATICO      := v_regra.sn_automatico;
pQT_DIARIAS         := v_regra.qt_diarias;
-- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
pVL_PERC_PAC_SECUND_2 := v_regra.vl_perc_pac_secund_2;
pVL_PERC_PAC_SECUND_3 := v_regra.vl_perc_pac_secund_3;
pVL_PERC_PAC_SECUND_4 := v_regra.vl_perc_pac_secund_4;
pTP_COBRANCA_PAC_SECUND := v_regra.TP_COBRANCA_PAC_SECUND;
pSN_VALIDA_AUTORIZACAO := v_regra.SN_VALIDA_AUTORIZACAO;
-- PDA 188077 (Fim)
-- PDA 200082 (Inicio) - Henrique Antunes - 30/08/2007
pSN_DAY_CLINIC := v_regra.SN_DAY_CLINIC;
pVL_PERC_ACRES_GEMELARES := v_regra.VL_PERC_ACRES_GEMELARES;
pVL_PERC_DESC_RN_UTI := v_regra.VL_PERC_DESC_RN_UTI;
-- PDA 200082 (Fim)
RETURN(v_regra.cd_pacote);
END;
-- PDA 157145 (Fim)
-- PDA 188077 (Inicio) - Henrique Antunes - 19/07/2007
FUNCTION FNC_VERIFICA_ACOMODACAO_PACOTE  (pCD_ATENDIMENTO   in number
                                         ,pCD_CONTA         in number
                                         ,pCD_PACOTE        in number
                                         ,pCD_TIP_ACOM      in number := null) return boolean is
Cursor c_MovInt is
 select distinct mov_int.cd_tip_acom
   from dbamv.mov_int,
        dbamv.reg_fat,
        dbamv.atendime
  where mov_int.cd_atendimento = pCD_ATENDIMENTO
    and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa
    and reg_fat.cd_atendimento = mov_int.cd_atendimento
    and reg_fat.cd_atendimento = atendime.cd_atendimento
    and atendime.tp_atendimento = 'I'
    and reg_fat.cd_reg_fat = pCD_CONTA
    and mov_int.cd_tip_acom = mov_int.cd_tip_acom
    and trunc(mov_int.dt_mov_int) between trunc(reg_fat.dt_inicio) and trunc(nvl(reg_fat.dt_final,sysdate))
 union
 select distinct mov_int.cd_tip_acom
   from dbamv.mov_int,
        dbamv.atendime
  where mov_int.cd_atendimento = pCD_ATENDIMENTO
    and mov_int.cd_atendimento = atendime.cd_atendimento
    and mov_int.cd_tip_acom = mov_int.cd_tip_acom
    and atendime.tp_atendimento in ('A','E','U')
    and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa;
Cursor c_RegraAcomod (nCdTipAcom in number,nCdPacote in number) is
 select 'x'
  from dbamv.pacote_tip_acom
 where  pacote_tip_acom.cd_tip_acom = nCdTipAcom
   and  pacote_tip_acom.cd_pacote = nCdPacote;
/* pda 432166 - Thiago Miranda de oliveira - adicionando número da conta no cursor para guardar no log de descaracterização*/
Cursor c_Conta is
 select distinct conta_pacote.cd_pacote,
                 conta_pacote.cd_conta_pacote,
                 conta_pacote.cd_reg_fat,
                 to_number(null) cd_reg_amb
   from dbamv.conta_pacote,
        dbamv.reg_fat
  where reg_fat.cd_atendimento = pCD_ATENDIMENTO
    and reg_fat.cd_reg_fat = conta_pacote.cd_reg_fat
-- PDA 210263 (Inicio) - Henrique Antunes - 14/12/2007
union
select distinct conta_pacote.cd_pacote,
                conta_pacote.cd_conta_pacote,
                conta_pacote.cd_reg_fat,
                to_number(null) cd_reg_amb
   from dbamv.conta_pacote,
        dbamv.reg_fat,
        dbamv.atendime
  where reg_fat.cd_atendimento = atendime.cd_atendimento_pai
    and atendime.cd_atendimento = pCD_ATENDIMENTO
    and reg_fat.cd_reg_fat = conta_pacote.cd_reg_fat
-- PDA 210263 (Fim)
 union
 select distinct conta_pacote.cd_pacote,
                 conta_pacote.cd_conta_pacote,
                 to_number(null) cd_reg_fat,
                 conta_pacote.cd_reg_amb
   from dbamv.conta_pacote,
        dbamv.itreg_amb_espelho
  where itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
    and itreg_amb_espelho.cd_reg_amb = conta_pacote.cd_reg_amb;
  /* pda 432166 - Thiago Miranda de oliveira - Criando cursor para pegar o motivo de descaracterização do pacote quando for por acomodação*/
  cursor cDescaractPacote is
    select cd_motivo_descaract_pacote
      from dbamv.motivo_descaract_pacote
     where tp_motivo_descaract_pacote = 'A';
  /* pda 432166 fim */
v_RegraAcomod     varchar2(1);
/* pda 432166 - Thiago Miranda de oliveira - criando variável para guardar o retorno do cursor*/
vMotivo           number:=null;
/* pda 432166 fim*/
BEGIN
if pCD_TIP_ACOM is not null then
 for v_Conta in c_Conta loop
    open c_RegraAcomod(pCD_TIP_ACOM,v_Conta.cd_pacote);
    fetch c_RegraAcomod into v_RegraAcomod;
    if c_RegraAcomod%found then
       close c_RegraAcomod;
       null;--dbamv.pkg_ffcv_it_conta.prc_remove_pacote (v_Conta.cd_conta_pacote);
       /* pda 432166 - Thiago Miranda de oliveira - Colocando a abertura do cursor de descaracterização logo abaico da rotina que remove o pacote para que possa
                       ser gravado no log o motivo que o fez. O mesmo so devera ser chamado se o motivo estiver configurado na tabela de descaracterização do pacote*/
       if vMotivo is null then
         open cDescaractPacote;
         fetch cDescaractPacote into vMotivo;
         close cDescaractPacote;
       end if;
       --
       if vMotivo is not null then
         null;--dbamv.pkg_ffcv_it_conta.PRC_GRAVA_LOG_REMOVE_PACOTE (pCD_ATENDIMENTO,v_Conta.cd_reg_fat,v_Conta.cd_reg_amb,vMotivo);
       end if;
       /* pda 432166 fim */
       return(true);
    end if;
    close c_RegraAcomod;
 end loop;
end if;
if pCD_CONTA is not null then
  for v_MovInt in c_MovInt loop
    open c_RegraAcomod(v_MovInt.cd_tip_acom,pCD_PACOTE);
    fetch c_RegraAcomod into v_RegraAcomod;
    if c_RegraAcomod%found then
       close c_RegraAcomod;
       return(true);
    end if;
    close c_RegraAcomod;
  end loop;
end if;
RETURN(false);
END;
FUNCTION FNC_VERIFICA_PACOTE_ITEM  (pCD_PACOTE        in number
                                   ,pCD_SETOR         in number
                                   ,pCD_PRO_FAT       in varchar2
                                   ,pCD_ATENDIMENTO   in number
                                   ,pCD_CONTA         in number
                                   ,pCD_LANCAMENTO    in number
                                   ,pCD_CONTA_PACOTE  in number
                                   ,pQT_LANCAMENTO    in number
                                   /* PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - criando variável de retorno das quantidades do procedimento*/
                                   ,pQT_EXCEDEU       out number
                                   /*PDA 432166 fim*/
                                   /* PDA 432166 - Thiago Miranda de Oliveira - 18/05/2011 - criando variável de retorno sen vai ser inserido em uma conta particular*/
                                   ,pConta_part       out varchar2
                                   /*PDA 432166 fim*/
                                   ,pTP_CHECAGEM      in varchar2
                                   ,pDT_LANCAMENTO    in date DEFAULT NULL
                                   ,pHR_LANCAMENTO    in date DEFAULT NULL
                                   ,pCD_CONVENIO      in number DEFAULT NULL
                                   ,pCD_CON_PLA       in number DEFAULT NULL
                                   ,pTP_ATENDIMENTO   in varchar2 DEFAULT NULL
                                   ,pCD_TIP_ACOM      in number DEFAULT NULL) return boolean is
/*pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - Regra de exceção da exceção de grupo por procedimento, para quando tiver um grupo de procedimento
               configurado, o mesmo não ira ser colocado dentro do pacote, sendo que se o procedimetno em questão estiver na tabela de execeção de procedimentos
               do pacote, a mesma ira ser retornada normalmente. A tabela em questão é a pacote_excecao_procedimento*/
Cursor cExisteExcecao is
    select distinct 'S'
      from dbamv.pacote_excecao
         , dbamv.pro_fat
     where pacote_excecao.cd_pacote       = pCD_PACOTE
       and ( pacote_excecao.cd_gru_pro is not null or
             pacote_excecao.cd_pro_fat is not null or
             pacote_excecao.cd_setor is not null )
       and pCD_SETOR          = Nvl(pacote_excecao.cd_setor, pCD_SETOR)
       and pCD_PRO_FAT        = Nvl(pacote_excecao.cd_pro_fat, pCD_PRO_FAT)
       and pro_fat.cd_pro_fat = pCD_PRO_FAT
       and pro_fat.cd_gru_pro = Nvl(pacote_excecao.cd_gru_pro, pro_fat.cd_gru_pro)
       and pCD_LANCAMENTO IS NULL
       and not exists (select 'X'
                         from dbamv.pacote_excecao_procedimento
                        where pacote_excecao_procedimento.cd_pacote_excecao = pacote_excecao.cd_pacote_excecao
                          and pacote_excecao_procedimento.cd_pro_fat        = pCD_PRO_FAT
                      )
     union
     select distinct 'S'
       from dbamv.pacote_excecao
      where pacote_excecao.cd_pacote in (select conta_pacote.cd_pacote
                                         from dbamv.conta_pacote
                                         where conta_pacote.cd_conta_pacote = pCD_CONTA_PACOTE)
        and ( pacote_excecao.cd_gru_pro is not null or
              pacote_excecao.cd_pro_fat is not null or
              pacote_excecao.cd_setor is not null )
        and ( exists ( select 1
                                       from dbamv.itreg_fat_espelho
                                          , dbamv.pro_fat
                                          , dbamv.reg_fat
                                      where itreg_fat_espelho.cd_reg_fat    = pCD_CONTA
                                        and itreg_fat_espelho.cd_lancamento = pCD_LANCAMENTO
                                        and itreg_fat_espelho.cd_reg_fat    = reg_fat.cd_reg_fat
                                        and itreg_fat_espelho.cd_pro_fat    = pro_fat.cd_pro_fat
                                        and pro_fat.cd_gru_pro      = Nvl(pacote_excecao.cd_gru_pro, pro_fat.cd_gru_pro)
                                        and pro_fat.cd_pro_fat      = Nvl(pacote_excecao.cd_pro_fat, pro_fat.cd_pro_fat)
                                        and itreg_fat_espelho.cd_setor      = Nvl(pacote_excecao.cd_setor, itreg_fat_espelho.cd_setor)
                                        and reg_fat.cd_atendimento = pCD_ATENDIMENTO
                                        and not exists (select 'X'
                                                          from dbamv.pacote_excecao_procedimento
                                                         where pacote_excecao_procedimento.cd_pacote_excecao = pacote_excecao.cd_pacote_excecao
                                                           and pacote_excecao_procedimento.cd_pro_fat        = itreg_fat_espelho.cd_pro_fat
                                                        )
                     )
              or exists ( select 1
                                     from dbamv.itreg_amb_espelho
                                        , dbamv.pro_fat
                                    where itreg_amb_espelho.cd_reg_amb    = pCD_CONTA
                                      and itreg_amb_espelho.cd_lancamento = pCD_LANCAMENTO
                                      and itreg_amb_espelho.cd_pro_fat    = pro_fat.cd_pro_fat
                                      and pro_fat.cd_gru_pro      = Nvl(pacote_excecao.cd_gru_pro, pro_fat.cd_gru_pro)
                                      and pro_fat.cd_pro_fat      = Nvl(pacote_excecao.cd_pro_fat, pro_fat.cd_pro_fat)
                                      and itreg_amb_espelho.cd_setor      = Nvl(pacote_excecao.cd_setor, itreg_amb_espelho.cd_setor)
                                      and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
                                      and not exists (select 'X'
                                                        from dbamv.pacote_excecao_procedimento
                                                       where pacote_excecao_procedimento.cd_pacote_excecao = pacote_excecao.cd_pacote_excecao
                                                         and pacote_excecao_procedimento.cd_pro_fat        = itreg_amb_espelho.cd_pro_fat
                                                      )
                        )
            );
/*pda 432166 fim*/
Cursor cExisteTeto (nvltotal in number, nqtch in number) is
    select distinct 'S'
      from dbamv.pacote_tetos
         , dbamv.pro_fat
     where  pacote_tetos.cd_pacote       = pCD_PACOTE
       and ((pacote_tetos.qt_ch_teto is not null and nvl(nqtch,0) > pacote_tetos.qt_ch_teto) or
            (pacote_tetos.vl_teto is not null and nvl(nvltotal,0) > pacote_tetos.vl_teto))
       and  pro_fat.cd_pro_fat = pCD_PRO_FAT
       and  pro_fat.cd_gru_pro = Nvl(pacote_tetos.cd_gru_pro, pro_fat.cd_gru_pro)
       and  pCD_LANCAMENTO IS NULL
     union
     select distinct 'S'
       from dbamv.pacote_tetos
      where pacote_tetos.cd_pacote in (select conta_pacote.cd_pacote
                                         from dbamv.conta_pacote
                                         where conta_pacote.cd_conta_pacote = pCD_CONTA_PACOTE)
        and ( pacote_tetos.qt_ch_teto is not null or
              pacote_tetos.vl_teto is not null )
        and ( exists ( select 1
                                       from dbamv.itreg_fat_espelho
                                          , dbamv.pro_fat
                                          , dbamv.reg_fat
                                      where itreg_fat_espelho.cd_reg_fat    = pCD_CONTA
                                        and itreg_fat_espelho.cd_lancamento = pCD_LANCAMENTO
                                        and itreg_fat_espelho.cd_reg_fat    = reg_fat.cd_reg_fat
                                        and itreg_fat_espelho.cd_pro_fat    = pro_fat.cd_pro_fat
                                        and pro_fat.cd_gru_pro      = Nvl(pacote_tetos.cd_gru_pro, pro_fat.cd_gru_pro)
                                        and ((pacote_tetos.qt_ch_teto is not null and
                                              nvl(itreg_fat_espelho.qt_ch_unitario,0) > pacote_tetos.qt_ch_teto) or
                                             (pacote_tetos.vl_teto is not null and
                                              nvl(itreg_fat_espelho.vl_total_conta,0) > pacote_tetos.vl_teto))
                                        and reg_fat.cd_atendimento = pCD_ATENDIMENTO )
              or exists ( select 1
                                     from dbamv.itreg_amb_espelho
                                        , dbamv.pro_fat
                                    where itreg_amb_espelho.cd_reg_amb    = pCD_CONTA
                                      and itreg_amb_espelho.cd_lancamento = pCD_LANCAMENTO
                                      and itreg_amb_espelho.cd_pro_fat    = pro_fat.cd_pro_fat
                                      and pro_fat.cd_gru_pro      = Nvl(pacote_tetos.cd_gru_pro, pro_fat.cd_gru_pro)
                                      and ((pacote_tetos.qt_ch_teto is not null and
                                            nvl(itreg_amb_espelho.qt_ch_unitario,0) > pacote_tetos.qt_ch_teto) or
                                           (pacote_tetos.vl_teto is not null and
                                            nvl(itreg_amb_espelho.vl_total_conta,0) > pacote_tetos.vl_teto))
                                      and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO ));
Cursor cExisteTetoCount is
    select sum(count_registro) from (
    select count(*) count_registro
          from dbamv.pacote_tetos
         , dbamv.pro_fat
     where  pacote_tetos.cd_pacote       = pCD_PACOTE
       and (pacote_tetos.qt_ch_teto is not null or pacote_tetos.vl_teto is not null)
       and  pro_fat.cd_pro_fat = pCD_PRO_FAT
       and  pro_fat.cd_gru_pro = Nvl(pacote_tetos.cd_gru_pro, pro_fat.cd_gru_pro)
       and pCD_LANCAMENTO IS NULL
     union
    select count(*)
       from dbamv.pacote_tetos
      where pacote_tetos.cd_pacote in (select conta_pacote.cd_pacote
                                         from dbamv.conta_pacote
                                         where conta_pacote.cd_conta_pacote = pCD_CONTA_PACOTE));
Cursor cExisteGrupoProt is
    select distinct 'S'
      from dbamv.pacote_gru_pro
         , dbamv.pro_fat
     where pacote_gru_pro.cd_pacote       = pCD_PACOTE
       and pro_fat.cd_pro_fat = pCD_PRO_FAT
       and pro_fat.cd_gru_pro = pacote_gru_pro.cd_gru_pro
       and pCD_LANCAMENTO IS NULL
     union
     select distinct 'S'
       from dbamv.pacote_gru_pro
      where pacote_gru_pro.cd_pacote in (select conta_pacote.cd_pacote
                                         from dbamv.conta_pacote
                                         where conta_pacote.cd_conta_pacote = pCD_CONTA_PACOTE)
        and ( exists ( select 1
                                       from dbamv.itreg_fat_espelho
                                          , dbamv.pro_fat
                                          , dbamv.reg_fat
                                      where itreg_fat_espelho.cd_reg_fat    = pCD_CONTA
                                        and itreg_fat_espelho.cd_lancamento = pCD_LANCAMENTO
                                        and itreg_fat_espelho.cd_reg_fat    = reg_fat.cd_reg_fat
                                        and itreg_fat_espelho.cd_pro_fat    = pro_fat.cd_pro_fat
                                        and pro_fat.cd_gru_pro      = pacote_gru_pro.cd_gru_pro
                                        and reg_fat.cd_atendimento = pCD_ATENDIMENTO )
              or exists ( select 1
                                     from dbamv.itreg_amb_espelho
                                        , dbamv.pro_fat
                                    where itreg_amb_espelho.cd_reg_amb    = pCD_CONTA
                                      and itreg_amb_espelho.cd_lancamento = pCD_LANCAMENTO
                                      and itreg_amb_espelho.cd_pro_fat    = pro_fat.cd_pro_fat
                                      and pro_fat.cd_gru_pro      = pacote_gru_pro.cd_gru_pro
                                      and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO ));
Cursor cExisteGrupoCount is
    select sum(count_registro) from (
    select count(*) count_registro
      from dbamv.pacote_gru_pro
         , dbamv.pro_fat
     where pacote_gru_pro.cd_pacote       = pCD_PACOTE
       and pCD_LANCAMENTO IS NULL
     union
    select count(*)
       from dbamv.pacote_gru_pro
      where pacote_gru_pro.cd_pacote in (select conta_pacote.cd_pacote
                                         from dbamv.conta_pacote
                                         where conta_pacote.cd_conta_pacote = pCD_CONTA_PACOTE));
-- PDA 328156 - Incio - Raphanelli de Barros
-- Incluido o Parmetro PVCD_PRO_FAT , para subistituir o PCD_PRO_FAT que estava pegando o procedimento principal de pacote
/* pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - correção neste cursor em dois lugares:
               - no select cmo relação ao protocolo de pacote similar foi alterado o comando
                 and protocolo_pacote_similar.cd_pro_fat = pvCD_PRO_FAT
                 pelo comando:
                 and protocolo_pacote_similar.cd_pro_fat_similar = pvCD_PRO_FAT
                 justamente para comprar o procedimento similar para chegar no procedimento do pacote.
               - a segunda alteração é justamente com relação a primeira, o comando:
                 where protocolo_pacote_setor.cd_pro_fat = pvCD_PRO_FAT
                 foi alterado pelo
                 where protocolo_pacote_setor.cd_pro_fat in (select pvCD_PRO_FAT
                                                               from sys.dual
                                                              union
                                                             select protocolo_pacote_similar.CD_PRO_FAT
                                                               from dbamv.protocolo_pacote_similar
                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                and protocolo_pacote_similar.cd_pro_fat_similar = pvCD_PRO_FAT)
                 com isso eu garanto que o setor do protocolo também pode ser de um procedimento similar ao protocolo*/
/* pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - colocando o campo protocolo_pacote.cd_pro_fat neste select*/
/* pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - colocando o campo protocolo_pacote.tp_dispercao neste select*/
Cursor cProtocoloCount(pvcd_pro_fat dbamv.protocolo_pacote.cd_pro_fat%type ) is
  select protocolo_pacote.qt_contratada
       , protocolo_pacote.cd_pro_fat
       , protocolo_pacote.tp_dispercao
       , protocolo_pacote.cd_protocolo_pacote
  from dbamv.protocolo_pacote
  where protocolo_pacote.cd_pro_fat in (select pvCD_PRO_FAT
                                        from sys.dual
                                      union
                                      select protocolo_pacote_similar.CD_PRO_FAT
                                      from dbamv.protocolo_pacote_similar
                                      where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                        and protocolo_pacote_similar.cd_pro_fat_similar = pvCD_PRO_FAT)
    and pCD_SETOR in (select NVL(protocolo_pacote.cd_setor,pCD_SETOR)
                    from sys.dual
                    union
                    select protocolo_pacote_setor.cd_setor
                      from dbamv.protocolo_pacote_setor
                     where protocolo_pacote_setor.cd_protocolo_pacote = protocolo_pacote.cd_protocolo_pacote
                       )
    and protocolo_pacote.cd_pacote = pCD_PACOTE;
--
--PDA 328156 -- Incluido o Parmetro PVCD_PRO_FAT , para subistituir o PCD_PRO_FAT que estava pegando o procedimento principal de pacote
--
/* pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - adicionando clausula do setor, nos dois selects, pois tem que considerar o setor do protocolo
                o setores secundarios, ou se, o protocolo não tem setor, com isso ira retornar todos os setores da conta*/
/* pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - adicionando o procedimento similar os dados do similar, verificando se o mesmo tem o fator informado*/
Cursor cFaturadoCount (pvcd_pro_fat dbamv.protocolo_pacote.cd_pro_fat%type, pnProtpacote in number )  is
     select sum(count_registro) from (
          SELECT SUM (
                      decode( pro_fat_simular.tp_fator_conversao,
                              'D', itreg_fat_espelho.qt_lancamento / pro_fat_simular.qt_fator_conversao,
                              'M', itreg_fat_espelho.qt_lancamento * pro_fat_simular.qt_fator_conversao,
                              itreg_fat_espelho.qt_lancamento
                           )
                     ) count_registro
        FROM dbamv.itreg_fat_espelho
            ,dbamv.reg_fat
            ,(select simu.cd_pro_fat_similar,
                     simu.tp_fator_conversao,
                     simu.qt_fator_conversao
                from dbamv.protocolo_pacote_similar simu
               where simu.cd_pacote = pCD_PACOTE) pro_fat_simular
       WHERE itreg_fat_espelho.cd_reg_fat = pCD_CONTA
         and pro_fat_simular.cd_pro_fat_similar(+) = itreg_fat_espelho.cd_pro_fat
         AND itreg_fat_espelho.cd_pro_fat in (select pvCD_PRO_FAT
                                        from sys.dual
                                      union
                                      select protocolo_pacote_similar.CD_PRO_FAT
                                      from dbamv.protocolo_pacote_similar
                                      where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                        and protocolo_pacote_similar.cd_pro_fat_similar = pvCD_PRO_FAT
                                      union
                                      select protocolo_pacote_similar.CD_PRO_FAT_similar
                                      from dbamv.protocolo_pacote_similar
                                      where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                        and protocolo_pacote_similar.cd_pro_fat = pvCD_PRO_FAT)
         and itreg_fat_espelho.cd_reg_fat    = reg_fat.cd_reg_fat
         and reg_fat.cd_atendimento = pCD_ATENDIMENTO
         AND NVL (itreg_fat_espelho.sn_pertence_pacote, 'N') = 'S'
         and itreg_fat_espelho.cd_setor in (  SELECT DISTINCT cd_setor
                                        FROM dbamv.protocolo_pacote_setor
                                       WHERE cd_protocolo_pacote = pnProtpacote
                                       UNION
                                      select protocolo_pacote.cd_setor
                                        from dbamv.protocolo_pacote
                                       where protocolo_pacote.cd_pro_fat in (select pVCD_PRO_FAT
                                                                               from sys.dual
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat_similar = pVCD_PRO_FAT
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT_similar
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat = pVCD_PRO_FAT
                                                                                )
                                         and protocolo_pacote.cd_pacote = pCD_PACOTE
                                         AND protocolo_pacote.cd_setor = pCD_SETOR
                                       UNION
                                      select itreg_fat_espelho.cd_setor
                                        from dbamv.protocolo_pacote
                                       where protocolo_pacote.cd_pro_fat in (select pVCD_PRO_FAT
                                                                               from sys.dual
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat_similar = pVCD_PRO_FAT
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT_similar
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat = pVCD_PRO_FAT
                                                                                )
                                         and protocolo_pacote.cd_pacote = pCD_PACOTE
                                         AND protocolo_pacote.cd_setor IS null
                                )
       union
        SELECT SUM (
                      decode( pro_fat_simular.tp_fator_conversao,
                              'D', itreg_amb_espelho.qt_lancamento / pro_fat_simular.qt_fator_conversao,
                              'M', itreg_amb_espelho.qt_lancamento * pro_fat_simular.qt_fator_conversao,
                              itreg_amb_espelho.qt_lancamento
                           )
                     ) count_registro
        FROM dbamv.itreg_amb_espelho
            ,(select simu.cd_pro_fat_similar,
                     simu.tp_fator_conversao,
                     simu.qt_fator_conversao
                from dbamv.protocolo_pacote_similar simu
               where simu.cd_pacote = pCD_PACOTE) pro_fat_simular
       WHERE itreg_amb_espelho.cd_reg_amb = pCD_CONTA
         and pro_fat_simular.cd_pro_fat_similar(+) = itreg_amb_espelho.cd_pro_fat
         AND itreg_amb_espelho.cd_pro_fat in (select pvCD_PRO_FAT
                                        from sys.dual
                                      union
                                      select protocolo_pacote_similar.CD_PRO_FAT
                                      from dbamv.protocolo_pacote_similar
                                      where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                        and protocolo_pacote_similar.cd_pro_fat_similar = pvCD_PRO_FAT
                                      union
                                      select protocolo_pacote_similar.CD_PRO_FAT_similar
                                      from dbamv.protocolo_pacote_similar
                                      where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                        and protocolo_pacote_similar.cd_pro_fat = pvCD_PRO_FAT
                                        )
         and itreg_amb_espelho.cd_atendimento = pCD_ATENDIMENTO
         AND NVL (itreg_amb_espelho.sn_pertence_pacote, 'N') = 'S'
         and itreg_amb_espelho.cd_setor in (  SELECT DISTINCT cd_setor
                                        FROM dbamv.protocolo_pacote_setor
                                       WHERE cd_protocolo_pacote = pnProtpacote
                                       UNION
                                      select protocolo_pacote.cd_setor
                                        from dbamv.protocolo_pacote
                                       where protocolo_pacote.cd_pro_fat in (select pVCD_PRO_FAT
                                                                               from sys.dual
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat_similar = pVCD_PRO_FAT
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT_similar
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat = pVCD_PRO_FAT
                                                                                )
                                         and protocolo_pacote.cd_pacote = pCD_PACOTE
                                         AND protocolo_pacote.cd_setor = pCD_SETOR
                                       UNION
                                      select itreg_amb_espelho.cd_setor
                                        from dbamv.protocolo_pacote
                                       where protocolo_pacote.cd_pro_fat in (select pVCD_PRO_FAT
                                                                               from sys.dual
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat_similar = pVCD_PRO_FAT
                                                                              union
                                                                             select protocolo_pacote_similar.CD_PRO_FAT_similar
                                                                               from dbamv.protocolo_pacote_similar
                                                                              where protocolo_pacote_similar.cd_pacote = pCD_PACOTE
                                                                                and protocolo_pacote_similar.cd_pro_fat = pVCD_PRO_FAT
                                                                                )
                                         and protocolo_pacote.cd_pacote = pCD_PACOTE
                                         AND protocolo_pacote.cd_setor IS null
                                ))
         ;
/*pda 432166 fim */
/* pda 432166 - Thiago Miranda de oliveira - Adicionando select das contas ambulatoriais, vistoq ue podem ser feitos pacotes com estas contas*/
/* pda 432166 - Thiago Miranda de oliveira - Adicionando nos selects o campo de data do procedimento para ser utilizado na abertura do cursor de relacionados*/
cursor cVerProfat is
  select cd_pro_fat, dt_lancamento
    from dbamv.itreg_fat_espelho
   where cd_lancamento  = pcd_lancamento
     and cd_reg_fat     = pcd_conta
   union
  select cd_pro_fat, hr_lancamento dt_lancamento
    from dbamv.itreg_amb_espelho
   where cd_lancamento  = pcd_lancamento
     and cd_reg_amb     = pcd_conta
     and cd_atendimento = pCD_ATENDIMENTO ;
/*pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - Criando cursor verificando se o mesmo é uma diária e outro
               cursor verificando se a diaria de gabarito esta habilitada*/
cursor cProFatDiaria(pnProFat in varchar2) is
  select 'X'
    from dbamv.pro_fat
   where pro_fat.cd_pro_fat = pnProFat
     and substr(pro_fat.tp_serv_hospitalar,1,1) = 'D';
--
cursor cPacote is
  select nvl(sn_diaria_gabarito, 'N') sn_diaria_gabarito
    from dbamv.pacote
   where cd_pacote = pCD_PACOTE;
/*pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - Criando cursor para pegar todos os pacotes da conta para ser excluidos
               se a configuracao de diaria de gabarito estiver habilitada*/
cursor cContaPacote(pnpacote in number, pnConta in number) is
  select cp.cd_conta_pacote
    from dbamv.conta_pacote cp
   where cp.cd_pacote = nvl(pnpacote, cp.cd_pacote)
     and cp.cd_reg_fat = pnConta;
/*fim pda 432166*/
/* pda 432166 - Thiago Miranda de oliveira - 18/05/2011 - cursor criado para pegar o fator de conversao do procedimento similar
                para o procedimento do gabarito*/
cursor cDadosSimilar(pvprofat in varchar2) is
  select s.tp_fator_conversao,
         s.qt_fator_conversao
    from dbamv.protocolo_pacote_similar s
   where s.cd_pacote          = pCD_PACOTE
     and s.cd_pro_fat_similar = pvprofat;
/* pda 432166 fim */
vProfat dbamv.itreg_fat_espelho.cd_pro_fat%type;
-- PDA 328156 - Fim
/* pda 432166 */
 CURSOR c_relacionados(pnProfat in varchar2, pnConvenio in number, pnPlano in number, pnData in date, pnTpAtend in varchar2) IS
  SELECT 'X'
    FROM dbamv.con_pla
       , dbamv.regra
       , dbamv.val_pro_relacionado rela
       , dbamv.empresa_con_pla
   WHERE empresa_con_pla.cd_convenio      = con_pla.cd_convenio
     AND empresa_con_pla.cd_con_pla       = con_pla.cd_con_pla
     AND empresa_con_pla.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa
     AND rela.cd_pro_fat_pai              = pnProfat
     AND con_pla.cd_convenio              = pnConvenio
     AND con_pla.cd_con_pla               = pnPlano
     AND rela.tp_lancamento               = 'A'
     AND con_pla.cd_regra                 = regra.cd_regra
     AND rela.cd_regra                    = regra.cd_regra
     AND (   (pnTpAtend = 'H' AND rela.tp_atend_homecare = 'S')
          OR (pnTpAtend = 'E' AND rela.tp_atend_externo = 'S')
          OR (pnTpAtend = 'U' AND rela.tp_atend_urgeme = 'S')
          OR (pnTpAtend = 'A' AND rela.tp_atend_ambulatorial = 'S')
          OR (pnTpAtend = 'I' AND rela.tp_atend_internacao = 'S')
         )
     AND dt_vigencia IN ( SELECT MAX (vpr.dt_vigencia)
                            FROM dbamv.val_pro_relacionado vpr
                           WHERE vpr.dt_vigencia <=     pnData
                             AND vpr.cd_regra = rela.cd_regra
                             AND vpr.cd_pro_fat_pai = rela.cd_pro_fat_pai
                             AND vpr.cd_pro_fat = rela.cd_pro_fat);
  -- cursro necessário para buscar os dados do convenio e plano do atendimento
  cursor cDadosConta is
     select r.cd_convenio, r.cd_con_pla, a.tp_atendimento
       from dbamv.reg_fat r,
            dbamv.atendime a,
            dbamv.itreg_fat_espelho i
      where r.cd_reg_fat     = pCD_CONTA
        and i.cd_lancamento  = pCD_LANCAMENTO
        and i.cd_reg_fat     = r.cd_reg_fat
        and r.cd_atendimento = r.cd_atendimento
      union
     select it.cd_convenio, it.cd_con_pla, a.tp_atendimento
       from dbamv.itreg_amb_espelho it,
            dbamv.atendime a
      where it.cd_reg_amb    = pCD_CONTA
        and it.cd_lancamento = pCD_LANCAMENTO
        and it.cd_atendimento = a.cd_atendimento;
/* pda 432166 fim */
/* pda 432166 - Thiago Miranda de oliveira - Criando cursor para pegar o motivo de descaracterização do pacote quando for por diaria*/
  cursor cDescaractPacote is
    select cd_motivo_descaract_pacote
      from dbamv.motivo_descaract_pacote
     where tp_motivo_descaract_pacote = 'E';
/* pda 432166 fim */
vExisteExcecao    varchar2(1);
nParametroOut     number;
nVlrProced        number;
nValorTotal       number;
nQtChProced       number;
cMsgErro          varchar2(4000);
nExisteGrupo      number;
nQtContratada     number;
nQtFaturada       number;
/*pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - Criando variavel para receber retorno do cursor*/
vDiaria           varchar2(1):= null;
vDiariaGabarito   varchar2(1):= null;
/* pda 432166 fim*/
/* pda 432166 - Thiago Miranda de oliveira - criando parametrosm para receber o retorno dos cursores*/
vProfatGabarito   dbamv.protocolo_pacote.cd_pro_fat%type:=null;
vTpFator          dbamv.protocolo_pacote_similar.tp_fator_conversao%type:=null;
vQtFator          dbamv.protocolo_pacote_similar.qt_fator_conversao%type:=null;
nQtlancamento     number:=null;
nQtlancExecedeu   number:=null;
/* pda 432166 fim */
/* pda 432166 - Thiago Miranda de oliveira - 18/05/2011 - criando parametro para receber o retorno do cursor*/
vTpDispersao      dbamv.protocolo_pacote.tp_dispercao%type:=null;
vDtLancamento     dbamv.itreg_fat_espelho.dt_lancamento%type:=null;
vPlano            dbamv.con_pla.cd_con_pla%type:=null;
vConvenio         dbamv.convenio.cd_convenio%type:=null;
vTpAtendimento    dbamv.atendime.tp_atendimento%type:=null;
vRelacionado      varchar2(1):=null;
/* pda 432166 fim */
/* pda 334e00 - Thiago Miranda de oliveira - adicionando variavel para poder carregar o retorno do cursor*/
vMotivo          number:=null;
/* pda 432166 fim */
nCdprotocolo number:=null;
BEGIN
if pTP_CHECAGEM in ('G','E') then
   vExisteExcecao := 'N';
   OPEN cExisteExcecao;
   FETCH cExisteExcecao INTO vExisteExcecao;
   CLOSE cExisteExcecao;
   IF Nvl(vExisteExcecao,'N') = 'S' then
      RETURN(false);
   END IF;
end if;
if pTP_CHECAGEM in ('G','T') then
   nExisteGrupo := 0;
   OPEN cExisteTetoCount;
   FETCH cExisteTetoCount INTO nExisteGrupo;
   CLOSE cExisteTetoCount;
   IF Nvl(nExisteGrupo,0) > 0 then
      nValorTotal := 0;
      nQtChProced := 0;
      if pCD_LANCAMENTO is null then
       nVlrProced := dbamv.Val_Proc_FFCV(  pCD_PRO_FAT,
                                           pDT_LANCAMENTO,
                                           pHR_LANCAMENTO,
                                           pCD_CONVENIO,
                                           pCD_CON_PLA,
                                           pTP_ATENDIMENTO,
                                           pCD_TIP_ACOM,
                                           Null,
                                           Null,
                                           cMsgErro,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           nQtChProced,
                                           nParametroOut,
                                           nParametroOut,
                                           nParametroOut,
                                           Null,
                                           1,
                                           nValorTotal,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           null,
                                           false,
										   null,
										   null,
										   null,
                                           null
                                           ) ;
      end if;
      vExisteExcecao := 'N';
      OPEN cExisteTeto(nValorTotal,nQtChProced);
      FETCH cExisteTeto INTO vExisteExcecao;
      CLOSE cExisteTeto;
      IF Nvl(vExisteExcecao,'N') = 'S' then
         RETURN(false);
      END IF;
   END IF;
end if;
if pTP_CHECAGEM in ('G','P') then
   nExisteGrupo := 0;
   vExisteExcecao := 'N';
   OPEN cExisteGrupoCount;
   FETCH cExisteGrupoCount INTO nExisteGrupo;
   CLOSE cExisteGrupoCount;
   OPEN cExisteGrupoProt;
   FETCH cExisteGrupoProt INTO vExisteExcecao;
   CLOSE cExisteGrupoProt;
   IF Nvl(nExisteGrupo,0) > 0 and Nvl(vExisteExcecao,'N') = 'S' then
      -- PDA 328156 - Incio - Raphanelli de Barros
      -- Cursor para pegar o procedimento da conta
      /*pda 432166 - Thiago Miranda de oliveira - adicionando variavel de lancamento para pegar o retorno do cursor*/
      open cVerProfat;
      fetch cVerProfat into vProfat, vDtLancamento;
      close cVerProfat;
      /*pda 432166 - Thiago Miranda de oliveira - 18/05/2011 - caso a variável vProfat seja nula é pelo fato do procedimento ainda não estar na conta,
                    com isso é para ser utilizado o parametro do procedimento de entrada da função*/
      /*pda 432166 - Thiago Miranda de oliveira - caso o cursor acima não traga resultados, pegar o valro da data atual*/
      if vProfat is null then
        vProfat       := pCD_PRO_FAT;
        vDtLancamento := sysdate;
      end if;
      /*fim 432166 fim */
      -- PDA 328156 - Incluido o parmetro vProfat .
      /* pda 432166 - Thiago Miranda de oliveira - adicionando a variavel vProfatGabarito para receber o procedimento do pacote*/
      /* pda 432166 - Thiago Miranda de oliveira - adicionando a variavel vTpDispersao para receber o procedimento do pacote*/
      OPEN cProtocoloCount(vProfat);
      FETCH cProtocoloCount INTO nQtContratada, vProfatGabarito, vTpDispersao, nCdprotocolo;
      CLOSE cProtocoloCount;
      -- PDA 328156 - Incluido o parmetro vProfat .
      OPEN cFaturadoCount(vProfat, nCdprotocolo);
      FETCH cFaturadoCount INTO nQtFaturada;
      CLOSE cFaturadoCount;
      -- PDA 328156 - Fim
      /* pda 432166 - Thiago Miranda de oliveira - 18/05/2011 - Alterando toda esta logica de retonro da função, quando existe protocolo de pacote,
                      com esta implementação podera ser retornado a quantidade que execedeu o pacote, segue abaixo a nova lógica que icou no lugar desta comentada
                      if nvl(nQtContratada,0) < nvl(nQtFaturada,0) + nvl(pQT_LANCAMENTO,0) then
                        RETURN(false);
                      end if;*/
      -- caso a quantidade de procedimentos que pertencem ao pacote seja maior ou igual ao do protocolo, o novo item não vai estar dentro do pacote
      if nvl(nQtFaturada,0) >= nvl(nQtContratada,0) then
        /* pda 432166 - Thiago Miranda de Oliveira - 18/05/2011 - quando for um lancamento automatico, provavelmente feito pela diaria_automatica,
                        quando ainda não tem o cd_lancamento, vai ser verificado se é um procedimento de diaria e se a rotina de diaria de gabarito esta habilitada
                        caso esteja e o limite de diarias do pacote tenha ultrapassado, deve ser chamado a rotina de remover o pacote da conta.*/
        if pCD_LANCAMENTO is null then
          --
          vDiariaGabarito := null;
          --
          open cPacote;
          fetch cPacote into vDiariaGabarito;
          close cPacote;
          --
          if vDiariaGabarito = 'S' then
            --
            vDiaria := null;
            --
            open cProFatDiaria(vProfat);
            fetch cProFatDiaria into vDiaria;
            close cProFatDiaria;
            --
            if vDiaria is not null then
              for cp in cContaPacote(pCD_PACOTE, pCD_CONTA) loop
                dbamv.pkg_ffcv_it_conta.prc_remove_pacote (cp.cd_conta_pacote);
                /* pda 432166 - Thiago Miranda de oliveira - Colocando a abertura do cursor de descaracterização logo abaico da rotina que remove o pacote para que possa
                       ser gravado no log o motivo que o fez. O mesmo so devera ser chamado se o motivo estiver configurado na tabela de descaracterização do pacote*/
                if vMotivo is null then
                  open cDescaractPacote;
                  fetch cDescaractPacote into vMotivo;
                  close cDescaractPacote;
                end if;
                --
                if vMotivo is not null then
                  dbamv.pkg_ffcv_it_conta.PRC_GRAVA_LOG_REMOVE_PACOTE (pCD_ATENDIMENTO,
                                                                       pCD_CONTA,
                                                                       null,
                                                                       vMotivo);
                end if;
                /* pda 432166 fim */
              end loop;
            end if;
          end if;
        end if;
        /*pda 432166 fim*/
        /* pda 432166 - Thiago Miranda de oliveira - 18/05/2011 - Com relação a este parametro de dispersão pode ser utilizado 3 parametros:
                      - DP(Dentro do pacote) - o procedimento mesmo com a quantidade maior que a do gabarito, ficara dentro do pacote
                      - CP(Conta Particular) - a quantidade do gabarito chegou no limite, com isso o procedimento que sera lançado na conta, ou enta na conta
                        tera que ser colocado na conta particular do paciente.
                      - CE(consumo Extra - Default) - o procedimento ficara dentro da ocnta, sendo que fora do pacote, caso o gabarito tenha chegado no seu limite*/
        if nvl(vTpDispersao, 'CE') = 'DP' then
          RETURN(true);
        elsif nvl(vTpDispersao, 'CE') = 'CP' then
          /* pda 432166 - Thiago Miranda de Oliveira - pegando informações para carregar o cursor dos procedimentos relacionados*/
          open cDadosConta;
          fetch cDadosConta into vConvenio, vPlano,vTpAtendimento;
          close cDadosConta;
          -- verificar se o procedimento possui procedimentos relacionados, em caso positivo, não podera ser colocado em uma ocnta de particular
          open c_relacionados(vProfat, vConvenio, vPlano, vDtLancamento,vTpAtendimento);
          fetch c_relacionados into vRelacionado;
          close c_relacionados;
          -- caso tenha algum procedimetno relacionado, o parametro não sera passado para a rotina fazer o tratamento
          if vRelacionado is null then
            pConta_part := 'Pacote - '||pCD_CONTA_PACOTE;
            --
            if pCD_LANCAMENTO is not null then
              dbamv.pkg_ffcv_it_conta.PRC_DESVINCULA_PROCEDIMENTO(pCD_CONTA
                                                               ,pCD_LANCAMENTO
                                                               ,nQtlancExecedeu
                                                               ,pConta_part
                                                               ,vDtLancamento
                                                               );
              delete from dbamv.itreg_fat_espelho
               where cd_reg_fat    = pCD_CONTA
                 and cd_lancamento = pCD_LANCAMENTO;
               --
              delete from dbamv.itreg_amb_espelho
               where cd_reg_amb    = pCD_CONTA
                 and cd_lancamento = pCD_LANCAMENTO;
            end if;
          end if;
          --
          RETURN(false);
        else
          RETURN(false);
        end if;
        /* pda 432166 fim */
      else
        /* pda 432166 - Thiago Miranda de oliveira - fazendo validação caso o procedimento não seja o principal,
                        pegando o tipo de fator para colocar a quantidade no mesmo nível do procedimento do gabarito*/
        if nvl(vProfatGabarito, vProfat) <> vProfat then
          --
          open cDadosSimilar(vProfat);
          fetch cDadosSimilar into vTpFator, vQtFator;
          close cDadosSimilar;
          --
          if nvl(vTpFator, 'X') = 'D' then
            nQtlancamento := pQT_LANCAMENTO / vQtFator;
          elsif nvl(vTpFator, 'X') = 'M' then
            nQtlancamento := pQT_LANCAMENTO * vQtFator;
          end if;
        else
          nQtlancamento :=  pQT_LANCAMENTO;
        end if;
        --
        /* pda 432166 - Thiago Miranda de oliveira - em seguida alterar todos o pQT_LANCAMENTO pela nova variável
                        que recebe a quantidade ja modificada de acorodo com o fator do procedimento*/
       /* pda 432166 fim */
        -- caso a quantidade de do protocolo seja maior que a soma do que ja tem na conta, com a quantidade do procedimento que esta sendo incluso, não é necessário
        -- quebrar este novo procedimento em 2
        if (nvl(nQtContratada,0)) > (nvl(nQtFaturada,0) + nvl(nQtlancamento,0)) then
          RETURN(true);
        -- caso a quantidade de do protocolo seja menor que a soma do que ja tem na conta, com a quantidade do procedimento que esta sendo incluso, é necessário
        -- quebrar este novo procedimento em 2, com isso caso este novo procedimento ja esteja na conta, o função ira inserir um ovo procedimento utilizando esta função abaico,
        -- para colocar o que ficou de fora do pacote. Caso o procedimento ainda não esteja na conta, esta inserção sera feita logo depois que o procedimento for inseriro por
        -- alguma função e lançamento do ffcv.
        ELsif nvl(nQtContratada,0) < nvl(nQtFaturada,0) + nvl(nQtlancamento,0) then
          --
          /* pda 432166 - Thiago Miranda de oliveira - 18/05/2011 - Com relação a este parametro de dispersão pode ser utilizado 3 parametros:
                      - DP(Dentro do pacote) - o procedimento mesmo com a quantidade maior que a do gabarito, ficara dentro do pacote
                      - CP(Conta Particular) - a quantidade do gabarito chegou no limite, com isso o procedimento que sera lançado na conta, ou enta na conta
                        tera que ser colocado na conta particular do paciente.
                      - CE(consumo Extra - Default) - o procedimento ficara dentro da ocnta, sendo que fora do pacote, caso o gabarito tenha chegado no seu limite*/
          if nvl(vTpDispersao, 'CE') = 'DP' then
            RETURN(true);
          elsif nvl(vTpDispersao, 'CE') = 'CP' then
            /* pda 432166 - Thiago Miranda de Oliveira - pegando informações para carregar o cursor dos procedimentos relacionados*/
            open cDadosConta;
            fetch cDadosConta into vConvenio, vPlano,vTpAtendimento;
            close cDadosConta;
            -- verificar se o procedimento possui procedimentos relacionados, em caso positivo, não podera ser colocado em uma ocnta de particular
            open c_relacionados(vProfat, vConvenio, vPlano, vDtLancamento,vTpAtendimento);
            fetch c_relacionados into vRelacionado;
            close c_relacionados;
            -- caso tenha algum procedimetno relacionado, o parametro não sera passado para a rotina fazer o tratamento
            if vRelacionado is null then
              pConta_part := 'Pacote - '||pCD_CONTA_PACOTE;
            end if;
            --
          end if;
          /* pda 432166 fim */
          pQT_EXCEDEU:= (nvl(nQtFaturada,0) + nvl(nQtlancamento,0)) - nvl(nQtContratada,0);
          --
          if pCD_LANCAMENTO is not null then
            /* pda 432166 - Thiago Miranda de oliveira - caso seja um procedimento similar o memso deve retornar ao mesmo fator da origem do item
                            com isso deve ser invertido o fator antes aplicado, este camop nQtlancExecedeu vai ser utilizado para não alterar o
                            valor da variavel pQT_EXCEDEU, que sera utilizada mais abaixo*/
            if nvl(vTpFator, 'X') = 'D' then
                nQtlancExecedeu := pQT_EXCEDEU * vQtFator;
            elsif nvl(vTpFator, 'X') = 'M' then
                nQtlancExecedeu := pQT_EXCEDEU / vQtFator;
            else
              nQtlancExecedeu :=  pQT_EXCEDEU;
            end if;
            /* pda 432166 fim*/
            dbamv.pkg_ffcv_it_conta.PRC_DESVINCULA_PROCEDIMENTO(pCD_CONTA
                                                               ,pCD_LANCAMENTO
                                                               ,nQtlancExecedeu
                                                               /* pda 432166 - Thiago Miranda de oliveira - passar este parametro para a função fazer o tratamento de conta particular*/
                                                               ,pConta_part
                                                               ,vDtLancamento
                                                               /*pda 432166 fim */);
            /* pda 432166 - Thiago Miranda de oliveira - zerar a variavel pois ja foi incluindo a parte particular, caos a mesma tenha sido preenchida*/
            pConta_part:= null;
            /* pda 432166 fim */
          end if;
          -- por fim sera retornado a quantidade correta, dos itens que irão pertencer ao pacote
          pQT_EXCEDEU:= nvl(nQtlancamento,0) - pQT_EXCEDEU;
           /* pda 432166 - Thiago Miranda de oliveira - caso seja um procedimento similar o memso deve retornar ao mesmo fator da origem do item
                            com isso deve ser invertido o fator antes aplicado*/
          if nvl(vTpFator, 'X') = 'D' then
            pQT_EXCEDEU := pQT_EXCEDEU * vQtFator;
          elsif nvl(vTpFator, 'X') = 'M' then
            pQT_EXCEDEU := pQT_EXCEDEU / vQtFator;
          else
            pQT_EXCEDEU :=  pQT_EXCEDEU;
          end if;
          /* pda 432166 fim */
        END IF;
      end if;
      /* pda 432166*/
   END IF;
end if;
RETURN(true);
END;
FUNCTION FNC_APLICA_PERCENTUAL_PACOTE    (pCD_CONTA         in number
                                         ,pCD_LANCAMENTO    in number
                                         ,pTP_ATENDIMENTO   in varchar2
                                         ,pVL_VALOR         in number) return number is
Cursor c_Atendime is
select cd_atendimento
 from dbamv.itreg_amb_espelho
where cd_lancamento = pCD_LANCAMENTO
  and cd_reg_amb = pCD_CONTA
  and pTP_ATENDIMENTO IN ('A','E','U')
UNION
select reg_fat.cd_atendimento
  from dbamv.itreg_fat_espelho,
       dbamv.reg_fat
 where itreg_fat_espelho.cd_lancamento = pCD_LANCAMENTO
   and itreg_fat_espelho.cd_reg_fat = pCD_CONTA
   and itreg_fat_espelho.cd_reg_fat = reg_fat.cd_reg_fat
   and pTP_ATENDIMENTO = 'I';
Cursor c_RN (nCdAtend in number) is
select recem_nascido.cd_atendimento
from dbamv.admissao_co,
     dbamv.recem_nascido
where recem_nascido.cd_tip_morte_rn is null
  and admissao_co.cd_admissao_co = recem_nascido.cd_admissao_co
  and admissao_co.cd_atendimento = nCdAtend;
Cursor c_UTI (nCdAtend in number, nCdConta in number) is
  select sum(X)
    from (select count(itreg_fat_espelho.cd_pro_fat) X
        	  from dbamv.reg_fat,
        		     dbamv.itreg_fat_espelho,
        				 dbamv.pro_fat
           where reg_fat.cd_reg_fat = itreg_fat_espelho.cd_reg_fat
        	   and reg_fat.cd_atendimento = nCdAtend
        		 and reg_fat.cd_reg_fat = nCdConta
        		 and pro_fat.cd_pro_fat = itreg_fat_espelho.cd_pro_fat
        		 and pro_fat.tp_serv_hospitalar = 'DU'
        		 and pro_fat.sn_diaria_uti_rn = 'S'
         union all
          select count(itreg_amb_espelho.cd_pro_fat) X
        	  from dbamv.itreg_amb_espelho,
        		     dbamv.pro_fat
        	 where itreg_amb_espelho.cd_atendimento = nCdAtend
        	   and itreg_amb_espelho.cd_reg_amb = nCdConta
        	   and pro_fat.cd_pro_fat = itreg_amb_espelho.cd_pro_fat
        		 and pro_fat.tp_serv_hospitalar = 'DU'
        		 and pro_fat.sn_diaria_uti_rn = 'S');
  cursor cQtContaFilho (nCdAtendimento in number) is
	  select count(cd_reg_fat)
		  from dbamv.reg_fat
		 where cd_atendimento = nCdAtendimento
		   and sn_fechada = 'N';
-- PDA 204717 (Fim)
vRn                          c_RN%rowtype;
ncd_pacote                   number;
ncd_atendimento              number;
nParametroOut                number;
cParametroOut                varchar2(4000);
nVL_PERC_DESC_RN_UTI         number;
nVL_PERC_ACRES_GEMELARES     number;
nVlValor                     number;
nVlValorBase                 number;
cComparacao                  varchar2(1) := 'N';
cUTI                         varchar2(1) := 'N';
nCountUTI                    number := 0;
nQtContaFilho                number := 0;
nAuxCdAtendimento            number;
BEGIN
open c_Atendime;
fetch c_Atendime into ncd_atendimento;
close c_Atendime;
nVlValor := pVL_VALOR;
nVlValorBase := pVL_VALOR;
ncd_pacote := dbamv.pack_ffcv_espelho.FNC_RETORNA_PACOTE(ncd_atendimento
                                                        ,pCD_CONTA
                                                        ,pCD_LANCAMENTO
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,nParametroOut
                                                        ,nParametroOut
                                                        ,cParametroOut
                                                        ,nParametroOut
                                                        ,nParametroOut
                                                        ,nParametroOut
                                                        ,'N'
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,cParametroOut
                                                        ,nVL_PERC_ACRES_GEMELARES
                                                        ,nVL_PERC_DESC_RN_UTI);
for vRN in c_RN(ncd_atendimento) loop
	  nAuxCdAtendimento := ncd_atendimento;
  if NVL(nVL_PERC_ACRES_GEMELARES,0) > 0 and cComparacao = 'S' then
     nVlValor := nVlValor + (nVlValorBase * nVL_PERC_ACRES_GEMELARES / 100);
  end if;
  if NVL(nVL_PERC_DESC_RN_UTI,0) > 0 then
     -- PDA 204717 (Início) - 29/10/2007 - Diego Costa
		 -- Alteração de chamada do cursor c_UTI
     open c_UTI(nAuxCdAtendimento, pCD_CONTA);
		 -- PDA 204717 (Fim)
     fetch c_UTI into nCountUTI;
     close c_UTI;
     if nvl(nCountUTI,0) > 0 then
        cUTI := 'S';
     end if;
  end if;
  cComparacao := 'S';
end loop;
if cUTI = 'S' then
   nVlValor := nVlValor - (nVlValorBase * nVL_PERC_DESC_RN_UTI / 100);
end if;
RETURN(nVlValor);
END;
function FNC_VERIFICA_GUIA_OBRIGATORIA( pnAtend    number,
                                        pnConta    number,
                                        pvProFat   varchar,
                                        pnConvenio number default null,
                                        pnPlano    number default null,
                                        pvTpAtend  varchar default null,
                                        pdDtLanc   date,
                                        pnSetor    number default null ) return boolean is
  Pragma AUTONOMOUS_TRANSACTION;
  --
  cursor cConta is
    select reg_fat.cd_convenio,
           reg_fat.cd_con_pla,
           reg_fat.cd_tip_acom,
           atendime.tp_atendimento,
           atendime.cd_tipo_internacao
      from dbamv.reg_fat,
           dbamv.atendime
     where reg_fat.cd_atendimento = atendime.cd_atendimento
       and reg_fat.cd_reg_fat     = pnConta
       and reg_fat.cd_atendimento = pnAtend
       and atendime.cd_multi_empresa  = dbamv.pkg_mv2000.le_empresa
    union all
    select distinct reg_amb.cd_convenio,
           atendime.cd_con_pla,
           atendime.cd_tip_acom,
           atendime.tp_atendimento,
           atendime.cd_tipo_internacao
      from dbamv.reg_amb,
           dbamv.itreg_amb_espelho,
           dbamv.atendime
     where reg_amb.cd_reg_amb       = itreg_amb_espelho.cd_reg_amb
       and itreg_amb_espelho.cd_atendimento = atendime.cd_atendimento
       and itreg_amb_espelho.cd_reg_amb     = pnConta
       and itreg_amb_espelho.cd_atendimento = pnAtend
       and atendime.cd_multi_empresa  = dbamv.pkg_mv2000.le_empresa;
  --
  cursor cAcomod( pnConv in number, pnPlano in number, pnAcom in number, pnInt in number ) is
    select ac.sn_gera_guia_diaria
      from dbamv.acomod_pro_fat ac
     where ac.cd_convenio = pnConv
       and ac.cd_con_pla  = pnPlano
       and ( ac.cd_tip_acom = pnAcom
          or ac.cd_tip_acom = ( select mov_int.cd_tip_acom
                                 from ( select max(mov.cd_mov_int) cd_mov_int
                                          from dbamv.mov_int mov
                                         where mov.cd_atendimento = pnAtend ) m,
                                       dbamv.mov_int
                                 where m.cd_mov_int = mov_int.cd_mov_int ) )
       and ac.cd_pro_fat  = pvProFat
       and (ac.cd_tipo_internacao = pnInt or ac.cd_tipo_internacao is null )
       and ac.cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
  --
  vcConta               cConta%rowtype;
  vTpProibicao          varchar2(02);
  nConvenio             dbamv.convenio.cd_convenio%type;
  nPlano                dbamv.con_pla.cd_con_pla%type;
  vTpAtend              dbamv.atendime.tp_atendimento%type;
  nAcomod               dbamv.tip_acom.cd_tip_acom%type;
  nTpInter              dbamv.atendime.cd_tipo_internacao%type;
  vSnGeraGuia           varchar2(01);
  --
begin
  --
  open cConta;
  fetch cConta into vcConta;
  close cConta;
  nConvenio := nvl( pnConvenio, vcConta.cd_convenio    );
  nPlano    := nvl( pnPlano   , vcConta.cd_con_pla     );
  vTpAtend  := nvl( pvTpAtend , vcConta.tp_atendimento );
  nAcomod   := vcConta.cd_tip_acom;
  nTpInter  := vcConta.cd_tipo_internacao;
  --
  begin
    open dbamv.pack_lanca_ffcv.c_proibicao( pvProFat||' '||dbamv.pkg_mv2000.le_empresa
                                           ,nConvenio
                                           ,nPlano
                                           ,vTpAtend
                                           ,pdDtLanc
                                           ,pnSetor  );
    fetch dbamv.pack_lanca_ffcv.c_proibicao into vTpProibicao;
    close dbamv.pack_lanca_ffcv.c_proibicao;
  exception
    when others then
      return false;
  end;
  --
  if vTpProibicao = 'AG' then
    return true;
  end if;
  --
  open cAcomod( nConvenio, nPlano, nAcomod, nTpInter );
  fetch cAcomod into vSnGeraGuia;
  close cAcomod;
  if nvl( vSnGeraGuia, 'N' ) = 'S' then
    return true;
  end if;
  --
  return false;
  --
end;
function FNC_RETORNA_GUIA_DISPONIVEL( pnAtend        in number,
                                      pnConta        in number,
                                      pnConvenio     in number  default null,
                                      pvProFat       in varchar,
                                      pnQuantLancada in number,
                                      pnTipAcom      in number  default null,
                                      pvTpGuia       in varchar default null,
                                      pnGuiaPendente out number ) return number is
  cursor cGuias( pnConv in number, pnAcom in number, pnAviso in number ) is
  -- PDA 162402 (Fim)
    -- pda 166385 - 16/10/2006 - Amalia Araújo - incluindo a guia Negada neste select.
    select decode( guia.tp_situacao, 'A', 5, 'S', 6, 'P', 7, 8 ) ordem,
           guia.cd_guia,
           guia.tp_guia,
           guia.tp_situacao,
           sum( nvl(it_guia.qt_autorizada_convenio, it_guia.qt_autorizado )) qt_autorizado,
           dbamv.pack_ffcv_espelho.fnc_retorna_saldo_guia( guia.cd_atendimento,
                                                       guia.cd_guia,
                                                       it_guia.cd_pro_fat  ) qt_saldo
      from dbamv.guia,
           dbamv.it_guia
     where it_guia.cd_guia     = guia.cd_guia
       and (guia.cd_atendimento = pnAtend or (pnAtend is null and pnAviso is not null ) )
       -- PDA 162402 (Inicio) - Henrique Antunes - 04/05/2007
       and ( guia.cd_aviso_cirurgia = pnAviso or guia.cd_aviso_cirurgia is null or pnAviso is null)
       -- PDA 162402 (Fim)
       and ( guia.cd_convenio    = pnConv or guia.cd_convenio is null )   -- pda 160995
       and it_guia.cd_pro_fat  = nvl( pvProFat, it_guia.cd_pro_fat )
       -- PDA 267286 - adcionando guia  em negociação na consulta
  	   and guia.tp_situacao   in ( 'A', 'S', 'P', 'N', 'G' )
       and guia.tp_guia <> 'O'
     group by decode( guia.tp_situacao, 'A', 5, 'S', 6, 'P', 7, 8 ),
              guia.cd_guia,
              guia.tp_guia,
              guia.tp_situacao,
              dbamv.pack_ffcv_espelho.fnc_retorna_saldo_guia( guia.cd_atendimento,
                                                          guia.cd_guia,
                                                          it_guia.cd_pro_fat )
    -- pda 166385 - fim
    UNION ALL
    select decode( guia.tp_situacao, 'A', 5, 'S', 6, 'P', 7, 8 ) ordem,
           guia.cd_guia,
           guia.tp_guia,
           guia.tp_situacao,
           sum( nvl(it_guia.qt_autorizada_convenio, it_guia.qt_autorizado )) qt_autorizado,
           dbamv.pack_ffcv_espelho.fnc_retorna_saldo_guia( guia.cd_atendimento,
                                                       guia.cd_guia,
                                                       it_guia.cd_pro_fat  ) qt_saldo
      from dbamv.guia,
           dbamv.it_guia
     where it_guia.cd_guia     = guia.cd_guia
       and (guia.cd_atendimento = pnAtend or (pnAtend is null and pnAviso is not null ) )
       -- PDA 162402 (Inicio) - Henrique Antunes - 04/05/2007
       and ( guia.cd_aviso_cirurgia = pnAviso or guia.cd_aviso_cirurgia is null or pnAviso is null)
       -- PDA 162402 (Fim)
       and ( guia.cd_convenio    = pnConv or guia.cd_convenio is null )   -- pda 160995
       and guia.tp_guia = 'O'
       and it_guia.cd_pro_fat  = nvl( pvProFat, it_guia.cd_pro_fat )
       -- PDA 267286 - adcionando guia  em negociação na consulta
	   and guia.tp_situacao   in ( 'A', 'S', 'P', 'N', 'G' )
     group by decode( guia.tp_situacao, 'A', 5, 'S', 6, 'P', 7, 8 ),
              guia.cd_guia,
              guia.tp_guia,
              guia.tp_situacao,
              dbamv.pack_ffcv_espelho.fnc_retorna_saldo_guia( guia.cd_atendimento,
                                                          guia.cd_guia,
                                                          it_guia.cd_pro_fat )
    union all
    select 2 ordem,
           guia.cd_guia,
           guia.tp_guia,
           guia.tp_situacao,
           nvl( guia.nr_dias_autorizados, guia.nr_dias_solicitados ) qt_autorizado,
           dbamv.pack_ffcv_espelho.fnc_retorna_saldo_guia( guia.cd_atendimento,
                                                       guia.cd_guia,
                                                       pvProFat  ) qt_saldo
      from dbamv.guia,
           dbamv.it_guia,
           dbamv.pro_fat
     where guia.cd_atendimento = pnAtend
	   and guia.tp_guia <> 'R'
       -- PDA 162402 (Inicio) - Henrique Antunes - 04/05/2007
       and ( guia.cd_aviso_cirurgia = pnAviso or guia.cd_aviso_cirurgia is null or pnAviso is null)
       -- PDA 162402 (Fim)
       and it_guia.cd_guia(+)  = guia.cd_guia
       and ( guia.cd_convenio  = pnConv or guia.cd_convenio is null )
       and ( nvl(guia.cd_tip_acom,'0') = nvl( pnAcom, nvl(guia.cd_tip_acom,'0') ) or guia.cd_tip_acom is null )
       and guia.tp_situacao   in ( 'A', 'S' )
       and pro_fat.cd_pro_fat = pvProFat
       and pro_fat.tp_serv_hospitalar in ( 'DA', 'DI', 'DU' )
     group by guia.cd_guia,
              guia.tp_guia,
              guia.tp_situacao,
              nvl( guia.nr_dias_autorizados, guia.nr_dias_solicitados ),
              dbamv.pack_ffcv_espelho.fnc_retorna_saldo_guia( guia.cd_atendimento,
                                                          guia.cd_guia,
                                                          pvProFat )
    union all
    select 1 ordem,
           guia.cd_guia,
           guia.tp_guia,
           guia.tp_situacao,
           500 qt_autorizado,
           500 qt_saldo
      from dbamv.guia,
           dbamv.it_guia,
           dbamv.pro_fat
     where guia.cd_atendimento = pnAtend
	   and guia.tp_guia = 'R'
       and it_guia.cd_guia(+)  = guia.cd_guia
       -- PDA 162402 (Inicio) - Henrique Antunes - 04/05/2007
       and ( guia.cd_aviso_cirurgia = pnAviso or guia.cd_aviso_cirurgia is null or pnAviso is null)
       -- PDA 162402 (Fim)
       and ( guia.cd_convenio  = pnConv or guia.cd_convenio is null )
       and ( nvl(guia.cd_tip_acom,'0') = nvl( pnAcom, nvl(guia.cd_tip_acom,'0') ) or guia.cd_tip_acom is null )
       and guia.tp_situacao = 'P'
       and pro_fat.cd_pro_fat = pvProFat
       and pro_fat.tp_serv_hospitalar in ( 'DA', 'DI', 'DU' )
     group by guia.cd_guia,
              guia.tp_guia,
              guia.tp_situacao
    union all
    select 4 ordem,
           guia.cd_guia,
           guia.tp_guia,
           guia.tp_situacao,
           sum( nvl(it_guia.qt_autorizada_convenio, it_guia.qt_autorizado )) qt_autorizado,
           sum( nvl(it_guia.qt_autorizada_convenio, it_guia.qt_autorizado )) qt_saldo
      from dbamv.guia,
           dbamv.it_guia
     where it_guia.cd_guia     = guia.cd_guia
       and guia.cd_atendimento = pnAtend
       -- PDA 162402 (Inicio) - Henrique Antunes - 04/05/2007
       and ( guia.cd_aviso_cirurgia = pnAviso or guia.cd_aviso_cirurgia is null or pnAviso is null)
       -- PDA 162402 (Fim)
       and ( guia.cd_convenio    = pnConv or guia.cd_convenio is null )   -- pda 160995
       and ( nvl(guia.cd_tip_acom,'0') = nvl( pnAcom, nvl(guia.cd_tip_acom,'0') ) or guia.cd_tip_acom is null ) -- pda 160995
       and it_guia.cd_pro_fat  = nvl( pvProFat, it_guia.cd_pro_fat )
       and guia.tp_situacao   in ( 'S', 'P' )
       and dbamv.pkg_mv2000.le_formulario = 'M_PED_RX'
     group by guia.cd_guia,
              guia.tp_guia,
              guia.tp_situacao
    union all
    select 3 ordem,
           guia.cd_guia,
           guia.tp_guia,
           guia.tp_situacao,
           500 qt_autorizado,
           500 qt_saldo
      from dbamv.guia
     where guia.cd_atendimento = pnAtend
       and ( guia.cd_convenio    = pnConv or guia.cd_convenio is null )   -- pda 160995
       and ( guia.cd_aviso_cirurgia = pnAviso or guia.cd_aviso_cirurgia is null or pnAviso is null)
       and ( nvl(guia.cd_tip_acom,'0') = nvl( pnAcom, nvl(guia.cd_tip_acom,'0') ) or guia.cd_tip_acom is null ) -- pda 160995
	   and guia.tp_situacao = 'P'
       and guia.tp_guia   not in ( 'C', 'I' )
       and not exists( select it_guia.cd_guia from dbamv.it_guia
                        where it_guia.cd_guia = guia.cd_guia
                          and it_guia.cd_pro_fat = pvProFat )
     group by guia.cd_guia,
              guia.tp_guia,
              guia.tp_situacao
     order by ordem, qt_saldo desc;
  -- pda 160995 - fim
  -- pda 162949 - fim
  --
  -- pda 160995 - 15/08/2006 - Amalia Araújo
  -- Novo cursor para identificar uma guia qualquer Pendente para incluir o lançamento nela.
  cursor cGuiasPendentes( pnConv in number, pnAcom in number ) is
    select guia.cd_guia,
           guia.tp_guia
      from dbamv.guia
     where guia.cd_atendimento = pnAtend
       and ( guia.cd_convenio  = pnConv or guia.cd_convenio is null )
       and ( nvl(guia.cd_tip_acom,'0') = nvl( pnAcom, nvl(guia.cd_tip_acom,'0') )
          or guia.cd_tip_acom is null )
       and guia.tp_situacao    = 'P'
     order by cd_guia;
  -- pda 160995 - fim
  --
  cursor cDiaria is
    select pro_fat.tp_serv_hospitalar
      from dbamv.pro_fat
     where pro_fat.cd_pro_fat = pvProFat;
  --
  -- pda 162943 - 02/10/2006 - Amalia Araújo
  -- Incluindo select na tabela atendimento caso não haja ainda itens na conta.
  cursor cConta is
    select reg_fat.cd_convenio,
           reg_fat.cd_tip_acom,
           '2' ordem
      from dbamv.reg_fat
     where reg_fat.cd_reg_fat = pnConta
       and reg_fat.cd_atendimento = pnAtend
    union all
    select distinct reg_amb.cd_convenio,
           atendime.cd_tip_acom,
           '2' ordem
      from dbamv.reg_amb,
           dbamv.itreg_amb_espelho,
           dbamv.atendime
     where reg_amb.cd_reg_amb       = itreg_amb_espelho.cd_reg_amb
       and itreg_amb_espelho.cd_atendimento = pnAtend
       and itreg_amb_espelho.cd_reg_amb     = pnConta
       and atendime.cd_atendimento  = itreg_amb_espelho.cd_atendimento
       and atendime.cd_multi_empresa  = dbamv.pkg_mv2000.le_empresa
    union all
    select atendime.cd_convenio,
           atendime.cd_tip_acom,
           '3' ordem
      from dbamv.atendime
     where atendime.cd_atendimento = pnAtend
       and atendime.cd_multi_empresa  = dbamv.pkg_mv2000.le_empresa
    order by 3;
  cursor cTpGruPro is
	select Decode( dbamv.fnc_ffcv_sn_opme(pro_fat.cd_pro_fat),'S','OP',gru_pro.tp_gru_pro) tp_gru_pro
		from dbamv.pro_fat,
		     dbamv.gru_pro
	where pro_fat.cd_gru_pro = gru_pro.cd_gru_pro
	  and pro_fat.cd_pro_fat = pvProFat;
  vTipoProFat          dbamv.pro_fat.tp_serv_hospitalar%type;
  nConvenio            number;
  nAcomodacao          number;
  vcGuiasPendentes     cGuiasPendentes%rowtype;       -- pda 160995
  aTableItGuia         dbamv.pkt_it_guia.TypTabela;   -- pda 165163
  nCdItGuia            number := null;                -- pda 165163
  nOrdem               number;                        -- pda 162943
  -- PDA 162402 (Inicio) - Henrique Antunes - 04/05/2007
  nCdAviso             number := null;
  vTpGruPRo			   dbamv.gru_pro.tp_gru_pro%type;
  -- PDA 162402 (Fim)
  --
  nQtLancada           number := null;
  vTpGuia              VARCHAR2(100);
  --
begin
  --
  open cTpGruPro;
  fetch cTpGruPro into vTpGruPRo;
  close cTpGruPro;
  --
  -- PDA 162402 (Inicio) - Henrique Antunes - 04/05/2007
  if substr(pvTpGuia,1,1) = '@' then
     nCdAviso := to_number(substr(pvTpGuia,2,6));
  else
     nCdAviso := null;
  end if;
  vTpGuia := pvTpGuia;
  --
  if vTpGruPRo = 'OP' and pvTpGuia is null then
    vTpGuia := 'O';
  end if;
  --
  open cDiaria;
  fetch cDiaria into vTipoProFat;
  close cDiaria;
  --
  if pnTipAcom is null or pnConvenio is null then
    open cConta;
    fetch cConta into nConvenio, nAcomodacao, nOrdem;    -- pda 162943
    close cConta;
    nConvenio   := nvl( pnConvenio, nConvenio );
    nAcomodacao := nvl( pnTipAcom, nAcomodacao );
  else
    nConvenio   := pnConvenio;
    nAcomodacao := pnTipAcom;
  end if;
  --
  if vTpGuia is not null and substr(vTpGuia,1,1) <> '@' then
    for vcGuias in cGuias( nConvenio, nAcomodacao, nCdAviso ) loop
    -- PDA 162402 (Fim)
      --
      if vTpGruPRo = 'OP' then
        vTpGuia := 'O';
      end if;
      if vTpGuia = 'R' then
        if nvl(vcGuias.qt_saldo,0) >= nvl(pnQuantLancada,0) and vcGuias.tp_guia in ('R','I') then
          return vcGuias.cd_guia;
        end if;
      elsif vTpGuia = 'P' and vcGuias.tp_guia <> 'O' then
      -- PDA 162402 (Fim)
        --
        if vcGuias.ordem = 3 and nvl(pnQuantLancada,0) > 0 then
          --
          select dbamv.seq_it_guia.nextval
            into nCdItGuia
            from sys.dual;
          --
          aTableItGuia(1).cd_guia                 := vcGuias.cd_guia;
          aTableItGuia(1).cd_it_guia              := nCdItGuia;
          aTableItGuia(1).cd_pro_fat              := pvProFat;
          aTableItGuia(1).qt_autorizado           := nvl(pnQuantLancada,1);
          aTableItGuia(1).dt_geracao              := sysdate;
          aTableItGuia(1).cd_usu_geracao          := user;
          --
          begin
            dbamv.pkt_it_guia.insere( aTableItGuia );
          exception
            when others then
              null;
          end;
          --
        end if;
        if nvl(vcGuias.qt_saldo,0) >= nvl(pnQuantLancada,0) and vcGuias.tp_guia in ('P') then
          return vcGuias.cd_guia;
        end if;
        -- pda 166385 - fim
      else
        if nvl(vcGuias.qt_saldo,0) >= nvl(pnQuantLancada,0) and vcGuias.tp_guia = vTpGuia then
          return vcGuias.cd_guia;
        end if;
      end if;
      --
    end loop;
    --
  else
    pnGuiaPendente := null;
    for vcGuias in cGuias( nConvenio, nAcomodacao, nCdAviso ) loop
	 if nvl(vcGuias.qt_saldo,0) >= nvl(pnQuantLancada,0) and vcGuias.tp_guia = 'O' and nCdAviso is not null then
	    return vcGuias.cd_guia;
	 end if;
      if nvl( vTipoProFat, 'XX' ) in ( 'DI', 'DU', 'DA' ) then
        if nvl(vcGuias.qt_saldo,0) >= nvl(pnQuantLancada,0) and vcGuias.tp_guia in ( 'I', 'R' ) then
          return vcGuias.cd_guia;
        end if;
      else
        if nvl(vcGuias.qt_saldo,0) >= nvl(pnQuantLancada,0) and vcGuias.tp_guia <> 'R'
	      and vcGuias.ordem <> 3 then  -- pda 236366 (Início) - Pedro Neiva - 02/07/2008
          --
          return vcGuias.cd_guia; -- pda 193054
        else --pda 193054
          if vcGuias.tp_guia = 'P' and vcGuias.ordem = 3 and nvl(pnQuantLancada,0) > 0 and vcGuias.tp_situacao = 'P' then --pda 193054
            --
            select dbamv.seq_it_guia.nextval
              into nCdItGuia
              from sys.dual;
            --
            aTableItGuia(1).cd_guia                 := vcGuias.cd_guia;
            aTableItGuia(1).cd_it_guia              := nCdItGuia;
            aTableItGuia(1).cd_pro_fat              := pvProFat;
            aTableItGuia(1).qt_autorizado           := nvl(pnQuantLancada,1);
            aTableItGuia(1).dt_geracao              := sysdate;
            aTableItGuia(1).cd_usu_geracao          := user;
            --
            begin
              dbamv.pkt_it_guia.insere( aTableItGuia );
            exception
              when others then
                null;
            end;
            --
            pnGuiaPendente := vcGuias.cd_guia; --pda 193054
            return vcGuias.cd_guia; --pda 193054
          elsif vcGuias.tp_guia = 'P' and vcGuias.ordem = 7 and vcGuias.tp_situacao = 'P' then --pda 193054
            nQtLancada := nvl(pnQuantLancada,0) + nvl(vcGuias.qt_autorizado, 0);
            update dbamv.it_guia
               set qt_autorizado = Nvl(nQtLancada,1)
             where cd_guia = vcGuias.cd_guia
               and cd_pro_fat = pvProFat;
            pnGuiaPendente := vcGuias.cd_guia;
            return vcGuias.cd_guia;
          end if;
          -- pda 175635 - fim
          --
        end if;
      end if;
    end loop;
	if pnGuiaPendente is null then
      open  cGuiasPendentes( nConvenio, nAcomodacao );
      fetch cGuiasPendentes into vcGuiasPendentes;
      if cGuiasPendentes%found then
		if vcGuiasPendentes.tp_guia = 'R' then
			if nvl( vTipoProFat, 'XX' ) in ( 'DI', 'DU', 'DA' ) then
				pnGuiaPendente := vcGuiasPendentes.cd_guia;
			end if;
        elsif vcGuiasPendentes.tp_guia = 'O' then
            if vTpGruPro = 'OP' then
				pnGuiaPendente := vcGuiasPendentes.cd_guia;
			end if;
		else
		   pnGuiaPendente := vcGuiasPendentes.cd_guia;
        end if;
      end if;
      close cGuiasPendentes;
    end if;
    -- pda 160995 - fim
    --
  end if;
  --
  return null;
  --
end;  /* Fim da função FNC_RETORNA_GUIA_DISPONIVEL */
function FNC_RETORNA_SALDO_GUIA( pnAtend  number,
                                 pnCdGuia number,
                                 pvProFat varchar) return number is
  cursor cQuantidade is
    select sum( qt_autorizada ) qt_autorizada
	  from ( select sum( nvl( it_guia.qt_autorizada_convenio, it_guia.qt_autorizado )) qt_autorizada
               from dbamv.it_guia,
                    dbamv.pro_fat
              where it_guia.cd_guia    = pnCdGuia
                and it_guia.cd_pro_fat = pvProFat
                and pro_fat.cd_pro_fat = it_guia.cd_pro_fat
                and nvl( pro_fat.tp_serv_hospitalar, 'X' ) not in ( 'DI', 'DA', 'DU' )
             union all
             select nvl( guia.nr_dias_autorizados, guia.nr_dias_solicitados ) qt_autorizada
               from dbamv.guia,
                    dbamv.pro_fat
              where guia.cd_guia = pnCdGuia
                and pro_fat.cd_pro_fat = pvProFat
                and nvl( pro_fat.tp_serv_hospitalar, 'X' ) in ( 'DI', 'DA', 'DU' )
              );
  -- pda 162949 - fim
  -- pda 165506 - fim
  --
  cursor cTipoAtend is
    select atendime.tp_atendimento
      from dbamv.atendime
     where atendime.cd_atendimento = pnAtend
       and atendime.cd_multi_empresa  = dbamv.pkg_mv2000.le_empresa;
  --
  cursor cQuantUsada( pvTpAtend in varchar2 ) is
    select sum( qt_lancamento )
      from ( select sum( itreg_fat_espelho.qt_lancamento ) qt_lancamento
               from dbamv.itreg_fat_espelho
              where itreg_fat_espelho.cd_guia    = pnCdGuia
                and itreg_fat_espelho.cd_pro_fat = pvProFat
                and pvTpAtend in ('I','H')
             union all
             select sum( itreg_amb_espelho.qt_lancamento ) qt_lancamento
               from dbamv.itreg_amb_espelho
              where itreg_amb_espelho.cd_guia    = pnCdGuia
                and itreg_amb_espelho.cd_pro_fat = pvProFat
                and pvTpAtend in ('A','E','U') )
     where nvl(qt_lancamento,0) > 0;
  --
  nQuantGuia        number;
  vTpAtend          varchar2(1);
  nQuantUsada       number;
  nSaldo            number;
  --
begin
  --
  open cQuantidade;
  fetch cQuantidade into nQuantGuia;
  close cQuantidade;
  --
  open cTipoAtend;
  fetch cTipoAtend into vTpAtend;
  close cTipoAtend;
  --
  open cQuantUsada( vtpAtend );
  fetch cQuantUsada into nQuantUsada;
  close cQuantUsada;
  --
  nSaldo := ( nvl(nQuantGuia,0) - nvl(nQuantUsada,0) );
  --
  if nSaldo = 0 then
    return null;
  else
    return nSaldo;
  end if;
  --
end;  /* Fim da função FNC_RETORNA_SALDO_GUIA */
FUNCTION FNC_EXCLUI_SUBSTITUI_PROC
        (p_TpAtendimento    in varchar2,
         p_CdConta          in number,
         p_CdLancamento     in number,
         pCdProFat          in varchar2,
         pDtLancamento      in date,
         pCdSetor           in number,
         pCdConvenio        in number,
         pCdConPla          in number)
         return varchar is
/*******************************************************************************************
AUTOR..........: Jansen Gallindo
DATA ..........: 04/04/2007
FUNCIONALIDADE.: testar a regra de Lançamento para o tem antes do clculo da conta.
                 Funo ser chamada na val_proc_ffcv.
********************************************************************************************/
-- busca se regra for tp_aa S
cursor cRegraSub( pvtipo in varchar2, vProfat in varchar2, nCdSetor in number , dDtLanc in date,
               pCdConvenio in number, pCdConPla in number, p_ncdmultiempresa in number) is
 -- a regra tem restrio de plano e setor aceita
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, '4' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and tp_acao = 'S'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = pCdConPla )
     and exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor  = nCdSetor )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
UNION ALL
    -- RESTRINGE APENAS POR PLANO
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
    , regra_lancamento.cd_pro_fat_subordinado, '3' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and tp_acao = 'S'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = pCdConPla   )
       and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor = nCdSetor )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
UNION ALL
    --- RESTRINGE APENAS POR SETOR
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
  , regra_lancamento.cd_pro_fat_subordinado, '2' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and tp_acao = 'S'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados   )
     and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                and cd_setor = nCdSetor  )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
     -- NAO RESTRINGE POR PLANO NEM POR SETOR
UNION ALL
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, '1' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and tp_acao = 'S'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
     and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
;
---- busca se regra for tp_aa E
cursor cRegraExc( pvtipo in varchar2, vProfat in varchar2, nCdSetor in number , dDtLanc in date,
               pCdConvenio in number, pCdConPla in number,p_ncdmultiempresa in number,
               pCdAtendimento in number) is
 -- a regra tem restrio de plano e setor aceita
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, '4' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and tp_acao = 'E'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = pCdConPla )
     and exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor  = nCdSetor )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
UNION ALL
    -- RESTRINGE APENAS POR PLANO
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
    , regra_lancamento.cd_pro_fat_subordinado, '3' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
      and tp_acao = 'E'
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = pCdConPla   )
       and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor = nCdSetor )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
UNION ALL
    --- RESTRINGE APENAS POR SETOR
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
  , regra_lancamento.cd_pro_fat_subordinado, '2' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and tp_acao = 'E'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados   )
     and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                and cd_setor = nCdSetor  )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
     -- NAO RESTRINGE POR PLANO NEM POR SETOR
UNION ALL
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, '1' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
      and tp_acao = 'E'
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
     and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
;
---- busca se regra for tp_aa E
cursor cRegraExcLog( pvtipo in varchar2, vProfat in varchar2, nCdSetor in number , dDtLanc in date,
               pCdConvenio in number, pCdConPla in number,p_ncdmultiempresa in number,
               pCdAtendimento in number) is
 -- a regra tem restrio de plano e setor aceita
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, '4' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.log_itreg_fat_reg_lanc itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.log_itreg_amb_reg_lanc itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')
                          /* pda 462362 - inicio */
                           UNION
                           select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and 'I' in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and 'I' not in ('I','H')  /* pda 462362 - fim */ ) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and tp_acao = 'E'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = pCdConPla )
     and exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor  = nCdSetor )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
UNION ALL
    -- RESTRINGE APENAS POR PLANO
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
    , regra_lancamento.cd_pro_fat_subordinado, '3' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
      and tp_acao = 'E'
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.log_itreg_fat_reg_lanc itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.log_itreg_amb_reg_lanc itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')
                          /* pda 462362 - inicio */
                           UNION
                           select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and 'I' in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and 'I' not in ('I','H')  /* pda 462362 - fim */ ) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = pCdConPla   )
       and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor = nCdSetor )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
UNION ALL
    --- RESTRINGE APENAS POR SETOR
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
  , regra_lancamento.cd_pro_fat_subordinado, '2' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.log_itreg_fat_reg_lanc itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.log_itreg_amb_reg_lanc itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')
                          /* pda 462362 - inicio */
                           UNION
                           select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and 'I' in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and 'I' not in ('I','H')  /* pda 462362 - fim */ ) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and tp_acao = 'E'
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados   )
     and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                and cd_setor = nCdSetor  )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
     -- NAO RESTRINGE POR PLANO NEM POR SETOR
UNION ALL
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, '1' grau
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat_subordinado = vProfat
      and tp_acao = 'E'
       and ((cd_pro_fat in (select distinct itreg_fat.cd_pro_fat
                            from dbamv.log_itreg_fat_reg_lanc itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and pvtipo in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.log_itreg_amb_reg_lanc itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and pvtipo not in ('I','H')
                          /* pda 462362 - inicio */
                           UNION
                           select distinct itreg_fat.cd_pro_fat
                            from dbamv.itreg_fat_espelho itreg_fat
                           where itreg_fat.cd_reg_fat = P_CdConta
                             and 'I' in ('I','H')
                           union
                          select distinct itreg_amb.cd_pro_fat
                            from dbamv.itreg_amb_espelho itreg_amb
                           where itreg_amb.cd_reg_amb = P_CdConta
                             and itreg_amb.cd_atendimento = pCdAtendimento
                             and 'I' not in ('I','H')  /* pda 462362 - fim */ ) and p_CdConta is not null) or
            (cd_pro_fat_subordinado =  cd_pro_fat and  p_CdConta is null))
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = pCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
     and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
      --PDA 206675(Inicio) - 28/11/2007 - Cristiane Queiroz
      AND( exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
                     AND cd_setor  = nCdSetor )
                     OR
          NOT exists ( select cd_setor
                     from dbamv.setor_pro_fat_subordinado
                    where cd_regra_lancamento = regra_lancamento.cd_regra_lancamento)
          )
      --PDA 206675(Fim) - 28/11/2007 - Cristiane Queiroz
;
cursor cHosp is
  select itreg_fat.cd_pro_fat, itreg_fat.dt_lancamento,
         itreg_fat.cd_setor, reg_fat.cd_convenio,
         reg_fat.cd_con_pla,reg_fat.cd_multi_empresa
    from dbamv.reg_fat, dbamv.itreg_fat_espelho itreg_fat
   where itreg_fat.cd_reg_fat = P_CdConta
     and itreg_fat.cd_lancamento = p_cdlancamento
     and reg_fat.cd_reg_fat = itreg_fat.cd_reg_fat
-- pedro neiva 20/04/2007
  union all
  select pCdProFat
        ,pDtLancamento
        ,pCdSetor
        ,pCdConvenio
        ,pCdConPla
        ,dbamv.pkg_mv2000.le_empresa
    from sys.dual
   where p_CdConta is null;
cursor cAmb is
  select itreg_amb.cd_pro_fat, atendime.dt_atendimento,
         itreg_amb.cd_setor, itreg_amb.cd_con_pla,
         reg_amb.cd_convenio,reg_amb.cd_multi_empresa,
         atendime.cd_atendimento
    from dbamv.reg_amb, dbamv.itreg_amb_espelho itreg_amb, dbamv.atendime
   where itreg_amb.cd_reg_amb = P_CdConta
     and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa
     and itreg_amb.cd_lancamento = p_cdlancamento
     and itreg_amb.cd_reg_amb = reg_amb.cd_reg_amb
     and atendime.cd_atendimento = itreg_amb.cd_atendimento
  union all
  select pCdProFat
        ,pDtLancamento
        ,pCdSetor
        ,pCdConvenio
        ,pCdConPla
        ,dbamv.pkg_mv2000.le_empresa
        ,to_number(null)
    from sys.dual
   where p_CdConta is null;
cursor cHospLog is
  select itreg_fat.cd_pro_fat, itreg_fat.dt_lancamento,
         itreg_fat.cd_setor, reg_fat.cd_convenio,
         reg_fat.cd_con_pla,reg_fat.cd_multi_empresa
    from dbamv.reg_fat, dbamv.log_itreg_fat_reg_lanc itreg_fat
   where itreg_fat.cd_reg_fat = P_CdConta
     and itreg_fat.cd_lancamento = p_cdlancamento
     and reg_fat.cd_reg_fat = itreg_fat.cd_reg_fat;
cursor cAmbLog is
  select itreg_amb.cd_pro_fat, atendime.dt_atendimento,
         itreg_amb.cd_setor, itreg_amb.cd_con_pla,
         reg_amb.cd_convenio,reg_amb.cd_multi_empresa,
         atendime.cd_atendimento
    from dbamv.reg_amb, dbamv.log_itreg_amb_reg_lanc itreg_amb, dbamv.atendime
   where itreg_amb.cd_reg_amb = P_CdConta
     and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa
     and itreg_amb.cd_lancamento = p_cdlancamento
     and itreg_amb.cd_reg_amb = reg_amb.cd_reg_amb
     and atendime.cd_atendimento = itreg_amb.cd_atendimento;
vHosp          cHosp%rowtype;
vAmb           cAmb%rowtype;
vRegraExc      cRegraExc%rowtype;
vRegraSub      cRegraSub%rowtype;
begin
  if length(p_TpAtendimento) = 1 then
    if p_TpAtendimento not in('A','E','U') then
      open cHosp;
      fetch cHosp into vHosp;
      close cHosp;
      -- cRegra -> cd_pro_fat
      open cRegraExc(p_TpAtendimento,vHosp.cd_pro_fat,vHosp.cd_setor,vHosp.dt_lancamento, vHosp.cd_convenio, vHosp.cd_con_pla, vHosp.cd_multi_empresa,null);
      fetch cRegraExc into vRegraExc;
      open cRegraSub(p_TpAtendimento,vHosp.cd_pro_fat,vHosp.cd_setor,vHosp.dt_lancamento, vHosp.cd_convenio, vHosp.cd_con_pla,vHosp.cd_multi_empresa );
      fetch cRegraSub into vRegraSub;
      if cRegraExc%found or cRegraSub%found then
        close cRegraExc;
        close cRegraSub;
        return ('S');
      else
        close cRegraExc;
        close cRegraSub;
        return ('N');
      end if;
    else
      open camb;
      fetch camb into vAmb;
      close cAmb;
      open cRegraExc(p_TpAtendimento,vAmb.cd_pro_fat,vAmb.cd_setor,vAmb.dt_atendimento, vAmb.cd_convenio, vAmb.cd_con_pla,vAmb.cd_multi_empresa,vAmb.cd_atendimento );
      fetch cRegraExc into vRegraExc;
      open cRegraSub(p_TpAtendimento,vAmb.cd_pro_fat,vAmb.cd_setor,vAmb.dt_atendimento, vAmb.cd_convenio, vAmb.cd_con_pla,vAmb.cd_multi_empresa);
      fetch cRegraSub into vRegraSub;
      if cRegraExc%found or cRegraSub%found then
        close cRegraExc;
        close cRegraSub;
        return('S');
      else
        close cRegraExc;
        close cRegraSub;
        return ('N');
      end if;
    end if;
  else
    if substr(p_TpAtendimento,1,1) not in('A','E','U') then
      open cHospLog;
      fetch cHospLog into vHosp;
      close cHospLog;
      -- cRegra -> cd_pro_fat
      open cRegraExcLog(substr(p_TpAtendimento,1,1),vHosp.cd_pro_fat,vHosp.cd_setor,vHosp.dt_lancamento, vHosp.cd_convenio, vHosp.cd_con_pla, vHosp.cd_multi_empresa,null);
      fetch cRegraExcLog into vRegraExc;
      open cRegraSub(substr(p_TpAtendimento,1,1),vHosp.cd_pro_fat,vHosp.cd_setor,vHosp.dt_lancamento, vHosp.cd_convenio, vHosp.cd_con_pla,vHosp.cd_multi_empresa );
      fetch cRegraSub into vRegraSub;
      if cRegraExcLog%found or cRegraSub%found then
        close cRegraExcLog;
        close cRegraSub;
        return ('S');
      else
        close cRegraExcLog;
        close cRegraSub;
        return ('N');
      end if;
    else
      open cambLog;
      fetch cambLog into vAmb;
      close cambLog;
      open cRegraExcLog(substr(p_TpAtendimento,1,1),vAmb.cd_pro_fat,vAmb.cd_setor,vAmb.dt_atendimento, vAmb.cd_convenio, vAmb.cd_con_pla,vAmb.cd_multi_empresa,vAmb.cd_atendimento );
      fetch cRegraExcLog into vRegraExc;
      open cRegraSub(substr(p_TpAtendimento,1,1),vAmb.cd_pro_fat,vAmb.cd_setor,vAmb.dt_atendimento, vAmb.cd_convenio, vAmb.cd_con_pla,vAmb.cd_multi_empresa);
      fetch cRegraSub into vRegraSub;
      if cRegraExcLog%found or cRegraSub%found then
        close cRegraExcLog;
        close cRegraSub;
        return('S');
      else
        close cRegraExcLog;
        close cRegraSub;
        return ('N');
      end if;
    end if;
  end if;
end;
PROCEDURE PRC_REPLICA_ITENS_CONTA
        ( p_vTpConta        in varchar2,
          p_nCdConta         in number,
          p_nCdAtend         in number default null,
          p_nCdMultiEmpresa  in number,
          p_vTpAcao          in varchar2  ) IS
/*******************************************************************************************
AUTOR..........: Intersolution
DATA ..........: 19/11/2006
FUNCIONALIDADE.: Replicar itens da conta.
********************************************************************************************/
  cursor cAtendimento is -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison (inicio)
    select dt_alta, hr_alta
      from dbamv.atendime
     where cd_atendimento = p_ncdatend; -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison (fim)
   cursor cData (pDtAlta in Date) IS -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison (inicio)
    select Count(*) qtd
      from dbamv.itreg_fat_espelho irf
     where to_date(to_char(irf.dt_lancamento, 'dd/mm/yyyy')||' '||to_char(irf.hr_lancamento, 'hh24:mi'), 'dd/mm/yyyy hh24:mi') > pDtAlta
       and irf.cd_reg_fat = p_ncdconta; -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison (fim)
   -- PDA 248739 (Incio) - 15/09/2008 - Diego Costa
   Cursor cDtLancamentoLog (pDtAlta in Date) IS
    select Count(1) qtd
      from dbamv.log_itreg_fat_reg_lanc irf
     where to_date(to_char(irf.dt_lancamento, 'dd/mm/yyyy')||' '||to_char(irf.hr_lancamento, 'hh24:mi'), 'dd/mm/yyyy hh24:mi') > pDtAlta
       and irf.cd_reg_fat = p_ncdconta;
   -- PDA 248739 (Fim)
   vcData cData%ROWTYPE; -- PDA.: 244685 - 19/08/2008 - Emanoel Deivison
   vcAtendimento cAtendimento%ROWTYPE; -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison
   rDtLancamentoLog   cDtLancamentoLog%rowtype; -- PDA 248739 - 15/09/2008 - Diego Costa
	    --PHNA - 15/12/2008
     rl_itcob_pre      NUMBER := 0;
     rl_itlan_med      NUMBER := 0;
     rl_hosp           NUMBER := 0;
	 rl_itcob_pre_ambu NUMBER := 0;
     rl_amb            NUMBER := 0;
    --PHNA - 15/12/2008
   --30/12/2008
   Cursor LogItensFat is
/* tmdo    Select count(*)
	  from dbamv.log_itreg_fat_reg_lanc
    where cd_reg_fat	= p_nCdConta;*/
    select sum(cont)
      from (Select count(*) cont
	          from dbamv.log_itreg_fat_reg_lanc
             where cd_reg_fat	= p_nCdConta
             union
            Select count(*) cont
              from dbamv.itreg_fat_espelho
             where cd_reg_fat	= p_nCdConta
               and tp_mvto in ('Regra Lança','Regra Lana'));
   Cursor LogItensAmb  is
    select sum(cont)
      from (Select count(*) cont
	          from dbamv.log_itreg_amb_reg_lanc
             where cd_reg_AMB	   = p_nCdConta
               and cd_atendimento  = p_nCdAtend
             union
            Select count(*) cont
              from dbamv.itreg_amb_espelho
             where cd_reg_AMB	    = p_nCdConta
               and cd_atendimento   = p_nCdAtend
               and tp_mvto in ('Regra Lança','Regra Lana'))    ;
    nLogItensFat number;
    nLogItensAmb number;
      Type TypRec_LctosHosp Is Record(
             cd_reg_fat                 dbamv.itreg_fat.cd_reg_fat%type,
             cd_lancamento_old          dbamv.itreg_fat.cd_lancamento%type,
             cd_lancamento_new          dbamv.itreg_fat.cd_lancamento%type);
      Type TypTab_LctosHosp Is Table Of TypRec_LctosHosp Index By Binary_Integer;
      tLctosHosp TypTab_LctosHosp;
      Type TypRec_LctosAmb Is Record(
             cd_atendimento             dbamv.itreg_amb.cd_atendimento%type,
             cd_reg_amb                 dbamv.itreg_amb.cd_reg_amb%type,
             cd_lancamento_old          dbamv.itreg_amb.cd_lancamento%type,
             cd_lancamento_new          dbamv.itreg_amb.cd_lancamento%type);
      Type TypTab_LctosAmb Is Table Of TypRec_LctosAmb Index By Binary_Integer;
      tLctosAmb TypTab_LctosAmb;
     Cursor cHosp(nCdLancamento in number) is
      select itreg_fat.cd_lancamento
     		,itreg_fat.cd_reg_fat
            from dbamv.itreg_fat_espelho itreg_fat
                ,dbamv.log_itreg_fat_reg_lanc
          where itreg_fat.cd_reg_fat = log_itreg_fat_reg_lanc.cd_reg_fat
            and itreg_fat.cd_lancamento = log_itreg_fat_reg_lanc.cd_lancamento
            and log_itreg_fat_reg_lanc.cd_reg_fat = p_ncdconta
			and log_itreg_fat_reg_lanc.cd_lancamento = nCdLancamento;
     Cursor cAmb(nCdLancamento in number) is
      select itreg_amb.cd_lancamento
			,itreg_amb.cd_reg_amb
			,itreg_amb.cd_atendimento
            from dbamv.itreg_amb_espelho itreg_amb
                ,dbamv.log_itreg_amb_reg_lanc
          where itreg_amb.cd_reg_amb = log_itreg_amb_reg_lanc.cd_reg_amb
            and itreg_amb.cd_lancamento = log_itreg_amb_reg_lanc.cd_lancamento
            and itreg_amb.cd_atendimento = log_itreg_amb_reg_lanc.cd_atendimento
            and log_itreg_amb_reg_lanc.cd_reg_amb = p_ncdconta
            and log_itreg_amb_reg_lanc.cd_atendimento = p_nCdAtend
			and log_itreg_amb_reg_lanc.cd_lancamento = nCdLancamento;
     Cursor cMaxLctoHosp is
      Select max(cd_lancamento) cd_lancamento
		from(/*tmdoselect max(log_itreg_fat_reg_lanc.cd_lancamento) cd_lancamento
		       from dbamv.log_itreg_fat_reg_lanc
	          where log_itreg_fat_reg_lanc.cd_reg_fat = p_ncdconta
	          union*/
		     select max(itreg_fat.cd_lancamento) cd_lancamento
    	       from dbamv.itreg_fat_espelho itreg_fat
     	      where itreg_fat.cd_reg_fat = p_ncdconta
			);
     Cursor cMaxLctoAmb is
		select max(cd_lancamento) cd_lancamento
          from (/* tmdoselect max(log_itreg_amb_reg_lanc.cd_lancamento) cd_lancamento
		            from dbamv.log_itreg_amb_reg_lanc
  		        where log_itreg_amb_reg_lanc.cd_reg_amb = p_ncdconta
    		      and log_itreg_amb_reg_lanc.cd_atendimento = p_nCdAtend
		        union*/
	 		    select max(itreg_amb.cd_lancamento) cd_lancamento
		            from dbamv.itreg_amb_espelho itreg_amb
  		        where itreg_amb.cd_reg_amb = p_ncdconta
    	          and itreg_amb.cd_atendimento = p_nCdAtend
				);
	ncdLcto 			dbamv.itreg_amb.cd_lancamento%type;
	ncdLctoRel			dbamv.itreg_amb.cd_lancamento%type;
	ncMaxLctoHosp		dbamv.itreg_fat.cd_lancamento%type;
	ncMaxLctoAmb		dbamv.itreg_amb.cd_lancamento%type;
	i number := 0;
     --Fim 27/03/2009
BEGIN
  if p_vTpAcao = 'F' then   -- Fazer
   open LogItensFat;
   fetch LogItensFat into nLogItensFat;
   close LogItensFat;
   open LogItensAmb;
   fetch LogItensAmb into nLogItensAmb;
   close LogItensAmb;
   dbamv.pack_ffcv_regra_lancamento.PRC_ATRIBUI_EXCLUSAO_REGRA(p_nCdConta); --pda 240515 - Pedro Neiva - 29/07/2008
   if p_vTpConta = 'H' THEN
      delete dbamv.itreg_fat_espelho
       where cd_reg_fat	= p_nCdConta
         and tp_mvto in ('Regra Lança','Regra Lana');
      --pda 240515(Fim)
   IF nLogItensFat = 0 THEN--30/12/2008
     -- aplicar regra  com a conta aberta p/ no disparar  trigger  que no pode alterar valor em conta fechada
     update dbamv.reg_fat set sn_fechada = 'N' where cd_reg_fat = p_nCdConta;
     delete from dbamv.log_itcob_pre_reg_lanc
     where  cd_reg_fat	= p_nCdConta
     --pda 271215(Incio) - 10/02/2009 - Pedro Neiva
      and exists  (Select 'X'
                     from dbamv.log_itreg_fat_reg_lanc
                    where log_itreg_fat_reg_lanc.cd_lancamento = log_itcob_pre_reg_lanc.cd_lancamento
                      and log_itreg_fat_reg_lanc.cd_reg_fat = log_itcob_pre_reg_lanc.cd_reg_fat);
     delete from dbamv.log_itlan_med_reg_lanc
     where  cd_reg_fat	= p_nCdConta
     --pda 271215(Incio) - 10/02/2009 - Pedro Neiva
      and exists  (Select 'X'
                     from dbamv.log_itreg_fat_reg_lanc
                    where log_itreg_fat_reg_lanc.cd_lancamento = log_itlan_med_reg_lanc.cd_lancamento
                      and log_itreg_fat_reg_lanc.cd_reg_fat = log_itlan_med_reg_lanc.cd_reg_fat);
     delete  dbamv.log_itreg_fat_reg_lanc
     where   cd_reg_fat	= p_nCdConta;
  open cAtendimento; -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison (inicio)
  fetch cAtendimento into vcatendimento;
  close catendimento; -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison (fim)
  if vcAtendimento.dt_alta is not null then  -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison (inicio)
   begin
    vcAtendimento.dt_alta:= to_date(to_char(vcAtendimento.dt_alta, 'dd/mm/yyyy')||' '||to_char(vcAtendimento.hr_alta, 'hh24:mi'), 'dd/mm/yyyy hh24:mi');
    open cdata(vcatendimento.dt_alta);
    fetch cdata into vcdata;
    close cdata;
    if vcdata.qtd > 0 then
      update dbamv.itreg_fat_espelho set dt_lancamento = vcAtendimento.dt_alta,
                                hr_lancamento = vcAtendimento.hr_alta
      where  (cd_reg_fat, cd_lancamento) in ( select irf.cd_reg_fat, irf.cd_lancamento
                                                from dbamv.itreg_fat_espelho irf
                                               where to_date(to_char(irf.dt_lancamento, 'dd/mm/yyyy')||' '||to_char(irf.hr_lancamento, 'hh24:mi'), 'dd/mm/yyyy hh24:mi') > vcAtendimento.dt_alta
                                                 and irf.cd_reg_fat = p_ncdconta );
    end if;
   end;
  end if; -- PDA.: 244685 - 25/08/2008 - Emanoel Deivison(fim)
	insert into dbamv.log_itreg_fat_reg_lanc
	    ( cd_reg_fat,
        cd_lancamento,
        dt_lancamento,
        hr_lancamento,
        qt_lancamento,
        vl_percentual_multipla,
        vl_unitario,
        vl_filme_unitario,
        vl_acrescimo,
        vl_desconto,
        cd_gru_fat,
        cd_pro_fat,
        cd_prestador,
        nr_padrao,
        vl_honorario_unitario,
        vl_operacional_unitario,
        cd_pres_con,
		vl_percentual_paciente,
		vl_total_conta,
		cd_importa_reg_fat,
		cd_guia,
		sn_pertence_pacote,
		vl_base_repassado,
		cd_motivo_glosa,
		qt_ch_unitario,
		tp_pagamento,
		cd_setor_produziu,
		cd_setor,
		cd_padrao,
		sn_horario_especial,
		qt_pontos,
		sn_proced_autorizado,
		tp_alta_uti_neo,
		qt_peso_rn,
		qt_mes_gestacao,
		cd_sus,
		cd_tipo_vinculo,
		cd_ati_med,
		vl_sp,
		vl_sh,
		vl_sd,
		vl_ato,
		cd_sus_auxiliar,
		cd_reg_fat_pai,
		cd_lancamento_pai,
		sn_proced_realizado,
		cd_franquia,
		cd_regra_acoplamento,
		vl_perc_acoplamento,
		sn_paciente_paga,
		cd_regra_atendimento,
		cd_regra_atendimento_pro_fat,
		cd_reg_fat_rel,
		cd_lancamento_rel,
		cd_usuario,
		cd_mvto,
		tp_mvto,
		hr_lancamento_final,
		vl_desconto_conta,
		sn_repassou_virtual,
		vl_nota,
		sn_imp_laudo_alteracao,
		vl_ponto_repassado,
		cd_itmvto,
		sn_repassado,
		fator_relacionado,
		nr_seq_preimpre,
		cd_conta_pai,
		cd_multi_empresa,
		cd_conta_kit,
		tp_resultado_exame_ach,
		tp_situacao_ach,
		cd_geracao_ach_autorizado,
		cd_lancamento_reg_lanc,
		cd_regra_lancamento,
		cd_conta_pacote,
		sn_calc_diferenca_acomodacao,
        nr_difep)
    ( select itreg_fat.cd_reg_fat,
    -- PDA 216917 (Fim)
        cd_lancamento,
        dt_lancamento,
        hr_lancamento,
        qt_lancamento,
        vl_percentual_multipla,
        vl_unitario,
        vl_filme_unitario,
        vl_acrescimo,
        vl_desconto,
        cd_gru_fat,
		cd_pro_fat,
        itreg_fat.cd_prestador,
        nr_padrao,
        vl_honorario_unitario,
        vl_operacional_unitario,
        cd_pres_con,
		vl_percentual_paciente,
		itreg_fat.vl_total_conta,
		cd_importa_reg_fat,
		itreg_fat.cd_guia,
		sn_pertence_pacote,
		vl_base_repassado,
		itreg_fat.cd_motivo_glosa,
		qt_ch_unitario,
		tp_pagamento,
		cd_setor_produziu,
		cd_setor,
		cd_padrao,
		sn_horario_especial,
		qt_pontos,
		sn_proced_autorizado,
		tp_alta_uti_neo,
		qt_peso_rn,
		qt_mes_gestacao,
		cd_sus,
		cd_tipo_vinculo,
		cd_ati_med,
		vl_sp,
		vl_sh,
		vl_sd,
		vl_ato,
		cd_sus_auxiliar,
		itreg_fat.cd_reg_fat_pai,
		cd_lancamento_pai,
		sn_proced_realizado,
		cd_franquia,
		cd_regra_acoplamento,
		vl_perc_acoplamento,
		sn_paciente_paga,
		cd_regra_atendimento,
		cd_regra_atendimento_pro_fat,
		cd_reg_fat_rel,
		cd_lancamento_rel,
		cd_usuario,
		itreg_fat.cd_mvto,
		itreg_fat.tp_mvto,
		hr_lancamento_final,
		itreg_fat.vl_desconto_conta,
		sn_repassou_virtual,
		vl_nota,
		sn_imp_laudo_alteracao,
		vl_ponto_repassado,
		itreg_fat.cd_itmvto,
		sn_repassado,
		fator_relacionado,
		itreg_fat.nr_seq_preimpre,
		itreg_fat.cd_conta_pai,
		itreg_fat.cd_multi_empresa,
		cd_conta_kit,
		tp_resultado_exame_ach,
		tp_situacao_ach,
		cd_geracao_ach_autorizado,
		cd_lancamento_reg_lanc,
		cd_regra_lancamento,
        conta_pacote.cd_pacote,
		nvl(sn_calc_diferenca_acomodacao,'N'),
        nr_difep
              	 from dbamv.itreg_fat_espelho itreg_fat
                     ,dbamv.conta_pacote
                     ,dbamv.reg_fat
                     ,dbamv.atendime
                where itreg_fat.cd_reg_fat	          = p_nCdConta
                  and conta_pacote.cd_conta_pacote(+) = itreg_fat.cd_conta_pacote
                  and itreg_fat.cd_reg_fat            = reg_fat.cd_reg_fat
                  and atendime.cd_atendimento         = reg_fat.cd_atendimento
                  and 'S' = dbamv.pack_ffcv_espelho.FNC_EXCLUI_SUBSTITUI_PROC(atendime.tp_atendimento,
                                                                                       itreg_fat.cd_reg_fat,
                                                                                       itreg_fat.cd_lancamento,
                                                                                       itreg_fat.cd_pro_fat,
                                                                                       itreg_fat.dt_lancamento,
                                                                                       itreg_fat.cd_setor,
                                                                                       reg_fat.cd_convenio,
                                                                                       reg_fat.cd_con_pla)
                 );
     delete from dbamv.log_itreg_fat_reg_lanc l
     where l.cd_reg_fat = p_nCdConta
       and exists (select 1
                   from dbamv.conta_pacote c
                   where c.cd_reg_fat = l.cd_reg_fat
                     and c.cd_lancamento_fat = l.cd_lancamento);
 	 insert into dbamv.log_itlan_med_reg_lanc
       ( cd_reg_fat,
		 cd_lancamento,
		 cd_ati_med,
		 cd_prestador,
		 vl_ato,
		 cd_pres_con,
		 tp_pagamento,
		 vl_base_repassado,
		 qt_pontos,
		 cd_tipo_vinculo,
		 sn_paciente_paga,
		 cd_itmvto,
		 sn_repassou_virtual,
		 vl_nota,
		 vl_desconto,
		 vl_acrescimo,
		 vl_desconto_conta,
		 vl_liquido,
		 sn_repassado )
( select cd_reg_fat,
		 cd_lancamento,
		 cd_ati_med,
		 cd_prestador,
		 vl_ato,
		 cd_pres_con,
		 tp_pagamento,
		 vl_base_repassado,
		 qt_pontos,
		 cd_tipo_vinculo,
		 sn_paciente_paga,
		 cd_itmvto,
		 sn_repassou_virtual,
		 vl_nota,
		 vl_desconto,
		 vl_acrescimo,
		 vl_desconto_conta,
		 vl_liquido,
		 sn_repassado
	              from dbamv.itlan_med_espelho itlan_med
	              where cd_reg_fat	= p_nCdConta
                  and exists  (Select 'X'
                                  from dbamv.itreg_fat_espelho itreg_fat
                                     , dbamv.reg_fat
                                     , dbamv.atendime
                                  where itreg_fat.cd_lancamento = itlan_med.cd_lancamento
                                    and itreg_fat.cd_reg_fat = itlan_med.cd_reg_fat
                                    and itreg_fat.cd_reg_fat = reg_fat.cd_reg_fat
                                    and atendime.cd_atendimento = reg_fat.cd_atendimento
                                    and 'S' = dbamv.pack_ffcv_espelho.FNC_EXCLUI_SUBSTITUI_PROC(atendime.tp_atendimento,
                                                                                       itreg_fat.cd_reg_fat,
                                                                                       itreg_fat.cd_lancamento,
                                                                                       itreg_fat.cd_pro_fat,
                                                                                       itreg_fat.dt_lancamento,
                                                                                       itreg_fat.cd_setor,
                                                                                       reg_fat.cd_convenio,
                                                                                       reg_fat.cd_con_pla)
                               )
                         );
        insert into dbamv.log_itcob_pre_reg_lanc
                      ( cd_reg_fat ,
                        cd_lancamento ,
                        cd_fornecedor ,
                        nr_documento ,
                        vl_preco_unitario,
                        vl_preco_total,
                        ds_observacao)
         ( select cd_reg_fat ,
                  cd_lancamento ,
                  cd_fornecedor ,
                  nr_documento ,
                  vl_preco_unitario,
                  vl_preco_total,
                  ds_observacao
             from dbamv.itcob_pre_espelho itcob_pre
            where cd_reg_fat =  p_nCdConta
              and exists (select cd_lancamento
                            from dbamv.itreg_fat_espelho itreg_fat
                               , dbamv.reg_fat
                               , dbamv.atendime
                           where itreg_fat.cd_reg_fat    = p_nCdConta
                             and itreg_fat.cd_reg_fat    = itcob_pre.cd_reg_fat
                             and itreg_fat.cd_lancamento = itcob_pre.cd_lancamento
                             and reg_fat.cd_reg_fat      = itreg_fat.cd_reg_fat
                             and atendime.cd_atendimento = reg_fat.cd_atendimento
                             and 'S' = dbamv.pack_ffcv_espelho.FNC_EXCLUI_SUBSTITUI_PROC(atendime.tp_atendimento,
                                                                                       itreg_fat.cd_reg_fat,
                                                                                       itreg_fat.cd_lancamento,
                                                                                       itreg_fat.cd_pro_fat,
                                                                                       itreg_fat.dt_lancamento,
                                                                                       itreg_fat.cd_setor,
                                                                                       reg_fat.cd_convenio,
                                                                                       reg_fat.cd_con_pla)
                             )
           );
    -- PDA 257297 (Incio) - 18/12/2008 - Henrique Antunes
    open  cDtLancamentoLog(vcatendimento.dt_alta);
    fetch cDtLancamentoLog into rDtLancamentoLog;
    close cDtLancamentoLog;
    if rDtLancamentoLog.qtd > 0 then
      update dbamv.log_itreg_fat_reg_lanc
         set dt_lancamento = vcAtendimento.dt_alta,
             hr_lancamento = vcAtendimento.hr_alta
      where  (cd_reg_fat, cd_lancamento) in ( select irf.cd_reg_fat, irf.cd_lancamento
                                                from dbamv.log_itreg_fat_reg_lanc irf
                                               where to_date(to_char(irf.dt_lancamento, 'dd/mm/yyyy')||' '||to_char(irf.hr_lancamento, 'hh24:mi'), 'dd/mm/yyyy hh24:mi') > vcAtendimento.dt_alta
                                                 and irf.cd_reg_fat = p_ncdconta );
    end if;
    -- PDA 257297 (Fim)
    END IF; --30/12/2008
   else --if p_vTpConta = 'H' then
      delete dbamv.itreg_amb_espelho
       where cd_reg_amb	= p_nCdConta
         and cd_atendimento    = p_nCdAtend
         and tp_mvto in ('Regra Lança','Regra Lana');
   IF nLogItensAmb = 0 THEN --30/12/2008
      -- aplicar regra  com a conta aberta p/ no disparar  trigger  que no pode alterar valor em conta fechada
     update dbamv.reg_amb set sn_fechada = 'N' where cd_reg_amb = p_nCdConta;
     update dbamv.itreg_amb_espelho set sn_fechada = 'N' where cd_reg_amb = p_nCdConta and cd_atendimento    = p_nCdAtend;
    delete from dbamv.log_itcob_pre_ambu_reg_lanc
     where  cd_reg_amb	= p_nCdConta and exists (select cd_lancamento
                         -- PDA 271215 (Inicio) - Henrique Antunes - 04/05/2009
                         --from dbamv.itreg_amb
                         from dbamv.log_itreg_amb_reg_lanc itreg_amb
                         -- PDA 271215 (Fim)
                                                  where cd_reg_Amb = p_nCdConta
                                                  and cd_atendimento = p_nCdAtend
                                                  and cd_reg_Amb = log_itcob_pre_ambu_reg_lanc.cd_reg_amb
                                                  and cd_lancamento = log_itcob_pre_ambu_reg_lanc.cd_lancamento);
	--PHNA - 15/12/2008
   	delete from dbamv.log_itreg_amb_reg_lanc
 	   where cd_reg_amb	   = p_nCdConta
       and cd_atendimento  = p_nCdAtend;
      -- inserir os que no tm relacionado
  	  insert into dbamv.log_itreg_amb_reg_lanc
       ( cd_reg_amb,
		 cd_lancamento,
		 hr_lancamento,
		 qt_lancamento,
		 vl_unitario,
		 vl_acrescimo,
		 vl_desconto,
		 cd_gru_fat,
		 cd_pro_fat,
		 cd_atendimento,
		 cd_prestador,
		 cd_con_pla,
		 cd_convenio,
		 vl_honorario_unitario,
		 vl_operacional_unitario,
		 cd_ati_med,
		 cd_pres_con,
		 vl_percentual_paciente,
		 vl_filme_unitario,
		 vl_total_conta,
		 sn_fatura_impressa,
		 sn_fechada,
		 cd_importa_reg_amb,
		 sn_conta_calculada,
		 cd_guia,
		 sn_pertence_pacote,
		 dt_fechamento,
		 nm_usuario_fechou,
		 vl_desconto_fechamento,
		 vl_acrescimo_fechamento,
		 vl_conta_no_fechamento,
		 vl_base_repassado,
		 cd_motivo_glosa,
		 qt_ch_unitario,
		 vl_percentual_multipla,
		 tp_pagamento,
		 cd_setor_produziu,
		 cd_setor,
		 cd_padrao,
		 sn_horario_especial,
		 cd_reg_amb_pai,
		 cd_lancamento_pai,
		 cd_franquia,
		 cd_regra_acoplamento,
		 vl_perc_acoplamento,
		 sn_paciente_paga,
		 cd_regra_atendimento,
		 cd_regra_atendimento_pro_fat,
		 cd_franquia_valor_total,
		 cd_reg_amb_rel,
		 cd_lancamento_rel,
		 cd_itmvto,
		 cd_usuario,
		 cd_mvto,
		 tp_mvto,
		 hr_lancamento_final,
		 sn_repassou_virtual,
		 sn_pronta,
		 vl_desconto_conta,
		 dt_sessao,
		 tp_mvto_desconto,
		 tp_desconto,
		 vl_nota,
		 sn_repassado,
		 fator_relacionado,
		 nr_seq_preimpre,
		 cd_conta_kit,
--		 ds_observacao_franquia,    -- na poca esta coluna no existia na itreg_amb.
		 cd_lancamento_reg_lanc,
		 cd_regra_lancamento,
		 cd_conta_pacote,
		 sn_regra_lancamento,
        nr_difep
        )
	-- PDA 216917 (Inicio) - Henrique Antunes - 13/02/2008
    --( select cd_reg_amb,
    ( select itreg_amb.cd_reg_amb,
    -- PDA 216917 (Fim)
		 cd_lancamento,
		 hr_lancamento,
		 qt_lancamento,
		 vl_unitario,
		 vl_acrescimo,
		 vl_desconto,
		 cd_gru_fat,
         cd_pro_fat,
		 itreg_amb.cd_atendimento,
		 itreg_amb.cd_prestador,
		 itreg_amb.cd_con_pla,
		 itreg_amb.cd_convenio,
		 vl_honorario_unitario,
		 vl_operacional_unitario,
		 cd_ati_med,
		 cd_pres_con,
		 vl_percentual_paciente,
		 vl_filme_unitario,
		 vl_total_conta,
		 sn_fatura_impressa,
		 sn_fechada,
		 cd_importa_reg_amb,
		 sn_conta_calculada,
		 itreg_amb.cd_guia,
		 sn_pertence_pacote,
		 dt_fechamento,
		 nm_usuario_fechou,
		 vl_desconto_fechamento,
		 vl_acrescimo_fechamento,
		 vl_conta_no_fechamento,
		 vl_base_repassado,
		 itreg_amb.cd_motivo_glosa,
		 qt_ch_unitario,
		 vl_percentual_multipla,
		 tp_pagamento,
		 cd_setor_produziu,
		 cd_setor,
		 cd_padrao,
		 sn_horario_especial,
		 cd_reg_amb_pai,
		 cd_lancamento_pai,
		 cd_franquia,
		 cd_regra_acoplamento,
		 vl_perc_acoplamento,
		 sn_paciente_paga,
		 cd_regra_atendimento,
		 cd_regra_atendimento_pro_fat,
		 cd_franquia_valor_total,
		 cd_reg_amb_rel,
		 cd_lancamento_rel,
		 cd_itmvto,
		 cd_usuario,
		 cd_mvto,
		 tp_mvto,
		 hr_lancamento_final,
		 sn_repassou_virtual,
		 sn_pronta,
		 vl_desconto_conta,
		 dt_sessao,
		 tp_mvto_desconto,
		 tp_desconto,
		 vl_nota,
		 sn_repassado,
		 fator_relacionado,
		 itreg_amb.nr_seq_preimpre,
		 cd_conta_kit,
--		 ds_observacao_franquia,    -- na poca esta coluna no existia.
		 cd_lancamento_reg_lanc,
		 cd_regra_lancamento,
        -- PDA 209574 (Inicio) - Henrique Antunes - 21/12/2007
        --cd_conta_pacote,
        -- PDA 216917 (Inicio) - Henrique Antunes - 13/02/2008
        --null,
        conta_pacote.cd_pacote,
        -- PDA 216917 (Fim)
        -- PDA 209574 (Fim)
	     sn_regra_lancamento,
        nr_difep
	    from dbamv.itreg_amb_espelho itreg_amb
                              , dbamv.conta_pacote
                              , dbamv.atendime
                        where itreg_amb.cd_reg_amb	= p_nCdConta
                          and conta_pacote.cd_conta_pacote(+) = itreg_amb.cd_conta_pacote
                          and itreg_amb.cd_atendimento    = p_nCdAtend
                          and itreg_amb.cd_lancamento_rel is NULL
                          and atendime.cd_atendimento = itreg_amb.cd_atendimento
                          and 'S' = dbamv.pack_ffcv_espelho.FNC_EXCLUI_SUBSTITUI_PROC(atendime.tp_atendimento,
                                                                                       itreg_amb.cd_reg_amb,
                                                                                       itreg_amb.cd_lancamento,
                                                                                       itreg_amb.cd_pro_fat,
                                                                                       itreg_amb.hr_lancamento,
                                                                                       itreg_amb.cd_setor,
                                                                                       atendime.cd_convenio,
                                                                                       atendime.cd_con_pla)
                          );
    --inserir os itens que tem relacionado
     insert into dbamv.log_itreg_amb_reg_lanc
       ( cd_reg_amb,
		 cd_lancamento,
		 hr_lancamento,
		 qt_lancamento,
		 vl_unitario,
		 vl_acrescimo,
		 vl_desconto,
		 cd_gru_fat,
		 cd_pro_fat,
		 cd_atendimento,
		 cd_prestador,
		 cd_con_pla,
		 cd_convenio,
		 vl_honorario_unitario,
		 vl_operacional_unitario,
		 cd_ati_med,
		 cd_pres_con,
		 vl_percentual_paciente,
		 vl_filme_unitario,
		 vl_total_conta,
		 sn_fatura_impressa,
		 sn_fechada,
		 cd_importa_reg_amb,
		 sn_conta_calculada,
		 cd_guia,
		 sn_pertence_pacote,
		 dt_fechamento,
		 nm_usuario_fechou,
		 vl_desconto_fechamento,
		 vl_acrescimo_fechamento,
		 vl_conta_no_fechamento,
		 vl_base_repassado,
		 cd_motivo_glosa,
		 qt_ch_unitario,
		 vl_percentual_multipla,
		 tp_pagamento,
		 cd_setor_produziu,
		 cd_setor,
		 cd_padrao,
		 sn_horario_especial,
		 cd_reg_amb_pai,
		 cd_lancamento_pai,
		 cd_franquia,
		 cd_regra_acoplamento,
		 vl_perc_acoplamento,
		 sn_paciente_paga,
		 cd_regra_atendimento,
		 cd_regra_atendimento_pro_fat,
		 cd_franquia_valor_total,
		 cd_reg_amb_rel,
		 cd_lancamento_rel,
		 cd_itmvto,
		 cd_usuario,
		 cd_mvto,
		 tp_mvto,
		 hr_lancamento_final,
		 sn_repassou_virtual,
		 sn_pronta,
		 vl_desconto_conta,
		 dt_sessao,
		 tp_mvto_desconto,
		 tp_desconto,
		 vl_nota,
		 sn_repassado,
		 fator_relacionado,
		 nr_seq_preimpre,
		 cd_conta_kit,
--		 ds_observacao_franquia,    -- na poca esta coluna no existia na itreg_amb.
		 cd_lancamento_reg_lanc,
		 cd_regra_lancamento,
		 cd_conta_pacote,
		 sn_regra_lancamento,
        nr_difep
        )
    ( select itreg_amb.cd_reg_amb,
    -- PDA 216917 (Fim)
		 cd_lancamento,
		 hr_lancamento,
		 qt_lancamento,
		 vl_unitario,
		 vl_acrescimo,
		 vl_desconto,
		 cd_gru_fat,
         cd_pro_fat,
		 itreg_amb.cd_atendimento,
		 itreg_amb.cd_prestador,
		 itreg_amb.cd_con_pla,
		 itreg_amb.cd_convenio,
		 vl_honorario_unitario,
		 vl_operacional_unitario,
		 cd_ati_med,
		 cd_pres_con,
		 vl_percentual_paciente,
		 vl_filme_unitario,
		 vl_total_conta,
		 sn_fatura_impressa,
		 sn_fechada,
		 cd_importa_reg_amb,
		 sn_conta_calculada,
		 itreg_amb.cd_guia,
		 sn_pertence_pacote,
		 dt_fechamento,
		 nm_usuario_fechou,
		 vl_desconto_fechamento,
		 vl_acrescimo_fechamento,
		 vl_conta_no_fechamento,
		 vl_base_repassado,
		 cd_motivo_glosa,
		 qt_ch_unitario,
		 vl_percentual_multipla,
		 tp_pagamento,
		 cd_setor_produziu,
		 cd_setor,
		 cd_padrao,
		 sn_horario_especial,
		 cd_reg_amb_pai,
		 cd_lancamento_pai,
		 cd_franquia,
		 cd_regra_acoplamento,
		 vl_perc_acoplamento,
		 sn_paciente_paga,
		 cd_regra_atendimento,
		 cd_regra_atendimento_pro_fat,
		 cd_franquia_valor_total,
		 cd_reg_amb_rel,
		 cd_lancamento_rel,
		 cd_itmvto,
		 cd_usuario,
		 cd_mvto,
		 tp_mvto,
		 hr_lancamento_final,
		 sn_repassou_virtual,
		 sn_pronta,
		 vl_desconto_conta,
		 dt_sessao,
		 tp_mvto_desconto,
		 tp_desconto,
		 vl_nota,
		 sn_repassado,
		 fator_relacionado,
		 itreg_amb.nr_seq_preimpre,
		 cd_conta_kit,
		 cd_lancamento_reg_lanc,
		 cd_regra_lancamento,
        conta_pacote.cd_pacote,
	     sn_regra_lancamento,
        nr_difep
                         from dbamv.itreg_amb_espelho itreg_amb
                             ,dbamv.conta_pacote
                             , dbamv.atendime
                        where itreg_amb.cd_reg_amb	= p_nCdConta
                          and conta_pacote.cd_conta_pacote(+) = itreg_amb.cd_conta_pacote
                          and itreg_amb.cd_atendimento    = p_nCdAtend
                          and cd_lancamento_rel is not NULL
                          and atendime.cd_atendimento = itreg_amb.cd_atendimento
                          and 'S' = dbamv.pack_ffcv_espelho.FNC_EXCLUI_SUBSTITUI_PROC(atendime.tp_atendimento,
                                                                                       itreg_amb.cd_reg_amb,
                                                                                       itreg_amb.cd_lancamento,
                                                                                       itreg_amb.cd_pro_fat,
                                                                                       itreg_amb.hr_lancamento,
                                                                                       itreg_amb.cd_setor,
                                                                                       atendime.cd_convenio,
                                                                                       atendime.cd_con_pla)
                          );
     delete from dbamv.log_itreg_AMB_reg_lanc l
     where l.cd_reg_AMB = p_nCdConta
       and exists (select 1
                   from dbamv.conta_pacote c
                   where c.cd_reg_AMB = l.cd_reg_AMB
                     and c.cd_lancamento_AMB = l.cd_lancamento);
     -- PDA 209574 (Fim)
   insert into  dbamv.log_itcob_pre_ambu_reg_lanc
    ( cd_reg_amb ,
      cd_lancamento ,
      cd_fornecedor ,
      nr_documento ,
      vl_preco_unitario,
      vl_preco_total,
      ds_observacao)
    ( select cd_reg_amb ,
      cd_lancamento ,
      cd_fornecedor ,
      nr_documento ,
      vl_preco_unitario,
      vl_preco_total,
      ds_observacao
                    from dbamv.itcob_pre_ambu_espelho itcob_pre_ambu
                    where cd_reg_amb = p_nCdConta
                      and exists (select cd_lancamento
                                    from dbamv.itreg_amb_espelho itreg_amb, dbamv.atendime
                                   where cd_reg_Amb = p_nCdConta
                                     and itreg_amb.cd_atendimento = p_nCdAtend
                                     and cd_reg_Amb = itcob_pre_ambu.cd_reg_amb
                                     and cd_lancamento = itcob_pre_ambu.cd_lancamento
                                     and atendime.cd_atendimento = itreg_amb.cd_atendimento
                                     and 'S' = dbamv.pack_ffcv_espelho.FNC_EXCLUI_SUBSTITUI_PROC(atendime.tp_atendimento,
                                                                                       itreg_amb.cd_reg_amb,
                                                                                       itreg_amb.cd_lancamento,
                                                                                       itreg_amb.cd_pro_fat,
                                                                                       itreg_amb.hr_lancamento,
                                                                                       itreg_amb.cd_setor,
                                                                                       atendime.cd_convenio,
                                                                                       atendime.cd_con_pla)
                                      )
                          );
     END IF;--30/12/2008
   end if; --if p_vTpConta = 'H' then
  else --if p_vTpAcao = 'F' then   -- Fazer
   if p_vTpAcao = 'D' then   -- Desfazer
    --06/01/2009
   open LogItensFat;
   fetch LogItensFat into nLogItensFat;
   close LogItensFat;
   open LogItensAmb;
   fetch LogItensAmb into nLogItensAmb;
   close LogItensAmb;
    --06/01/2009
  dbamv.pack_ffcv_regra_lancamento.PRC_ATRIBUI_EXCLUSAO_REGRA(p_nCdConta); --pda 240515 - Pedro Neiva - 29/07/2008
  if p_vTpConta = 'H' then
     if nLogItensFat > 0 then
       update dbamv.reg_fat set sn_regra_lancamento='N' where cd_reg_fat	= p_nCdConta
          and exists  (Select 'X'
                         from dbamv.itreg_fat_espelho itreg_fat
                        where itreg_fat.cd_reg_fat = reg_fat.cd_reg_fat);
       delete from dbamv.log_itcob_pre_reg_lanc
        where  cd_reg_fat	= p_nCdConta
          and exists  (Select 'X'
                         from dbamv.log_itreg_fat_reg_lanc itreg_fat
                        where itreg_fat.cd_lancamento = log_itcob_pre_reg_lanc.cd_lancamento
                          and itreg_fat.cd_reg_fat = log_itcob_pre_reg_lanc.cd_reg_fat);
       delete from dbamv.log_itlan_med_reg_lanc
        where  cd_reg_fat	= p_nCdConta
          and exists  (Select 'X'
                         from dbamv.log_itreg_fat_reg_lanc itreg_fat
                        where itreg_fat.cd_lancamento = log_itlan_med_reg_lanc.cd_lancamento
                          and itreg_fat.cd_reg_fat = log_itlan_med_reg_lanc.cd_reg_fat);
       delete  dbamv.log_itreg_fat_reg_lanc
        where   cd_reg_fat	= p_nCdConta;
    end if ; --06/01/2009
  else --if p_vTpConta = 'H' then
     IF nLogItensAmb > 0 then --01/06/2008
      update dbamv.itreg_amb_espelho set sn_regra_lancamento='N'
      where cd_reg_amb = p_nCdConta
       and  decode(p_nCdAtend, null, 1,cd_atendimento) = decode(p_nCdAtend, null, 1,p_nCdAtend) ;
      delete from dbamv.log_itcob_pre_ambu_reg_lanc
       where  cd_reg_amb	= p_nCdConta and exists (select cd_lancamento
                                                       from dbamv.log_itreg_amb_reg_lanc itreg_amb
                                                      where cd_reg_Amb = p_nCdConta
                                                        and cd_atendimento = p_nCdAtend
                                                        and cd_reg_Amb = log_itcob_pre_ambu_reg_lanc.cd_reg_amb
                                                        and cd_lancamento = log_itcob_pre_ambu_reg_lanc.cd_lancamento );
    	delete from dbamv.log_itreg_amb_reg_lanc
   	     where cd_reg_amb	      = p_nCdConta
           and cd_atendimento    = p_nCdAtend;
       -- PDA 157007 (Fim)
     end if;--06/01/2009
	end if; --if p_vTpConta = 'H' then
   end if; --if p_vTpAcao = 'D' then   -- Desfazer
  end if; --if p_vTpAcao = 'F' then   -- Fazer
END; --PROCEDURE PRC_FFCV_REPLICA_ITENS_CONTA
FUNCTION FNC_APLICA_REGRA_LANCAMENTO
        (p_nCdConvenio      in number,
         p_nCdConPla        in number,
         p_nCdMultiEmpresa  in number,
         p_nCdConta         in number,
         p_nCdAtend         in number,
         p_dDataIni         in date ,
         p_dDataFim         in date)  return varchar IS
/*******************************************************************************************
AUTOR..........: Intersolution
DATA ..........: 19/11/2006
FUNCIONALIDADE.: Aplicar regras de Lançamento.
********************************************************************************************/
-- Keilla (inicio)
cursor cRegra( pvtipo in varchar2, nCdSetor in number, vProfat in varchar2, dDtLanc in date) is
 -- a regra tem restrio de plano e setor aceita
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, regra_lancamento.cd_gru_pro_sub, '4' grau , regra_lancamento.cd_pro_fat /* pda 170544 - acrescentado regra_lancamento.cd_gru_pro_sub */
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = p_nCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = p_nCdConPla )
     and exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor  = nCdSetor )
UNION ALL
    -- RESTRINGE APENAS POR PLANO
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
    , regra_lancamento.cd_pro_fat_subordinado, regra_lancamento.cd_gru_pro_sub, '3' grau , regra_lancamento.cd_pro_fat /* pda 170544 - acrescentado regra_lancamento.cd_gru_pro_sub */
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = p_nCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_con_pla = p_nCdConPla   )
       and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                 and cd_setor = nCdSetor )
  UNION ALL
    --- RESTRINGE APENAS POR SETOR
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
  , regra_lancamento.cd_pro_fat_subordinado, regra_lancamento.cd_gru_pro_sub, '2' grau , regra_lancamento.cd_pro_fat /* pda 170544 - acrescentado regra_lancamento.cd_gru_pro_sub */
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = p_nCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists (  select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados   )
     and exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados
	                and cd_setor = nCdSetor  )
     -- NAO RESTRINGE POR PLANO NEM POR SETOR
  UNION ALL
  select regra_lancamento.cd_regra_lancamento,  regra_lancamento.tp_acao, reg_rel.cd_regra_lanc_relacionados
        , regra_lancamento.cd_pro_fat_subordinado, regra_lancamento.cd_gru_pro_sub, '1' grau , regra_lancamento.cd_pro_fat /* pda 170544 - acrescentado regra_lancamento.cd_gru_pro_sub */
    from dbamv.regra_lancamento , dbamv.regra_lancamento_relacionados  reg_rel
     where cd_pro_fat = vProfat
      and trunc(dt_ini_vigencia) <= trunc(dDtLanc)
      and trunc(nvl(dt_fim_vigencia,sysdate)) >= trunc(nvl(dDtLanc,sysdate))
      and reg_rel.cd_regra_lancamento = regra_lancamento.cd_regra_lancamento
      and reg_rel.cd_convenio = p_nCdConvenio
      and ( reg_rel.cd_multi_empresa = p_nCdMultiEmpresa or reg_rel.cd_multi_empresa is null)
      and decode(pvtipo,'A',reg_rel.sn_ambulatorial,'N') = decode(pvtipo,'A','S','N')
      and decode(pvtipo,'I',reg_rel.sn_internacao,'N') = decode(pvtipo,'I','S','N')
      and decode(pvtipo,'E',reg_rel.sn_externo,'N') = decode(pvtipo,'E','S','N')
      and decode(pvtipo,'H',reg_rel.sn_hoca,'N') = decode(pvtipo,'H','S','N')
      and decode(pvtipo,'U',reg_rel.sn_urgencia_emergencia,'N') = decode(pvtipo,'U','S','N')
	  and NOT exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_plano
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
     and not exists ( select cd_regra_lanc_relacionados from dbamv.regra_lancamento_relac_setor
	                where  cd_regra_lanc_relacionados = reg_rel.cd_regra_lanc_relacionados )
   -- PDA (Inicio) - Henrique Antunes - 23/04/2007
   --order by grau  desc;
   order by grau  desc , 2 desc;
   -- PDA (Fim)
 --verificar se tem setor subordinado.
 CURSOR cSetorSubor (pCdRegralanc in number) IS
  select  cd_setor
  from  dbamv.setor_pro_fat_subordinado
  where cd_regra_lancamento = pCdRegralanc;
 vProibicao     varchar2(2);
 nSetorSubor    number(10);          -- indica se tem setor subordinado.
 nEquipeMed     number(2);          -- indica se tem equipe mdica.
 bProbPreco     boolean;            -- indica problema de preo.
 bGuiaObrig     boolean;            -- indica se guia  obrigatria.
 nCdGuia        dbamv.itreg_fat.cd_guia%type;
 nGuiaPendente  number;
 nCdLancamento  dbamv.itreg_fat.cd_lancamento%type;
Cursor  CitensRegFat is
  select it.cd_lancamento, it.cd_setor_produziu cd_setor, it.cd_reg_fat_pai, it.cd_lancamento_pai, it.cd_lancamento_rel, it.cd_pro_fat
        ,it.dt_lancamento, it.hr_lancamento, r.cd_tip_acom, it.qt_lancamento, it.cd_prestador, it.cd_ati_med, a.cd_prestador  prestador_atend
        ,it.tp_pagamento tp_pagamento  /* PDA 525319*/
   from dbamv.itreg_fat_espelho it, dbamv.reg_fat r, dbamv.atendime a
    where r.cd_reg_fat = p_nCdConta
     and r.cd_reg_fat = it.cd_reg_fat
     and Nvl(it.tp_mvto, 'X') <> 'Regra Lança' -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
     and a.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa
     -- PDA 157007 (Inicio) - Henrique Antunes  - 01/06/2007
     and exists (select 'x' from dbamv.regra_lancamento rl where rl.cd_pro_fat = it.cd_pro_fat)
     -- PDA 157007 (Fim)
     and r.cd_atendimento = a.cd_atendimento
     order by cd_pro_fat;
Cursor CitensRegAmb is
  select it.cd_lancamento, it.cd_setor_produziu cd_setor, it.cd_reg_amb_pai, it.cd_lancamento_pai, it.cd_lancamento_rel, it.cd_pro_fat
        ,a.dt_atendimento dt_lancamento, it.hr_lancamento,  a.cd_tip_acom, it.qt_lancamento, it.cd_prestador,
        it.cd_ati_med, a.cd_prestador  prestador_atend
        ,it.tp_pagamento tp_pagamento  /* PDA 525319*/
   from dbamv.itreg_amb_espelho it, dbamv.atendime a
    where it.cd_reg_amb = p_nCdConta
     and a.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa
     and it.cd_atendimento = p_nCdAtend
     and  it.cd_atendimento = a.cd_atendimento
     and Nvl(it.tp_mvto, 'X') <> 'Regra Lança'
     order by cd_pro_fat;
/* fim pda 365312*/
Cursor cTipoAtend is
  select tp_atendimento
  from dbamv.atendime
   where cd_atendimento = p_nCdAtend
     and atendime.cd_multi_empresa = dbamv.Pkg_Mv2000.Le_Empresa;
 cursor cGruFat (vProc in varchar2) is
   select gp.cd_gru_fat
    from dbamv.gru_pro gp, dbamv.pro_fat pro
     where pro.cd_gru_pro = gp.cd_gru_pro
      and pro.cd_pro_fat = vProc ;
   CURSOR c_forapre (
      nconv   IN   NUMBER
     ,ngrfa   IN   NUMBER
   ) IS
      SELECT NVL (itfor_apre.sn_cadastra_crm, 'N') sn_prestador,
             nvl( itfor_apre.sn_cadastra_ati_med, 'N' ) sn_ati_med              /* pda 525319*/
        FROM dbamv.itfor_apre
            ,dbamv.for_apre
            ,dbamv.convenio
       WHERE convenio.cd_convenio = nconv
         AND for_apre.cd_for_apre = convenio.cd_for_apre
         AND itfor_apre.cd_for_apre = for_apre.cd_for_apre
         AND itfor_apre.cd_gru_fat = ngrfa;
Cursor cSetor (nRegra in number, nSetor in number) is
select cd_setor
from dbamv.setor_pro_fat_subordinado
where cd_regra_lancamento = nRegra
  and cd_setor = nSetor;
 csn_prestador    varchar2(1);
 nCdPrestador     number;
 ccdatimed        varchar(2);
 vTipoAtend varchar2(1):=null;
 nExiste  number:=null;
 vMensRetorno varchar2(1000):=null;
 bTemPreco boolean;
 nCodGruFat dbamv.gru_fat.cd_gru_fat%type;
 ncdSetor dbamv.setor.cd_setor%type;
 nGrau  number(1):=null;
 cursor cAtimedClin is
  select cd_ati_med_clinico
   from dbamv.config_ffcv
    where cd_multi_empresa = dbamv.pkg_mv2000.le_empresa;
cSnAtiMed        dbamv.itfor_apre.sn_cadastra_ati_med%type;                   /* pda 525319 */
vTpPagamento     dbamv.itreg_fat.tp_pagamento%type;                           /* pda 525319 */
BEGIN
  open cTipoAtend;
  fetch cTipoAtend into vTipoAtend;
  close cTipoAtend;
dbamv.pack_ffcv_regra_lancamento.PRC_ATRIBUI_EXCLUSAO_REGRA(p_nCdConta); --pda 240515 - Pedro Neiva - 29/07/2008
if vTipoAtend = 'I' then
  nSetorSubor:=null;
   if CitensRegFat%isopen then
       close CitensRegFat;
   end if;
  for vItensRegFat in  CitensRegFat loop -- v se tem regra para cada item da conta
    -- nGrau:=null;
     if cRegra%isopen then
       close cRegra;
   end if;
    for vRegra in cRegra(vTipoAtend, vItensRegFat.cd_setor, vItensRegFat.cd_pro_fat , vItensRegFat.dt_lancamento) loop
      --if nvl(ngrau,vRegra.grau) = vRegra.grau then --(o usurio no deixa executar apenas a regra mais restrita,
     -- sero executadas por procedimento na seguinte ordem : Substituio, Incluso, Excluso por procedimento
      -- tem restrio por setor
     if cSetorSubor%isopen then
       close cSetorSubor;
     end if;
      nSetorSubor:= null; /* pda 170544 */
      open cSetorSubor(vRegra.cd_regra_lancamento);
      fetch cSetorSubor into nSetorSubor;
      close cSetorSubor;
       if vRegra.tp_acao = 'E' then -- excluso
            if nSetorSubor is not null then  -- existe restrio por setor
                  delete from dbamv.itreg_fat_espelho
                   where cd_reg_fat =  p_nCdConta
                   and Nvl(tp_mvto, 'X') <> 'Regra Lança'
                    and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                                 and (cd_pro_fat = vregra.cd_pro_fat_subordinado
                                                       or cd_pro_fat in ( select cd_pro_fat
                                                                          from dbamv.pro_fat where cd_gru_pro = vregra.cd_gru_pro_sub)
                                                      )
                                                 and cd_setor_produziu in ( select cd_setor
                                                                    from dbamv.setor_pro_fat_subordinado
                                                                     where cd_regra_lancamento = vregra.cd_regra_lancamento)
                                               and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                                                and vItensRegFat.cd_lancamento = cd_lancamento
                                              );
                     delete from dbamv.itreg_fat_espelho
                   where cd_reg_fat =  p_nCdConta
                   and Nvl(tp_mvto, 'X') <> 'Regra Lança'
                    and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                                 and (cd_pro_fat = vregra.cd_pro_fat_subordinado
                                                       or cd_pro_fat in ( select cd_pro_fat
                                                                          from dbamv.pro_fat where cd_gru_pro = vregra.cd_gru_pro_sub)
                                                      )
                                                 and cd_setor_produziu in ( select cd_setor
                                                                    from dbamv.setor_pro_fat_subordinado
                                                                     where cd_regra_lancamento = vregra.cd_regra_lancamento)
                                               and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat
                                              );
                  -- exclui equipe mdica
                   delete from dbamv.itlan_med_espelho itlan_med
                    where cd_reg_fat = p_nCdConta
                      --pda 271215(Incio) - 10/02/2009 - Pedro Neiva
                      and exists  (Select 'X'
                                     from dbamv.itreg_fat_espelho itreg_fat
                                    where itreg_fat.cd_lancamento = itlan_med.cd_lancamento
                                      and itreg_fat.cd_reg_fat = itlan_med.cd_reg_fat)
                    and cd_lancamento in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                                 and (cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat
                                                                      from dbamv.pro_fat where cd_gru_pro = vregra.cd_gru_pro_sub)
                                                      )
                                                 and cd_setor_produziu in ( select cd_setor
                                                                    from dbamv.setor_pro_fat_subordinado
                                                                     where cd_regra_lancamento = vregra.cd_regra_lancamento)
                                                  and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                                                and vItensRegFat.cd_lancamento = cd_lancamento
                                           );
                  delete from dbamv.itlan_med_espelho itlan_med
                    where cd_reg_fat = p_nCdConta
                      --pda 271215(Incio) - 10/02/2009 - Pedro Neiva
                      and exists  (Select 'X'
                                     from dbamv.itreg_fat_espelho itreg_fat
                                    where itreg_fat.cd_lancamento = itlan_med.cd_lancamento
                                      and itreg_fat.cd_reg_fat = itlan_med.cd_reg_fat)
                    and cd_lancamento in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                                 and (cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat
                                                                      from dbamv.pro_fat where cd_gru_pro = vregra.cd_gru_pro_sub)
                                                      )
                                                 and cd_setor_produziu in ( select cd_setor
                                                                    from dbamv.setor_pro_fat_subordinado
                                                                     where cd_regra_lancamento = vregra.cd_regra_lancamento)
                                                  and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat
                                          );
                  -- exclui itens da conta
                   delete from dbamv.itreg_fat_espelho
                    where cd_reg_fat =  p_nCdConta
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'
                    and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                          cd_pro_fat in ( select cd_pro_fat
                                             from dbamv.pro_fat where cd_gru_pro = vregra.cd_gru_pro_sub)
                        )
                     and cd_setor_produziu in ( select cd_setor from dbamv.setor_pro_fat_subordinado
                                       where cd_regra_lancamento = vregra.cd_regra_lancamento)
                     and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                     and vItensRegFat.cd_lancamento = cd_lancamento;
                     delete from dbamv.itreg_fat_espelho
                    where cd_reg_fat =  p_nCdConta
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'
                    and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                          cd_pro_fat in ( select cd_pro_fat
                                             from dbamv.pro_fat where cd_gru_pro = vregra.cd_gru_pro_sub)
                        )
                     /* pda 170544 fim */
                     and cd_setor_produziu in ( select cd_setor from dbamv.setor_pro_fat_subordinado
                                       where cd_regra_lancamento = vregra.cd_regra_lancamento)
                     and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat;
           /* fim pda 365312*/
            else -- no tem restrio por setor.
                  delete from dbamv.itreg_fat_espelho
                    where cd_reg_fat =  p_nCdConta
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                     and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                                 /* pda 170544 inicio
                                                 and cd_pro_fat = vregra.cd_pro_fat_subordinado */
                                                and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                      where cd_gru_pro = vregra.cd_gru_pro_sub )
                                                     )
                                                 /* pda 170544 fim */
                                                  and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                                                and vItensRegFat.cd_lancamento = cd_lancamento);
                   delete from dbamv.itreg_fat_espelho
                    where cd_reg_fat =  p_nCdConta
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                     and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                                 /* pda 170544 inicio
                                                 and cd_pro_fat = vregra.cd_pro_fat_subordinado */
                                                and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                      where cd_gru_pro = vregra.cd_gru_pro_sub )
                                                     )
                                                 /* pda 170544 fim */
                                                  and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat);
                 -- exclui equipe mdica
                    delete from dbamv.itlan_med_espelho itlan_med
                    where  cd_reg_fat = p_nCdConta
                  --pda 271215(Incio) - 10/02/2009 - Pedro Neiva
                      and exists  (Select 'X'
                                     from dbamv.itreg_fat_espelho itreg_fat
                                    where itreg_fat.cd_lancamento = itlan_med.cd_lancamento
                                      and itreg_fat.cd_reg_fat = itlan_med.cd_reg_fat)
                     and cd_lancamento  in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                              /* pda 170544 inicio
                                              and cd_pro_fat = vregra.cd_pro_fat_subordinado */
                                              and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                    cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                    where cd_gru_pro = vregra.cd_gru_pro_sub )
                                                and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                                                and vItensRegFat.cd_lancamento = cd_lancamento
                                                  )
                                              /* pda 170544 fim */
                                            );
                    delete from dbamv.itlan_med_espelho itlan_med
                    where  cd_reg_fat = p_nCdConta
                  --pda 271215(Incio) - 10/02/2009 - Pedro Neiva
                      and exists  (Select 'X'
                                     from dbamv.itreg_fat_espelho itreg_fat
                                    where itreg_fat.cd_lancamento = itlan_med.cd_lancamento
                                      and itreg_fat.cd_reg_fat = itlan_med.cd_reg_fat)
                     and cd_lancamento  in (select cd_lancamento
                                               from dbamv.itreg_fat_espelho
                                               where cd_reg_fat = p_nCdConta
                                              /* pda 170544 inicio
                                              and cd_pro_fat = vregra.cd_pro_fat_subordinado */
                                              and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                    cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                    where cd_gru_pro = vregra.cd_gru_pro_sub )
                                               and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat
                                                  )
                                              /* pda 170544 fim */
                                            );
                   -- exclui itens da conta
                   delete from dbamv.itreg_fat_espelho
                    where cd_reg_fat =  p_nCdConta
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                    /* pda 170544 inicio
                    and cd_pro_fat = vregra.cd_pro_fat_subordinado */
                    and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                          cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                          where cd_gru_pro = vregra.cd_gru_pro_sub)
                        )
                        and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                     and vItensRegFat.cd_lancamento = cd_lancamento;
                   delete from dbamv.itreg_fat_espelho
                    where cd_reg_fat =  p_nCdConta
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                    /* pda 170544 inicio
                    and cd_pro_fat = vregra.cd_pro_fat_subordinado */
                    and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                          cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                          where cd_gru_pro = vregra.cd_gru_pro_sub)
                        )
                and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat;
                     /* pda 170544 fim */
            end if;
           else -- Substituio / Insero
             -- verificar problema de preo
          bTemPreco := dbamv.val_proc_ffcv_resumido( cprocedimento => vRegra.cd_pro_fat_subordinado||vitensRegFat.cd_setor --nCdSetor --pda 233642- 11/06/2008- Pedro Neiva  --PDA 194962 - Pedro Neiva - 23/08/2007
                                                        ,ddatarefer    => vitensRegFat.dt_lancamento,
                                                        dhorarefer    => vitensRegFat.hr_lancamento,
                                                        ncodconvenio  => p_nCdConvenio,
                                                        ncodplano     => p_nCdConPla,
                                                        ctipoatend    => vTipoAtend,
                                                        ncodtipoaco   => vitensRegFat.cd_tip_acom,
                                                        cretmsg       => vMensRetorno,
                                                        cTipoProduto  => null,
                                                        nProduto      => null );
             if not bTemPreco THEN
                ROLLBACK;
                return 'Procedimento ' || vRegra.cd_pro_fat_subordinado || ' no tem preo cadastrado. Regra de Lançamento ' || vRegra.cd_regra_lancamento || ' no pode ser aplicada.';
             end if;
             -- verificar proibio.
             vProibicao:=null;
             if dbamv.pack_lanca_ffcv.c_proibicao%isopen then
                close dbamv.pack_lanca_ffcv.c_proibicao;
             end if;
             open dbamv.pack_lanca_ffcv.c_proibicao( vRegra.cd_pro_fat_subordinado
                                                    ,p_nCdConvenio
                                                    ,p_nCdConPla
                                                    ,vTipoAtend
                                                    ,vitensRegFat.dt_lancamento
                                                    ,vitensRegFat.cd_setor  );
             fetch dbamv.pack_lanca_ffcv.c_proibicao into vProibicao;
             close dbamv.pack_lanca_ffcv.c_proibicao;
             if nvl(vProibicao,'XX') = 'NA' then -- no-autorizado
                ROLLBACK;
                return 'Procedimento ' || vRegra.cd_pro_fat_subordinado || ' tem proibio ''No autorizado''. Regra de Lançamento ' || vRegra.cd_regra_lancamento || ' no pode ser aplicada.';
             elsif nvl(vProibicao,'XX') = 'FC' THEN
                ROLLBACK;
                return 'Procedimento ' || vRegra.cd_pro_fat_subordinado || ' tem proibio ''Fora da conta''. Regra de Lançamento ' || vRegra.cd_regra_lancamento  || ' no pode ser aplicada.';
             elsif nvl(vProibicao,'XX') = 'AG' then
               -- verificar existncia de guia
               bGuiaObrig := dbamv.pkg_ffcv_guia.fnc_verifica_guia_obrigatoria(  p_nCdAtend
                                                                                ,p_nCdConta
                                                                                ,vRegra.cd_pro_fat_subordinado
                                                                                ,p_nCdConvenio
                                                                                ,p_nCdConPla
                                                                                ,vTipoAtend
                                                                                ,vitensRegFat.dt_lancamento
                                                                                ,vitensRegFat.cd_setor );
                if bGuiaObrig then
                   nGuiaPendente := null;
                   nCdGuia := dbamv.pkg_ffcv_guia.fnc_retorna_guia_disponivel( p_nCdAtend
                                                                              ,p_nCdConta
                                                                              ,p_nCdConvenio
                                                                              ,vRegra.cd_pro_fat_subordinado
                                                                              ,vitensRegFat.qt_lancamento
                                                                              ,vitensRegFat.cd_tip_acom
                                                                              ,'P'        -- pvTpGuia (procedimento)
                                                                              ,nGuiaPendente );
                    if nvl(nCdGuia, 0) = 0 THEN
                      ROLLBACK;
                      return 'Procedimento '||vRegra.cd_pro_fat_subordinado||' não possui guia autorizada, ou qtde insuficiente. Regra de Lançamento '||vRegra.cd_regra_lancamento||' não pode ser aplicada.';
     		        end If;
                 end if; --if bGuiaObrig then
              end if; -- nvl(vProibicao,'XX') = 'AG'
                if cGruFat%isopen then
                   close cGruFat;
                end if;
                open cGruFat (vRegra.cd_pro_fat_subordinado);
                fetch cGruFat into nCodGruFat;
                close cGruFat;
              if c_forapre%isopen then
                close c_forapre;
              end if;
                OPEN c_forapre (p_nCdConvenio, nCodGruFat);
                FETCH c_forapre INTO csn_prestador, cSnAtiMed /* pda 525319 */;
                CLOSE c_forapre;
                IF    csn_prestador = 'S' then
                      nCdPrestador := nvl(vitensRegFat.cd_prestador,vitensRegFat.prestador_atend);
                      if vitensRegFat.cd_ati_med is null then
                       if cAtimedClin%isopen then
                         close cAtimedClin;
                       end if;
                         open cAtimedClin;
                         fetch cAtimedClin into ccdatimed;
                         close cAtimedClin;
                      else
                        ccdatimed := vitensRegFat.cd_ati_med;
                      end if;
                else
                      ccdatimed := null;
                      nCdPrestador := null;
                END IF;
                /* pda 525319 Início - Só preencher atividade médica se a configuração exigir. */
                  if cSnAtiMed = 'N' then
                    ccdatimed := null;
                  end if;
                  /* pda 525319  Se o prestador for nulo, a forma de pagamento também será nula. */
                  if nCdPrestador is null then
                    vTpPagamento := null;
                  else
                    vTpPagamento := vitensRegFat.tp_pagamento;
                  end if;
			          /* pda 525319 - fim */
                if vRegra.tp_acao = 'S' then -- substituio
                  begin
                  update dbamv.itreg_fat_espelho
                   set cd_pro_fat = nvl(vRegra.cd_pro_fat_subordinado,cd_pro_fat)
                      ,vl_filme_unitario = null
                      ,vl_acrescimo = null
                      ,vl_desconto = null
                      ,cd_gru_fat  = nvl(nCodGruFat,cd_gru_fat)
                      ,vl_unitario = null
                      ,vl_honorario_unitario = null
                      ,vl_operacional_unitario = null
                      ,vl_total_conta = null
                      ,tp_mvto = 'Regra Lança'
                      ,cd_mvto = null
                      ,cd_itmvto = null
                      ,cd_prestador = nCdPrestador
                      ,cd_ati_med = cCdAtiMed
                      ,cd_lancamento_reg_lanc = null --vitensRegFat.cd_lancamento
                      ,cd_regra_lancamento = vRegra.cd_Regra_Lancamento
                    where cd_reg_fat = p_nCdConta
                     and cd_lancamento = vitensRegFat.cd_lancamento;
                  exception
                  when others then
                    raise_application_error (-20044, 'Erro ' || SQLCODE || ' ** ' || SQLERRM);
                  end;
              elsif vRegra.tp_acao = 'I' then  -- incluso
                -- selecionar o novo Lançamento.
                 select max(cd_lancamento) + 1 into nCdLancamento
                  from dbamv.itreg_fat_espelho
                   where cd_reg_fat = p_nCdConta;
                 begin
                 insert into dbamv.itreg_fat_espelho( cd_reg_fat,
                                     		  cd_lancamento,
		                                      dt_lancamento,
		                                      hr_lancamento,
		                                      qt_lancamento,
		                                      vl_percentual_multipla,
		                                      vl_unitario,
		                                      vl_filme_unitario,
		                                      vl_acrescimo,
		                                      vl_desconto,
		                                      cd_gru_fat,
		                                      cd_pro_fat,
		                                      cd_prestador,
		                                      nr_padrao,
		                                      vl_honorario_unitario,
		                                      vl_operacional_unitario,
		                                      cd_pres_con,
		                                      vl_percentual_paciente,
		                                      vl_total_conta,
		                                      cd_importa_reg_fat,
		                                      cd_guia,
		                                      sn_pertence_pacote,
		                                      vl_base_repassado,
		                                      cd_motivo_glosa,
		                                      qt_ch_unitario,
		                                      tp_pagamento,
		                                      cd_setor_produziu,
		                                      cd_setor,
		                                      cd_padrao,
		                                      sn_horario_especial,
		                                      qt_pontos,
		                                      sn_proced_autorizado,
		                                      tp_alta_uti_neo,
		                                      qt_peso_rn,
		                                      qt_mes_gestacao,
		                                      cd_sus,
		                                      cd_tipo_vinculo,
		                                      cd_ati_med,
		                                      vl_sp,
		                                      vl_sh,
		                                      vl_sd,
		                                      vl_ato,
		                                      cd_sus_auxiliar,
		                                      cd_reg_fat_pai,
		                                      cd_lancamento_pai,
		                                      sn_proced_realizado,
                                        	  cd_franquia,
		                                      cd_regra_acoplamento,
		                                      vl_perc_acoplamento,
		                                      sn_paciente_paga,
		                                      cd_regra_atendimento,
		                                      cd_regra_atendimento_pro_fat,
		                                      cd_reg_fat_rel,
		                                      cd_lancamento_rel,
		                                      cd_usuario,
		                                      cd_mvto,
		                                      tp_mvto,
		                                      hr_lancamento_final,
		                                      vl_desconto_conta,
		                                      sn_repassou_virtual,
		                                      vl_nota,
		                                      sn_imp_laudo_alteracao,
		                                      vl_ponto_repassado,
		                                      cd_itmvto,
		                                      sn_repassado,
		                                      fator_relacionado,
		                                      nr_seq_preimpre,
		                                      cd_conta_pai,
		                                      cd_multi_empresa,
		                                      cd_conta_kit,
		                                      tp_resultado_exame_ach,
		                                      tp_situacao_ach,
		                                      cd_geracao_ach_autorizado,
		                                      cd_lancamento_reg_lanc,
                                        	  cd_regra_lancamento,
		                                      cd_conta_pacote,
		                                      sn_calc_diferenca_acomodacao
                                          ,nr_difep
                                                )
                                            ( select cd_reg_fat,
 		                                             cd_lancamento,
                                            	     dt_lancamento,
                                            		 hr_lancamento,
                                            		 qt_lancamento,
                                            		 vl_percentual_multipla,
                                            		 vl_unitario,
                                            		 vl_filme_unitario,
                                            		 vl_acrescimo,
                                            		 vl_desconto,
                                            		 cd_gru_fat,
                                            		 cd_pro_fat,
                                            		 cd_prestador,
                                            		 nr_padrao,
		                                             vl_honorario_unitario,
		                                             vl_operacional_unitario,
		                                             cd_pres_con,
                                            		 vl_percentual_paciente,
		                                             vl_total_conta,
		                                             cd_importa_reg_fat,
                                            		 cd_guia,
                                            		 sn_pertence_pacote,
                                            		 vl_base_repassado,
                                                	 cd_motivo_glosa,
		                                             qt_ch_unitario,
		                                             tp_pagamento,
		                                             cd_setor_produziu,
		                                             cd_setor,
		                                             cd_padrao,
		                                             sn_horario_especial,
		                                             qt_pontos,
		                                             sn_proced_autorizado,
		                                             tp_alta_uti_neo,
		                                             qt_peso_rn,
		                                             qt_mes_gestacao,
                                                  	 cd_sus,
                                            		 cd_tipo_vinculo,
                                            		 cd_ati_med,
                                            		 vl_sp,
                                            		 vl_sh,
                                                	 vl_sd,
                                            		 vl_ato,
                                            		 cd_sus_auxiliar,
                                            		 cd_reg_fat_pai,
                                            		 cd_lancamento_pai,
                                            		 sn_proced_realizado,
                                            		 cd_franquia,
                                                     cd_regra_acoplamento,
                                            		 vl_perc_acoplamento,
                                            		 sn_paciente_paga,
                                                     cd_regra_atendimento,
                                            		 cd_regra_atendimento_pro_fat,
                                            		 cd_reg_fat_rel,
                                            		 cd_lancamento_rel,
                                                	 cd_usuario,
                                            		 cd_mvto,
                                            		 tp_mvto,
                                            		 hr_lancamento_final,
                                            		 vl_desconto_conta,
                                            		 sn_repassou_virtual,
                                            		 vl_nota,
                                            		 sn_imp_laudo_alteracao,
                                            		 vl_ponto_repassado,
                                            		 cd_itmvto,
                                                	 sn_repassado,
                                            		 fator_relacionado,
                                            		 nr_seq_preimpre,
                                            		 cd_conta_pai,
                                            		 cd_multi_empresa,
                                            		 cd_conta_kit,
                                            		 tp_resultado_exame_ach,
                                            		 tp_situacao_ach,
                                            		 cd_geracao_ach_autorizado,
                                            		 cd_lancamento_reg_lanc,
                                            		 cd_regra_lancamento,
		                                             cd_conta_pacote,
                                            		 sn_calc_diferenca_acomodacao
                                                    ,nr_difep
                                                    from (
                                            select cd_reg_fat,
 		                                             nCdLancamento cd_lancamento,       --cd_lancamento
                                            	     dt_lancamento,
                                            		 hr_lancamento,
                                            		 qt_lancamento,
                                            		 vl_percentual_multipla,
                                            		 null vl_unitario, --vl_unitario,
                                            		 null vl_filme_unitario, --vl_filme_unitario,
                                            		 null vl_acrescimo, --vl_acrescimo,
                                            		 null vl_desconto, --vl_desconto,
                                            		 nvl(nCodGruFat, cd_gru_fat) cd_gru_fat, --cd_gru_fat,
                                            		 nvl(vRegra.cd_pro_fat_subordinado,cd_pro_fat) cd_pro_fat,   --cd_pro_fat
                                            		 ncdprestador cd_prestador, -- cd_prestador
                                            		 nr_padrao,
		                                             null vl_honorario_unitario, --vl_honorario_unitario,
		                                             null vl_operacional_unitario, -- vl_operacional_unitario,
		                                             cd_pres_con,
                                            		 vl_percentual_paciente,
		                                             null vl_total_conta, --vl_total_conta,
		                                             cd_importa_reg_fat,
                                            		 nCdGuia cd_guia, -- cd_guia
                                            		 sn_pertence_pacote,
                                            		 null vl_base_repassado, --vl_base_repassado,
                                                	 cd_motivo_glosa,
		                                             qt_ch_unitario,
		                                             vTpPagamento tp_pagamento, -- PDA 525319
		                                             cd_setor_produziu,
		                                             cd_setor,
		                                             cd_padrao,
		                                             sn_horario_especial,
		                                             qt_pontos,
		                                             sn_proced_autorizado,
		                                             tp_alta_uti_neo,
		                                             qt_peso_rn,
		                                             qt_mes_gestacao,
                                                  	 cd_sus,
                                            		 cd_tipo_vinculo,
                                            		 ccdatimed cd_ati_med, -- cd_ati_med
                                            		 vl_sp,
                                            		 vl_sh,
                                                	 vl_sd,
                                            		 vl_ato,
                                            		 cd_sus_auxiliar,
                                            		 cd_reg_fat_pai,
                                            		 cd_lancamento_pai,
                                            		 sn_proced_realizado,
                                            		 cd_franquia,
                                                     cd_regra_acoplamento,
                                            		 vl_perc_acoplamento,
                                            		 sn_paciente_paga,
                                                     cd_regra_atendimento,
                                            		 cd_regra_atendimento_pro_fat,
                                            		 cd_reg_fat_rel,
                                            		 cd_lancamento_rel,
                                                	 cd_usuario,
                                            		 null cd_mvto,    -- cd_mvto
                                            		 'Regra Lança' tp_mvto,           -- tp_mvto
                                            		 hr_lancamento_final,
                                            		 vl_desconto_conta,
                                            		 sn_repassou_virtual,
                                            		 vl_nota,
                                            		 sn_imp_laudo_alteracao,
                                            		 vl_ponto_repassado,
                                            		 null cd_itmvto, --cd_itmvto,
                                                	 sn_repassado,
                                            		 fator_relacionado,
                                            		 nr_seq_preimpre,
                                            		 cd_conta_pai,
                                            		 cd_multi_empresa,
                                            		 cd_conta_kit,
                                            		 tp_resultado_exame_ach,
                                            		 tp_situacao_ach,
                                            		 cd_geracao_ach_autorizado,
                                            		 null cd_lancamento_reg_lanc, --cd_lancamento,    --cd_lancamento_reg_lanc
                                            		 vRegra.cd_Regra_Lancamento cd_regra_lancamento,    --cd_regra_lancamento
		                                             null cd_conta_pacote, --cd_conta_pacote,
                                            		 nvl(sn_calc_diferenca_acomodacao,'N') sn_calc_diferenca_acomodacao
                                                    ,nr_difep
                                              from  dbamv.itreg_fat_espelho
                                               where cd_reg_fat	   = p_nCdConta
                                               and cd_lancamento   = vitensRegFat.cd_lancamento
                                          UNION
                                          select cd_reg_fat,
 		                                             nCdLancamento cd_lancamento,       --cd_lancamento
                                            	     dt_lancamento,
                                            		 hr_lancamento,
                                            		 qt_lancamento,
                                            		 vl_percentual_multipla,
                                            		 null vl_unitario, --vl_unitario,
                                            		 null vl_filme_unitario, --vl_filme_unitario,
                                            		 null vl_acrescimo, --vl_acrescimo,
                                            		 null vl_desconto, --vl_desconto,
                                            		 nvl(nCodGruFat, cd_gru_fat) cd_gru_fat, --cd_gru_fat,
                                            		 nvl(vRegra.cd_pro_fat_subordinado,cd_pro_fat) cd_pro_fat,   --cd_pro_fat
                                            		 ncdprestador cd_prestador, -- cd_prestador
                                            		 nr_padrao,
		                                             null vl_honorario_unitario, --vl_honorario_unitario,
		                                             null vl_operacional_unitario, -- vl_operacional_unitario,
		                                             cd_pres_con,
                                            		 vl_percentual_paciente,
		                                             null vl_total_conta, --vl_total_conta,
		                                             cd_importa_reg_fat,
                                            		 nCdGuia cd_guia, -- cd_guia
                                            		 sn_pertence_pacote,
                                            		 null vl_base_repassado, --vl_base_repassado,
                                                	 cd_motivo_glosa,
		                                             qt_ch_unitario,
		                                             vTpPagamento tp_pagamento, -- PDA 525319
		                                             cd_setor_produziu,
		                                             cd_setor,
		                                             cd_padrao,
		                                             sn_horario_especial,
		                                             qt_pontos,
		                                             sn_proced_autorizado,
		                                             tp_alta_uti_neo,
		                                             qt_peso_rn,
		                                             qt_mes_gestacao,
                                                  	 cd_sus,
                                            		 cd_tipo_vinculo,
                                            		 ccdatimed,
                                            		 vl_sp,
                                            		 vl_sh,
                                                	 vl_sd,
                                            		 vl_ato,
                                            		 cd_sus_auxiliar,
                                            		 cd_reg_fat_pai,
                                            		 cd_lancamento_pai,
                                            		 sn_proced_realizado,
                                            		 cd_franquia,
                                                     cd_regra_acoplamento,
                                            		 vl_perc_acoplamento,
                                            		 sn_paciente_paga,
                                                     cd_regra_atendimento,
                                            		 cd_regra_atendimento_pro_fat,
                                            		 cd_reg_fat_rel,
                                            		 cd_lancamento_rel,
                                                	 cd_usuario,
                                            		 null cd_mvto,    -- cd_mvto
                                            		 'Regra Lança' tp_mvto,           -- tp_mvto
                                            		 hr_lancamento_final,
                                            		 vl_desconto_conta,
                                            		 sn_repassou_virtual,
                                            		 vl_nota,
                                            		 sn_imp_laudo_alteracao,
                                            		 vl_ponto_repassado,
                                            		 null cd_itmvto, --cd_itmvto,
                                                	 sn_repassado,
                                            		 fator_relacionado,
                                            		 nr_seq_preimpre,
                                            		 cd_conta_pai,
                                            		 cd_multi_empresa,
                                            		 cd_conta_kit,
                                            		 tp_resultado_exame_ach,
                                            		 tp_situacao_ach,
                                            		 cd_geracao_ach_autorizado,
                                            		 null cd_lancamento_reg_lanc, --cd_lancamento,    --cd_lancamento_reg_lanc
                                            		 vRegra.cd_Regra_Lancamento cd_regra_lancamento,    --cd_regra_lancamento
		                                             null cd_conta_pacote, --cd_conta_pacote,
                                            		 nvl(sn_calc_diferenca_acomodacao,'N') sn_calc_diferenca_acomodacao
                                                 ,nr_difep
                                              from  dbamv.log_itreg_fat_reg_lanc itreg_fat
                                               where cd_reg_fat	   = p_nCdConta
                                               and cd_lancamento   = vitensRegFat.cd_lancamento
                                                )  where rownum = 1
                                               );
                       exception
                       when others then
                          raise_application_error (-20045, 'Erro ' || SQLCODE || ' ** ' || SQLERRM);
                       end;
               end if; -- 'I'
           end if; -- tpAcao
        --  nGrau:= vRegra.grau;
       -- end if;
       end loop; --cregra
      end loop; -- vitensRegFat
      begin
        update dbamv.reg_fat set sn_regra_lancamento = 'S' where cd_reg_fat =  p_nCdConta;
      end;
else  -- ambulatorial
      if CitensRegAmb%isopen then
         close CitensRegAmb;
      end if;
  for vItensRegAmb in CitensRegAmb loop -- v se tem regra para cada item da conta
      -- nGrau:=null;
       if cRegra%isopen then
         close cRegra;
      end if;
    for vRegra in cRegra(vTipoAtend, vItensRegAmb.cd_setor, vItensRegAmb.cd_pro_fat , vItensRegAmb.dt_lancamento) loop
--     if nvl(ngrau,vRegra.grau) = vRegra.grau then
      nSetorSubor:=null;
      if cSetorSubor%isopen then
         close cSetorSubor;
      end if;
      nSetorSubor:= null; /* pda 170544 */
      open cSetorSubor(vRegra.cd_regra_lancamento);
      fetch cSetorSubor into nSetorSubor;
      close cSetorSubor;
      if vRegra.tp_acao = 'E' then -- excluso
            if nSetorSubor is not null then  -- existe restrio por setor
                    /* pda 365312 - thiago miranda de oliveira - alterando o cd_setor pelo cd_setor_produziu*/
                  delete from dbamv.itreg_amb_espelho
                   where cd_reg_amb =  p_nCdConta
                    and cd_Atendimento = p_nCdAtend
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                    and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_amb_espelho
                                               where cd_reg_amb = p_nCdConta
                                                 /*  pda 170544 inicio
                                                 and cd_pro_fat = vregra.cd_pro_fat_subordinado     */
                                                and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                      where cd_gru_pro = vregra.cd_gru_pro_sub )
                                                     )
                                                  /* pda 170544 fim */
                                                 and cd_Atendimento = p_nCdAtend
                                                 and cd_setor_produziu in ( select cd_setor
                                                                    from dbamv.setor_pro_fat_subordinado
                                                                     where cd_regra_lancamento = vregra.cd_regra_lancamento)
                     and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                     and vItensRegAmb.cd_lancamento = cd_lancamento
                                              )                         ;
            delete from dbamv.itreg_amb_espelho
                   where cd_reg_amb =  p_nCdConta
                    and cd_Atendimento = p_nCdAtend
                    and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                    and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_amb_espelho
                                               where cd_reg_amb = p_nCdConta
                                                 /*  pda 170544 inicio
                                                 and cd_pro_fat = vregra.cd_pro_fat_subordinado     */
                                                and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                      where cd_gru_pro = vregra.cd_gru_pro_sub )
                                                     )
                                                  /* pda 170544 fim */
                                                 and cd_Atendimento = p_nCdAtend
                                                 and cd_setor_produziu in ( select cd_setor
                                                                    from dbamv.setor_pro_fat_subordinado
                                                                     where cd_regra_lancamento = vregra.cd_regra_lancamento)
                     and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat
                                              )                         ;
                  -- exclui itens da conta
                   delete from dbamv.itreg_amb_espelho
                    where cd_reg_amb =  p_nCdConta
                     and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                           cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                            where cd_gru_pro = vregra.cd_gru_pro_sub )
                          )
                     /* pda 170544 fim */
                     and cd_Atendimento = p_nCdAtend
                     and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                      and cd_setor_produziu in ( select cd_setor from dbamv.setor_pro_fat_subordinado
                                         where cd_regra_lancamento = vregra.cd_regra_lancamento)
                        and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                     and vItensRegAmb.cd_lancamento = cd_lancamento;
                   delete from dbamv.itreg_amb_espelho
                    where cd_reg_amb =  p_nCdConta
                     and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                           cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                            where cd_gru_pro = vregra.cd_gru_pro_sub )
                          )
                     /* pda 170544 fim */
                     and cd_Atendimento = p_nCdAtend
                     and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                      and cd_setor_produziu in ( select cd_setor from dbamv.setor_pro_fat_subordinado
                                         where cd_regra_lancamento = vregra.cd_regra_lancamento)
                     and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat;
             else -- no tem restrio por setor.
                delete from dbamv.itreg_amb_espelho
                 where cd_reg_amb =  p_nCdConta
                  and cd_Atendimento = p_nCdAtend
                  and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                    and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_amb_espelho
                                               where cd_reg_amb = p_nCdConta
                                               /* pda 170544 inicio
                                                and cd_pro_fat = vregra.cd_pro_fat_subordinado   */
                                                and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                      where cd_gru_pro = vregra.cd_gru_pro_sub )
                                                     )
                                                  /* pda 170544 fim */
                                                 and cd_Atendimento = p_nCdAtend
                                           and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                                and vItensRegAmb.cd_lancamento = cd_lancamento)    ;
               delete from dbamv.itreg_amb_espelho
                 where cd_reg_amb =  p_nCdConta
                  and cd_Atendimento = p_nCdAtend
                  and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                    and cd_lancamento_rel in (select cd_lancamento
                                               from dbamv.itreg_amb_espelho
                                               where cd_reg_amb = p_nCdConta
                                               /* pda 170544 inicio
                                                and cd_pro_fat = vregra.cd_pro_fat_subordinado   */
                                                and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                                                      cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                                                      where cd_gru_pro = vregra.cd_gru_pro_sub )
                                                     )
                                                  /* pda 170544 fim */
                                                 and cd_Atendimento = p_nCdAtend
                                                 and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat)      ;
                -- exclui itens da conta
                delete from dbamv.itreg_amb_espelho
                 where cd_reg_amb =  p_nCdConta
                    and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                          cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                            where cd_gru_pro = vregra.cd_gru_pro_sub )
                        )
               /* pda 170544 fim */
                  and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                   and cd_Atendimento = p_nCdAtend
                    and vregra.cd_pro_fat_subordinado = vregra.cd_pro_fat
                     and vItensRegAmb.cd_lancamento = cd_lancamento
                  ;
                                  delete from dbamv.itreg_amb_espelho
                 where cd_reg_amb =  p_nCdConta
                    and ( cd_pro_fat = vregra.cd_pro_fat_subordinado or
                          cd_pro_fat in ( select cd_pro_fat from dbamv.pro_fat
                                            where cd_gru_pro = vregra.cd_gru_pro_sub )
                        )
               /* pda 170544 fim */
                  and Nvl(tp_mvto, 'X') <> 'Regra Lança'  -- PDA 250748 - 06/10/2008 - Diego Costa - Incluso de NVL
                   and cd_Atendimento = p_nCdAtend
                    and vregra.cd_pro_fat_subordinado <> vregra.cd_pro_fat
                  ;
             end if;
         else  -- Incluso / Substituio
            -- verificar problema de preo
          bTemPreco := dbamv.val_proc_ffcv_resumido( cprocedimento => vRegra.cd_pro_fat_subordinado||vitensRegAmb.cd_setor --nCdSetor --pda 233642- 11/06/2008- Pedro Neiva --PDA 194962 - Pedro Neiva - 23/08/2007
                                                        ,ddatarefer    => vitensRegAmb.dt_lancamento,
                                                        dhorarefer    => vitensRegAmb.hr_lancamento,
                                                        ncodconvenio  => p_nCdConvenio,
                                                        ncodplano     => p_nCdConPla,
                                                        ctipoatend    => vTipoAtend,
                                                        ncodtipoaco   => vitensRegAmb.cd_tip_acom,
                                                        cretmsg       => vMensRetorno,
                                                        cTipoProduto  => null,
                                                        nProduto      => null );
             if not bTemPreco THEN
                ROLLBACK;
                return 'Procedimento ' || vRegra.cd_pro_fat_subordinado || ' no tem preo cadastrado. Regra de Lançamento ' || vRegra.cd_regra_lancamento || ' no pode ser aplicada.';
             end if;
             -- verificar proibio.
             vProibicao:=null;
             if dbamv.pack_lanca_ffcv.c_proibicao%isopen then
                 close dbamv.pack_lanca_ffcv.c_proibicao;
            end if;
             open dbamv.pack_lanca_ffcv.c_proibicao( vRegra.cd_pro_fat_subordinado
                                                    ,p_nCdConvenio
                                                    ,p_nCdConPla
                                                    ,vTipoAtend
                                                    ,vitensRegAmb.dt_lancamento
                                                    ,vitensRegAmb.cd_setor  );
             fetch dbamv.pack_lanca_ffcv.c_proibicao into vProibicao;
             close dbamv.pack_lanca_ffcv.c_proibicao;
             if nvl(vProibicao,'XX') = 'NA' then -- no-autorizado
                ROLLBACK;
                return 'Procedimento ' || vRegra.cd_pro_fat_subordinado || ' tem proibio ''No autorizado''. Regra de Lançamento ' || vRegra.cd_regra_lancamento || ' no pode ser aplicada.';
             elsif nvl(vProibicao,'XX') = 'FC' THEN
                ROLLBACK;
                return 'Procedimento ' || vRegra.cd_pro_fat_subordinado || ' tem proibio ''Fora da conta''. Regra de Lançamento ' || vRegra.cd_regra_lancamento  || ' no pode ser aplicada.';
             elsif nvl(vProibicao,'XX') = 'AG' then
               -- verificar existncia de guia
               bGuiaObrig := dbamv.pkg_ffcv_guia.fnc_verifica_guia_obrigatoria(  p_nCdAtend
                                                                                ,p_nCdConta
                                                                                ,vRegra.cd_pro_fat_subordinado
                                                                                ,p_nCdConvenio
                                                                                ,p_nCdConPla
                                                                                ,vTipoAtend
                                                                                ,vitensRegAmb.dt_lancamento
                                                                                ,vitensRegAmb.cd_setor );
                if bGuiaObrig then
                   nGuiaPendente := null;
                   nCdGuia := dbamv.pkg_ffcv_guia.fnc_retorna_guia_disponivel( p_nCdAtend
                                                                              ,p_nCdConta
                                                                              ,p_nCdConvenio
                                                                              ,vRegra.cd_pro_fat_subordinado
                                                                              ,vitensRegAmb.qt_lancamento
                                                                              ,vitensRegAmb.cd_tip_acom
                                                                              ,'P'        -- pvTpGuia (procedimento)
                                                                              ,nGuiaPendente );
                    if nvl(nCdGuia, 0) = 0 THEN
                      ROLLBACK;
                      return 'Procedimento '||vRegra.cd_pro_fat_subordinado||' não possui guia autorizada, ou qtde insuficiente. Regra de Lançamento '||vRegra.cd_regra_lancamento||' não pode ser aplicada.';
     		        end If;
                 end if; --if bGuiaObrig then
              end if; -- nvl(vProibicao,'XX') = 'AG'
            --
            nCodGruFat:=null;
            if cGruFat%isopen then
                 close cGruFat;
            end if;
            open cGruFat (vRegra.cd_pro_fat_subordinado);
            fetch cGruFat into nCodGruFat;
            close cGruFat;
            if c_forapre%isopen then
                 close c_forapre;
            end if;
            OPEN c_forapre (p_nCdConvenio, nCodGruFat);
            FETCH c_forapre INTO csn_prestador, cSnAtiMed/* pda 525319 */;
            CLOSE c_forapre;
            IF    csn_prestador = 'S' then
                  nCdPrestador := nvl(vitensRegamb.cd_prestador, vitensRegamb.prestador_atend);
                      if vitensRegAmb.cd_ati_med is null then
                         if cAtimedClin%isopen then
                            close cAtimedClin;
                         end if;
                         open cAtimedClin;
                         fetch cAtimedClin into ccdatimed;
                         close cAtimedClin;
                      else
                        ccdatimed := vitensRegAmb.cd_ati_med;
                      end if;
            else
                  ccdatimed := null;
                  nCdPrestador := null;
            END IF;
            /* pda 525319 - Só preencher atividade médica se a configuração exigir. */
            if cSnAtiMed = 'N' then
              ccdatimed := null;
            end if;
            /* pda 525319 - Se o prestador for nulo, a forma de pagamento também será nula. */
            if nCdPrestador is null then
              vTpPagamento := null;
            else
              vTpPagamento := vitensRegAmb.tp_pagamento;
            end if;
     		    /* pda 525319 - fim */
            if vRegra.tp_acao = 'S' then -- substituio
               begin
               update dbamv.itreg_amb_espelho
                set cd_pro_fat = nvl(vRegra.cd_pro_fat_subordinado,cd_pro_fat)
                   ,vl_filme_unitario = null
                   ,vl_acrescimo = null
                   ,vl_desconto = null
                   ,cd_gru_fat  = nvl(nCodGruFat,cd_gru_fat)
                   ,vl_unitario = null
                   ,vl_honorario_unitario = null
                   ,vl_operacional_unitario = null
                   ,vl_total_conta = null
                   ,tp_mvto = 'Regra Lança'
                   ,cd_mvto = null
                   ,cd_itmvto = null
                   ,cd_prestador = nCdPrestador
                   ,cd_ati_med = cCdAtiMed
                   ,cd_lancamento_reg_lanc = null --vitensRegAmb.cd_lancamento
                   ,cd_regra_lancamento = vRegra.cd_Regra_Lancamento
                where cd_reg_amb = p_nCdConta
                     and cd_lancamento = vitensRegAmb.cd_lancamento
                     and cd_Atendimento = p_nCdAtend;
                 exception
                 when others then
                    raise_application_error (-20046, 'Erro ' || SQLCODE || ' ** ' || SQLERRM);
                 end;
              elsif vRegra.tp_acao = 'I' then  -- incluso
                 -- selecionar o novo Lançamento.
                 select max(cd_lancamento) + 1 into nCdLancamento
                  from   dbamv.itreg_amb_espelho
                   where  cd_reg_amb = p_nCdConta;
                 begin
                  insert  into  dbamv.itreg_amb_espelho (cd_reg_amb,
                                                cd_lancamento,
                                                hr_lancamento,
                                                qt_lancamento,
                                                vl_unitario,
                                                vl_acrescimo,
                                                vl_desconto,
                                                cd_gru_fat,
                                                cd_pro_fat,
                                                cd_atendimento,
                                                cd_prestador,
                                                cd_con_pla,
                                                cd_convenio,
                                                vl_honorario_unitario,
                                                vl_operacional_unitario,
                                                cd_ati_med,
                                                cd_pres_con,
                                                vl_percentual_paciente,
                                                vl_filme_unitario,
                                                vl_total_conta,
                                                sn_fatura_impressa,
                                                sn_fechada,
                                                cd_importa_reg_amb,
                                                sn_conta_calculada,
                                                cd_guia,
                                                sn_pertence_pacote,
                                                dt_fechamento,
                                                nm_usuario_fechou,
                                                vl_desconto_fechamento,
                                                vl_acrescimo_fechamento,
                                                vl_conta_no_fechamento,
                                                vl_base_repassado,
                                                cd_motivo_glosa,
                                                qt_ch_unitario,
                                                vl_percentual_multipla,
                                                tp_pagamento,
                                                cd_setor_produziu,
                                                cd_setor,
                                                cd_padrao,
                                                sn_horario_especial,
                                                cd_reg_amb_pai,
                                                cd_lancamento_pai,
                                                cd_franquia,
                                                cd_regra_acoplamento,
                                                vl_perc_acoplamento,
                                                sn_paciente_paga,
                                                cd_regra_atendimento,
                                                cd_regra_atendimento_pro_fat,
                                                cd_franquia_valor_total,
                                                cd_reg_amb_rel,
                                                cd_lancamento_rel,
                                                cd_itmvto,
                                                cd_usuario,
                                                cd_mvto,
                                                tp_mvto,
                                                hr_lancamento_final,
                                                sn_repassou_virtual,
                                                sn_pronta,
                                                vl_desconto_conta,
                                                dt_sessao,
                                                tp_mvto_desconto,
                                                tp_desconto,
                                                vl_nota,
                                                sn_repassado,
                                                fator_relacionado,
                                                nr_seq_preimpre,
                                                cd_conta_kit,
                                                cd_lancamento_reg_lanc,
                                                cd_regra_lancamento,
                                                cd_conta_pacote,
                                                sn_regra_lancamento,
                                                nr_difep)
                                       ( select cd_reg_amb,
                                                cd_lancamento,
                                                hr_lancamento,
                                                qt_lancamento,
                                                vl_unitario,
                                                vl_acrescimo,
                                                vl_desconto,
                                                cd_gru_fat,
                                                cd_pro_fat,
                                                cd_atendimento,
                                                cd_prestador,
                                                cd_con_pla,
                                                cd_convenio,
                                                vl_honorario_unitario,
                                                vl_operacional_unitario,
                                                cd_ati_med,
                                                cd_pres_con,
                                                vl_percentual_paciente,
                                                vl_filme_unitario,
                                                vl_total_conta,
                                                sn_fatura_impressa,
                                                sn_fechada,
                                                cd_importa_reg_amb,
                                                sn_conta_calculada,
                                                cd_guia,
                                                sn_pertence_pacote,
                                                dt_fechamento,
                                                nm_usuario_fechou,
                                                vl_desconto_fechamento,
                                                vl_acrescimo_fechamento,
                                                vl_conta_no_fechamento,
                                                vl_base_repassado,
                                                cd_motivo_glosa,
                                                qt_ch_unitario,
                                                vl_percentual_multipla,
                                                tp_pagamento,
                                                cd_setor_produziu,
                                                cd_setor,
                                                cd_padrao,
                                                sn_horario_especial,
                                                cd_reg_amb_pai,
                                                cd_lancamento_pai,
                                                cd_franquia,
                                                cd_regra_acoplamento,
                                                vl_perc_acoplamento,
                                                sn_paciente_paga,
                                                cd_regra_atendimento,
                                                cd_regra_atendimento_pro_fat,
                                                cd_franquia_valor_total,
                                                cd_reg_amb_rel,
                                                cd_lancamento_rel,
                                                cd_itmvto,
                                                cd_usuario,
                                                cd_mvto,
                                                tp_mvto ,
                                                hr_lancamento_final,
                                                sn_repassou_virtual,
                                                sn_pronta,
                                                vl_desconto_conta,
                                                dt_sessao,
                                                tp_mvto_desconto,
                                                tp_desconto,
                                                vl_nota,
                                                sn_repassado,
                                                fator_relacionado,
                                                nr_seq_preimpre,
                                                cd_conta_kit,
                                                cd_lancamento_reg_lanc,
                                                cd_regra_lancamento,
		                                        cd_conta_pacote,
                                                sn_regra_lancamento,
                                                nr_difep
                                       from (
                                       select cd_reg_amb,
                                                nCdLancamento cd_lancamento, --cd_lancamento,
                                                hr_lancamento,
                                                qt_lancamento,
                                                null vl_unitario, --vl_unitario,
                                                null vl_acrescimo, --vl_acrescimo,
                                                null vl_desconto, --vl_desconto,
                                                nvl(nCodGruFat,cd_gru_fat) cd_gru_fat, -- cd_gru_fat,
                                                nvl(vRegra.cd_pro_fat_subordinado,cd_pro_fat) cd_pro_fat, --cd_pro_fat,
                                                cd_atendimento,
                                                ncdprestador cd_prestador, -- cd_prestador
                                                cd_con_pla,
                                                cd_convenio,
                                                null vl_honorario_unitario, --vl_honorario_unitario,
                                                null vl_operacional_unitario, --vl_operacional_unitario,
                                                ccdatimed cd_ati_med, -- cd_ati_med
                                                cd_pres_con,
                                                vl_percentual_paciente,
                                                null vl_filme_unitario, --vl_filme_unitario,
                                                null vl_total_conta, --vl_total_conta,
                                                sn_fatura_impressa,
                                                sn_fechada,
                                                cd_importa_reg_amb,
                                                sn_conta_calculada,
                                                nCdGuia cd_guia, --cd_guia
                                                sn_pertence_pacote,
                                                dt_fechamento,
                                                nm_usuario_fechou,
                                                vl_desconto_fechamento,
                                                vl_acrescimo_fechamento,
                                                vl_conta_no_fechamento,
                                                vl_base_repassado,
                                                cd_motivo_glosa,
                                                qt_ch_unitario,
                                                vl_percentual_multipla,
                                                vTpPagamento tp_pagamento, -- PDA 525319
                                                cd_setor_produziu,
                                                cd_setor,
                                                cd_padrao,
                                                sn_horario_especial,
                                                cd_reg_amb_pai,
                                                cd_lancamento_pai,
                                                cd_franquia,
                                                cd_regra_acoplamento,
                                                vl_perc_acoplamento,
                                                sn_paciente_paga,
                                                cd_regra_atendimento,
                                                cd_regra_atendimento_pro_fat,
                                                cd_franquia_valor_total,
                                                cd_reg_amb_rel,
                                                cd_lancamento_rel,
                                                null cd_itmvto, --cd_itmvto,
                                                cd_usuario,
                                                null cd_mvto, --cd_mvto,
                                                'Regra Lança' tp_mvto , -- tp_mvto,
                                                hr_lancamento_final,
                                                sn_repassou_virtual,
                                                sn_pronta,
                                                vl_desconto_conta,
                                                dt_sessao,
                                                tp_mvto_desconto,
                                                tp_desconto,
                                                vl_nota,
                                                sn_repassado,
                                                fator_relacionado,
                                                nr_seq_preimpre,
                                                cd_conta_kit,
                                                null cd_lancamento_reg_lanc, --cd_lancamento, --cd_lancamento_reg_lanc,
                                                vregra.cd_regra_lancamento cd_regra_lancamento, --cd_regra_lancamento,
		                                        null cd_conta_pacote,      --cd_conta_pacote,
                                                'S' sn_regra_lancamento, --sn_regra_lancamento
                                                nr_difep
                                            from dbamv.itreg_amb_espelho
                                           where cd_reg_amb  =  p_nCdConta
                                             and cd_atendimento   = p_nCdAtend
                                             and cd_lancamento    = vitensRegAmb.cd_lancamento
                                        UNION
                                        select cd_reg_amb,
                                                nCdLancamento cd_lancamento, --cd_lancamento,
                                                hr_lancamento,
                                                qt_lancamento,
                                                null vl_unitario, --vl_unitario,
                                                null vl_acrescimo, --vl_acrescimo,
                                                null vl_desconto, --vl_desconto,
                                                nvl(nCodGruFat,cd_gru_fat) cd_gru_fat, -- cd_gru_fat,
                                                nvl(vRegra.cd_pro_fat_subordinado,cd_pro_fat) cd_pro_fat, --cd_pro_fat,
                                                cd_atendimento,
                                                ncdprestador cd_prestador, -- cd_prestador
                                                cd_con_pla,
                                                cd_convenio,
                                                null vl_honorario_unitario, --vl_honorario_unitario,
                                                null vl_operacional_unitario, --vl_operacional_unitario,
                                                ccdatimed cd_ati_med, --cd_ati_med
                                                cd_pres_con,
                                                vl_percentual_paciente,
                                                null vl_filme_unitario, --vl_filme_unitario,
                                                null vl_total_conta, --vl_total_conta,
                                                sn_fatura_impressa,
                                                sn_fechada,
                                                cd_importa_reg_amb,
                                                sn_conta_calculada,
                                                nCdGuia cd_guia, --cd_guia
                                                sn_pertence_pacote,
                                                dt_fechamento,
                                                nm_usuario_fechou,
                                                vl_desconto_fechamento,
                                                vl_acrescimo_fechamento,
                                                vl_conta_no_fechamento,
                                                vl_base_repassado,
                                                cd_motivo_glosa,
                                                qt_ch_unitario,
                                                vl_percentual_multipla,
                                                vTpPagamento tp_pagamento, -- PDA 525319
                                                cd_setor_produziu,
                                                cd_setor,
                                                cd_padrao,
                                                sn_horario_especial,
                                                cd_reg_amb_pai,
                                                cd_lancamento_pai,
                                                cd_franquia,
                                                cd_regra_acoplamento,
                                                vl_perc_acoplamento,
                                                sn_paciente_paga,
                                                cd_regra_atendimento,
                                                cd_regra_atendimento_pro_fat,
                                                cd_franquia_valor_total,
                                                cd_reg_amb_rel,
                                                cd_lancamento_rel,
                                                null cd_itmvto, --cd_itmvto,
                                                cd_usuario,
                                                null cd_mvto, --cd_mvto,
                                                'Regra Lança' tp_mvto , -- tp_mvto,
                                                hr_lancamento_final,
                                                sn_repassou_virtual,
                                                sn_pronta,
                                                vl_desconto_conta,
                                                dt_sessao,
                                                tp_mvto_desconto,
                                                tp_desconto,
                                                vl_nota,
                                                sn_repassado,
                                                fator_relacionado,
                                                nr_seq_preimpre,
                                                cd_conta_kit,
                                                null cd_lancamento_reg_lanc, --cd_lancamento, --cd_lancamento_reg_lanc,
                                                vregra.cd_regra_lancamento cd_regra_lancamento, --cd_regra_lancamento,
		                                        null cd_conta_pacote,  --cd_conta_pacote,
                                                'S'  sn_regra_lancamento,--sn_regra_lancamento
                                                nr_difep
                                            from dbamv.log_itreg_amb_reg_lanc itreg_amb
                                              where cd_reg_amb  =  p_nCdConta
                                              and cd_atendimento   = p_nCdAtend
                                              and cd_lancamento    = vitensRegAmb.cd_lancamento
                                         )  where rownum = 1
                                         );
                                    exception
                                    when others then
                                       raise_application_error (-20045, 'Erro ' || SQLCODE || ' ** ' || SQLERRM);
                                    end;
                                 end if;
         end if; -- tp_acao
         --ngrau:= vRegra.grau ;
     -- end if; -- ngrau
       end loop;   -- cRegra
     end loop; -- vitensRegAmb
      begin
        update dbamv.itreg_amb_espelho set sn_regra_lancamento = 'S'
         where cd_reg_amb =  p_nCdConta
         and cd_atendimento = p_nCdAtend;
      end;
  end if; -- vTpAtend
 return null;
END; --FUNCTION FNC_APLICA_REGRA_LANCAMENTO
function fnc_traduz_proc(   pvTipo          in varchar2, --  C / D / T / Z (código, descrição, tabela tiss, Indicador de tradução)
                            -- 1a. opção de parâmetros
                            pnCdAtendimento in dbamv.atendime.cd_atendimento%type,
  	                        pnCdConta       in dbamv.itreg_fat_espelho.cd_reg_fat%type,
                            pnCdLancamento  in dbamv.itreg_fat_espelho.cd_lancamento%type,
  	                        -- 2a. opção de parâmetros
 	                        pnCdConvenio    in dbamv.convenio.cd_convenio%type,
 	                        pvTpAtend       in dbamv.atendime.tp_atendimento%type,
 	                        pvProFat        in dbamv.pro_fat.cd_pro_fat%type,
 	                        pnCdSetor		in dbamv.setor.cd_setor%type,
 	                          --
                       	    pvReserva       in varchar2) return varchar2 is
  nCdConvenio     dbamv.convenio.cd_convenio%type;
  vTpAtend        dbamv.atendime.tp_atendimento%type;
  vProFat         varchar2(10); -- dbamv.pro_fat.cd_pro_fat%type;
  nCdSetor        dbamv.setor.cd_setor%type;
  nCdRegra        dbamv.regra.cd_regra%type;
  nCdConPla       dbamv.con_pla.cd_con_pla%type;
  --
  vTpConta        varchar2(1);
  vResult         varchar2(500);
  --
begin
  -- =======================================================================================================================
  -- LER PARÂMETROS
  -- =======================================================================================================================
  if pnCdAtendimento is not null  then  -- 1a. opção de parâmetros ----------------------------------------------------------
    --
    if nvl(vcAtendimento.cd_atendimento,0)<>pnCdAtendimento then
      open dbamv.pkg_ffcv_tiss_pii.cAtendimento(pnCdAtendimento);
      fetch dbamv.pkg_ffcv_tiss_pii.cAtendimento into vcAtendimento;
      close dbamv.pkg_ffcv_tiss_pii.cAtendimento;
    end if;
    --
    select decode(vcAtendimento.tp_atendimento,'I','H','A') into vTpConta from dual;
    --
    if nvl(vcConta.cd_conta||vcConta.cd_atendimento||vcConta.tp_conta,'XX')<>pnCdConta||pnCdAtendimento||vTpConta then
      open dbamv.pkg_ffcv_tiss_pii.cConta(pnCdConta, pnCdAtendimento, vTpConta);
      fetch dbamv.pkg_ffcv_tiss_pii.cConta into vcConta;
      close dbamv.pkg_ffcv_tiss_pii.cConta;
    end if;
    --
    if pnCdAtendimento||pnCdConta||pnCdLancamento <> nvl(vcAtendimento.cd_atendimento||vItem.cd_conta||vItem.cd_lancamento, 'XXX') then
      open dbamv.pack_ffcv_espelho.cItem(vTpConta,pnCdAtendimento,pnCdConta,pnCdLancamento,null,PvReserva);
      fetch dbamv.pack_ffcv_espelho.cItem into vItem;
      close dbamv.pack_ffcv_espelho.cItem;
    end if;
  	--
    nCdConvenio := vItem.cd_convenio;
    vTpAtend    := vcAtendimento.tp_atendimento;
    vProFat     := vItem.cd_pro_fat;
    nCdSetor	:= vitem.cd_setor;
    nCdRegra    := vItem.cd_regra;
    nCdConPla   := vcConta.cd_con_pla;
    --
  else                                 -- 2a. opção de parâmetros   -------------------------------------------------------
    --
    nCdConvenio := pnCdConvenio;
    vTpAtend    := pvTpAtend;
    vProFat     := pvProFat;
    nCdSetor	:= pnCdSetor;
    nCdRegra    := Null;
    nCdConPla   := Null;    -- ???
    --
  end if;
  -- =======================================================================================================================
  -- DADOS COMPLEMENTARES - USO GERAL
  -- =======================================================================================================================
  if vProFat <> nvl(vcProFat.cd_pro_fat,'X') then
    open dbamv.pkg_ffcv_tiss_pii.cProFat(vProFat);
    fetch dbamv.pkg_ffcv_tiss_pii.cProFat into vcProFat;
    close dbamv.pkg_ffcv_tiss_pii.cProFat;
  end if;
  --
  if vProFat <> nvl(vcProFatAux.cd_pro_fat,'X') then
    open dbamv.pkg_ffcv_tiss_pii.cProFatAux(vProFat, null);
    fetch dbamv.pkg_ffcv_tiss_pii.cProFatAux into vcProFatAux;
    close dbamv.pkg_ffcv_tiss_pii.cProFatAux;
  end if;
  --
  if NVL(vcEmpresaConv.cd_multi_empresa||vcEmpresaConv.cd_convenio,'XX') <> dbamv.pkg_mv2000.le_empresa||nCdConvenio then
    open dbamv.pkg_ffcv_tiss_pii.cEmpresaConv(dbamv.pkg_mv2000.le_empresa, nCdConvenio);
    fetch dbamv.pkg_ffcv_tiss_pii.cEmpresaConv into vcEmpresaConv;
    close dbamv.pkg_ffcv_tiss_pii.cEmpresaConv;
  end if;
  --
  if nCdRegra is null then
    if nvl(vcEmpresaConPla.cd_multi_empresa||vcEmpresaConPla.cd_convenio||vcEmpresaConPla.cd_con_pla,000)<>dbamv.pkg_mv2000.le_empresa||nCdConvenio||nCdConPla then
      open  dbamv.pkg_ffcv_tiss_pii.cEmpresaConPla(dbamv.pkg_mv2000.le_empresa, nCdConvenio, nCdConPla, null);
      fetch dbamv.pkg_ffcv_tiss_pii.cEmpresaConPla into vcEmpresaConPla;
      close dbamv.pkg_ffcv_tiss_pii.cEmpresaConPla;
    end if;
    nCdRegra := vcEmpresaConPla.cd_regra;
  end if;
  --
  if nvl(vcTabFatRegra.cd_regra||vcTabFatRegra.cd_gru_pro,00)<> nCdRegra||vcProFatAux.cd_gru_pro then
    open  dbamv.pkg_ffcv_tiss_pii.cTabFatRegra( nCdRegra,vcProFatAux.cd_gru_pro ,null );
    fetch dbamv.pkg_ffcv_tiss_pii.cTabFatRegra into vcTabFatRegra;
    close dbamv.pkg_ffcv_tiss_pii.cTabFatRegra;
  end if;
  --
  -- =======================================================================================================================
  -- OBTER CONFIGURAÇÃO DE APRES.PROCEDIMENTOS - TISS
  -- =======================================================================================================================
  if nCdConvenio||vcProFatAux.tp_gru_pro||vcProFatAux.cd_gru_pro||vProFat||vcProFat.tp_serv_hospitalar||vcProFat.sn_pacote
    <> nvl(vcConfAprProc.cd_convenio||vcConfAprProc.tp_gru_pro||vcConfAprProc.cd_gru_pro||vcConfAprProc.cd_pro_fat||vcConfAprProc.tp_serv_hospitalar||vcConfAprProc.sn_pacote,'XXXXXX')
    then
    --
 	vcConfAprProc := null;
    --
  	open dbamv.pkg_ffcv_tiss_pii.cConfAprProc(nCdConvenio,
                                              vcProFatAux.tp_gru_pro,
                                          	  vcProFatAux.cd_gru_pro,
                                          	  vProFat,
										  	  vcProFat.tp_serv_hospitalar,
										  	  vcProFat.sn_pacote);
    fetch dbamv.pkg_ffcv_tiss_pii.cConfAprProc into vcConfAprProc;
   	close dbamv.pkg_ffcv_tiss_pii.cConfAprProc;
   	--
  end if;
  -- =======================================================================================================================
  -- RETORNAR TIPO DE TABELA
  -- =======================================================================================================================
  if pvTipo = 'T' then
    --
    vResult := vcConfAprProc.tp_tab_tiss;
    -- =======================================================================================================================
    -- RETORNAR CODIGO ou DESCRIÇÃO ou INDICADOR da tradução
    -- =======================================================================================================================
  elsif pvTipo in ( 'C', 'D', 'Z' ) then
    -- Traduções em Ordem de Prioridade : Agrupamento,  CodPro (neste caso fina não avança) ou por Configurações (demais por Apr.Proced.TISS).
    --
  	-- Agrupamento
  	if vcEmpresaConv.cd_apr_conta_meio_mag||nCdConvenio||vcProFatAux.cd_gru_pro||vProFat||nCdSetor||vcProFatAux.tp_gru_pro
   	<> nvl(vcProcAgrup.cd_apr_conta_meio_mag||vcProcAgrup.cd_convenio||vcProcAgrup.cd_gru_pro||vcProcAgrup.cd_pro_fat
      	   ||vcProcAgrup.cd_setor||vcProcAgrup.tp_gru_pro,'XXXXXX')
      then
      --
   	  vcProcAgrup := null;
      /* PDA 300623 */
  	  open dbamv.pkg_ffcv_tiss_pii.cProcAgrup(vcEmpresaConv.cd_apr_conta_meio_mag,
                                              nCdConvenio,
                                              vcProFatAux.cd_gru_pro,
                                              vProFat,
                                           	  nCdSetor,
                                           	  vcProFatAux.tp_gru_pro,
                                              vTpAtend);
      fetch dbamv.pkg_ffcv_tiss_pii.cProcAgrup into vcProcAgrup;
   	  close dbamv.pkg_ffcv_tiss_pii.cProcAgrup;
      /* PDA 300623 */
   	  --
   	  if vcProcAgrup.cd_apr_conta_meio_mag is not null then
   	  	vProFat := vcProcAgrup.cd_pro_fat_agrup; -- considerar traduções adiante com este resultado também.
   	  end if;
   	  --
    end if;
    --
    if vcProcAgrup.cd_apr_conta_meio_mag is not null  then
   	  --
   	  if pvTipo ='C' then
   	    vResult := vcProcAgrup.cd_pro_fat_agrup;
   	  elsif pvTipo = 'D' then
   	    vResult := nvl(vcProcAgrup.ds_pro_fat_agrup,vcProFat.ds_pro_fat); -- Opcionalmente pode não ter tradução de descrição.
   	  elsif pvTipo = 'Z' then
   	    vResult := 'AG,'; -- Indica que a tradução seria Agrupamento. Pode sub-traduzir nos próximos
   	  end if;
   	  --
    end if;
    --
  	-- De/Para é Prioridade isolado (nao considera demais) -------------------------------------------------------------------
    --
    if dbamv.pkg_mv2000.le_empresa||nCdConvenio||vProFat||vTpAtend
    <> NVL(vcCodPro.cd_multi_empresa||vcCodPro.cd_convenio||vcCodPro.cd_pro_fat||vcCodPro.tp_atendimento_ori,'XXXX')
      then
      --
 	  vcCodPro := null;
  	  open dbamv.pkg_ffcv_tiss_pii.cCodPro(dbamv.pkg_mv2000.le_empresa,
                                           nCdConvenio,
                                           vProFat,
                                           vTpAtend);
      fetch dbamv.pkg_ffcv_tiss_pii.cCodPro into vcCodPro;
   	  close dbamv.pkg_ffcv_tiss_pii.cCodPro;
   	  --
    end if;
    --
    -- excessão:  Natureza não considera de/para (apenas caso de códigos iguais)
    IF vcCodPro.cd_multi_empresa is not null and vcCodPro.ds_unidade_cobranca = 'NATUREZA' and vcCodPro.ds_codigo_cobranca = vProFat then
      vcCodPro := null;
    END IF;
    -- fim
    --
  	if vcCodPro.cd_multi_empresa is not null then
  	  --
      if pvTipo ='C' then
   	    vResult := vcCodPro.ds_codigo_cobranca;
   	  elsif pvTipo = 'D' then
   	    vResult := nvl(vcCodPro.ds_nome_cobranca,vcProFat.ds_pro_fat); -- Opcionalmente pode não ter tradução de descrição.
   	  elsif pvTipo = 'Z' then
   	    vResult := vResult||'DE';
      end if;
   	  --
   	else -- Senão, demais traduções previstas (podem sobrepor o agrupamento) --------------------------------------------------
	  -- Traduções Previstas
	  --
	  if vcConfAprProc.tp_trad_apr_proc = 'TU' then
	    --
        if vProFat <> nvl(vcTUSS.cd_pro_fat,'X') then
		  vcTUSS := null;
	  	  open dbamv.pkg_ffcv_tiss_pii.cTUSS(vProFat,trunc(sysdate),null);
	  	  fetch dbamv.pkg_ffcv_tiss_pii.cTUSS into vcTUSS;
	  	  close dbamv.pkg_ffcv_tiss_pii.cTUSS;
 	    end if;
        --
	  	if vcTUSS.cd_pro_fat is not null then
	  	  if pvTipo ='C' then
   	        vResult := vcTUSS.cd_pro_tuss;
   	      elsif pvTipo = 'D' then
   	        vResult := substr(vcTUSS.ds_pro_tuss,1,60);
          elsif pvTipo = 'Z' then
   	        vResult := vResult||vcConfAprProc.tp_trad_apr_proc;
   	      end if;
   	    end if;
        --
   	  elsif vcConfAprProc.tp_trad_apr_proc = 'CB' then
   	    --
	    if vProFat <> nvl(vcCBHPM.cd_pro_fat,'X') then
	      vcCBHPM := null;
	      open dbamv.pkg_ffcv_tiss_pii.cCBHPM(vProFat,null);
   	      fetch dbamv.pkg_ffcv_tiss_pii.cCBHPM into vcCBHPM;
   	      close dbamv.pkg_ffcv_tiss_pii.cCBHPM;
   	    end if;
   	    --
	  	  if vcCBHPM.cd_pro_fat is not null then
		      if pvTipo ='C' then
   	        vResult := vcCBHPM.cd_pro_fat_hierarquizado;
   	      elsif pvTipo = 'D' then
   	        vResult := vcCBHPM.ds_pro_fat_hierarquizado;
   	      elsif pvTipo = 'Z' then
   	        vResult := vResult||vcConfAprProc.tp_trad_apr_proc;
   	      end if;
   	    end if;
   	    --
   	  elsif vcConfAprProc.tp_trad_apr_proc = 'BR' then
   	    --
	    if vProFat <> nvl(vcBRASINDICE.cd_pro_fat,'X') then
	      vcBRASINDICE := null;
	      open dbamv.pkg_ffcv_tiss_pii.cBRASINDICE(vProFat,null);
   	      fetch dbamv.pkg_ffcv_tiss_pii.cBRASINDICE into vcBRASINDICE;
   	      close dbamv.pkg_ffcv_tiss_pii.cBRASINDICE;
   	    end if;
   	    --
   	    if vcBRASINDICE.cd_pro_fat is not null then
	  	    if pvTipo ='C' then
   	        vResult := vcBRASINDICE.cd_tiss;
   	      elsif pvTipo = 'D' then
            vResult := vcBRASINDICE.ds_medicamento;
            -- Se o convênio for GEAP ou Assefaz, a descrição que será retornada será a cadastrada na PRO_FAT -  PDA 373699/346926
            if nCdConvenio is not null and dbamv.pkg_ffcv_tiss_pii.fnc_conf('NR_REGISTRO_OPERADORA_ANS', nCdConvenio, null) in ('323080', '346926') then
              vResult := vcProFat.ds_pro_fat||' - '||vcProFat.ds_unidade;
            end if;
   	      elsif pvTipo = 'Z' then
   	        vResult := vResult||vcConfAprProc.tp_trad_apr_proc;
   	      end if;
   	    end if;
   	      --
   	  elsif vcConfAprProc.tp_trad_apr_proc = 'SI' then
   	    --
		if vProFat <> nvl(vcSIMPRO.cd_pro_fat,'X') then
		  vcSIMPRO := null;
          --
		  open dbamv.pkg_ffcv_tiss_pii.cSIMPRO(vProFat,vcTabFatRegra.cd_tab_fat);    -- XIS_MARIN
   	      fetch dbamv.pkg_ffcv_tiss_pii.cSIMPRO into vcSIMPRO;
   	      close dbamv.pkg_ffcv_tiss_pii.cSIMPRO;
   	    end if;
   	    --
   	    if vcSIMPRO.cd_pro_fat is not null then
	  	    if pvTipo ='C' then
   	      	vResult := vcSIMPRO.cd_simpro;
   	      elsif pvTipo = 'D' then
   	        vResult := vcSIMPRO.ds_simpro;
   	      elsif pvTipo = 'Z' then
   	        vResult := vResult||vcConfAprProc.tp_trad_apr_proc;
   	      end if;
   	    end if;
	    --
	    end if;
	  --
    end if;
    --
  end if;
  -- =======================================================================================================================
  -- RETORNO DA FUNÇÃO (resultado)
  -- =========================================================================================================================
  if vResult is null then -- Caso não tenha encontrado nenhuma tradução
    if pvTipo ='C' then
   	  vResult := vcProFat.cd_pro_fat;
   	elsif pvTipo = 'D' then
   	  vResult := vcProFat.ds_pro_fat;
   	elsif pvTipo = 'T' then
      vResult := '00';
	elsif pvTipo = 'Z' then
   	  vResult := null; -- provisório ?
    end if;
  end if;
  --
  RETURN vResult;
  --
end;
END pack_ffcv_espelho;
/

GRANT EXECUTE ON dbamv.pack_ffcv_espelho TO mv2000;
GRANT EXECUTE ON dbamv.pack_ffcv_espelho TO public;
